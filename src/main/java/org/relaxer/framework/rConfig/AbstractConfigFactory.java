/*
 * The Relaxer artifact
 * Copyright (c) 2000-2004, ASAMI Tomoharu, All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer. 
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package org.relaxer.framework.rConfig;

import java.io.*;
import java.net.URL;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * AbstractConfigFactory is generated by Relaxer based on config.rng.
 *
 * @version config.rng 1.0 (Tue Sep 07 10:36:41 JST 2004)
 * @author  Relaxer 1.1b (http://www.relaxer.org)
 */
public abstract class AbstractConfigFactory implements IConfigFactory {
    protected org.xml.sax.ErrorHandler errorHandler;
    protected org.xml.sax.EntityResolver entityResolver;
    protected org.iso_relax.verifier.Verifier verifier;
    protected String baseUri;

    /**
     * Gets a Class of <code>FCCopyright</code>.
     *
     * @return Class
     */
    public Class getFCCopyrightClass() {
        return (createFCCopyright().getClass());
    }

    /**
     * Gets a Class of <code>FCVersion</code>.
     *
     * @return Class
     */
    public Class getFCVersionClass() {
        return (createFCVersion().getClass());
    }

    /**
     * Gets a Class of <code>FCUsage</code>.
     *
     * @return Class
     */
    public Class getFCUsageClass() {
        return (createFCUsage().getClass());
    }

    /**
     * Gets a Class of <code>FCSlot</code>.
     *
     * @return Class
     */
    public Class getFCSlotClass() {
        return (createFCSlot().getClass());
    }

    /**
     * Gets a Class of <code>FCActionIn</code>.
     *
     * @return Class
     */
    public Class getFCActionInClass() {
        return (createFCActionIn().getClass());
    }

    /**
     * Gets a Class of <code>FCActionOut</code>.
     *
     * @return Class
     */
    public Class getFCActionOutClass() {
        return (createFCActionOut().getClass());
    }

    /**
     * Gets a Class of <code>FCComponentAction</code>.
     *
     * @return Class
     */
    public Class getFCComponentActionClass() {
        return (createFCComponentAction().getClass());
    }

    /**
     * Gets a Class of <code>FCModelAction</code>.
     *
     * @return Class
     */
    public Class getFCModelActionClass() {
        return (createFCModelAction().getClass());
    }

    /**
     * Gets a Class of <code>FCServiceAction</code>.
     *
     * @return Class
     */
    public Class getFCServiceActionClass() {
        return (createFCServiceAction().getClass());
    }

    /**
     * Gets a Class of <code>FCResourceAction</code>.
     *
     * @return Class
     */
    public Class getFCResourceActionClass() {
        return (createFCResourceAction().getClass());
    }

    /**
     * Gets a Class of <code>FCSystemAction</code>.
     *
     * @return Class
     */
    public Class getFCSystemActionClass() {
        return (createFCSystemAction().getClass());
    }

    /**
     * Gets a Class of <code>FCPrologue</code>.
     *
     * @return Class
     */
    public Class getFCPrologueClass() {
        return (createFCPrologue().getClass());
    }

    /**
     * Gets a Class of <code>FCEpilogue</code>.
     *
     * @return Class
     */
    public Class getFCEpilogueClass() {
        return (createFCEpilogue().getClass());
    }

    /**
     * Gets a Class of <code>FCScenarioAction</code>.
     *
     * @return Class
     */
    public Class getFCScenarioActionClass() {
        return (createFCScenarioAction().getClass());
    }

    /**
     * Gets a Class of <code>FCMoveSceneAction</code>.
     *
     * @return Class
     */
    public Class getFCMoveSceneActionClass() {
        return (createFCMoveSceneAction().getClass());
    }

    /**
     * Gets a Class of <code>FCScenario</code>.
     *
     * @return Class
     */
    public Class getFCScenarioClass() {
        return (createFCScenario().getClass());
    }

    /**
     * Gets a Class of <code>FCScene</code>.
     *
     * @return Class
     */
    public Class getFCSceneClass() {
        return (createFCScene().getClass());
    }

    /**
     * Gets a Class of <code>FCDialog</code>.
     *
     * @return Class
     */
    public Class getFCDialogClass() {
        return (createFCDialog().getClass());
    }

    /**
     * Gets a Class of <code>FCHelp</code>.
     *
     * @return Class
     */
    public Class getFCHelpClass() {
        return (createFCHelp().getClass());
    }

    /**
     * Gets a Class of <code>FCScriptService</code>.
     *
     * @return Class
     */
    public Class getFCScriptServiceClass() {
        return (createFCScriptService().getClass());
    }

    /**
     * Gets a Class of <code>FCComponentService</code>.
     *
     * @return Class
     */
    public Class getFCComponentServiceClass() {
        return (createFCComponentService().getClass());
    }

    /**
     * Gets a Class of <code>FCSystemService</code>.
     *
     * @return Class
     */
    public Class getFCSystemServiceClass() {
        return (createFCSystemService().getClass());
    }

    /**
     * Gets a Class of <code>FCComponentOption</code>.
     *
     * @return Class
     */
    public Class getFCComponentOptionClass() {
        return (createFCComponentOption().getClass());
    }

    /**
     * Gets a Class of <code>FCSystemOption</code>.
     *
     * @return Class
     */
    public Class getFCSystemOptionClass() {
        return (createFCSystemOption().getClass());
    }

    /**
     * Gets a Class of <code>FCOptionRef</code>.
     *
     * @return Class
     */
    public Class getFCOptionRefClass() {
        return (createFCOptionRef().getClass());
    }

    /**
     * Gets a Class of <code>FCOptionSet</code>.
     *
     * @return Class
     */
    public Class getFCOptionSetClass() {
        return (createFCOptionSet().getClass());
    }

    /**
     * Gets a Class of <code>FCAttribute</code>.
     *
     * @return Class
     */
    public Class getFCAttributeClass() {
        return (createFCAttribute().getClass());
    }

    /**
     * Gets a Class of <code>FCOperationIn</code>.
     *
     * @return Class
     */
    public Class getFCOperationInClass() {
        return (createFCOperationIn().getClass());
    }

    /**
     * Gets a Class of <code>FCOperationOut</code>.
     *
     * @return Class
     */
    public Class getFCOperationOutClass() {
        return (createFCOperationOut().getClass());
    }

    /**
     * Gets a Class of <code>FCOperation</code>.
     *
     * @return Class
     */
    public Class getFCOperationClass() {
        return (createFCOperation().getClass());
    }

    /**
     * Gets a Class of <code>FCProvider</code>.
     *
     * @return Class
     */
    public Class getFCProviderClass() {
        return (createFCProvider().getClass());
    }

    /**
     * Gets a Class of <code>FCVariable</code>.
     *
     * @return Class
     */
    public Class getFCVariableClass() {
        return (createFCVariable().getClass());
    }

    /**
     * Gets a Class of <code>FCExtension</code>.
     *
     * @return Class
     */
    public Class getFCExtensionClass() {
        return (createFCExtension().getClass());
    }

    /**
     * Gets a Class of <code>FCProperty</code>.
     *
     * @return Class
     */
    public Class getFCPropertyClass() {
        return (createFCProperty().getClass());
    }

    /**
     * Gets a Class of <code>FCValue</code>.
     *
     * @return Class
     */
    public Class getFCValueClass() {
        return (createFCValue().getClass());
    }

    /**
     * Gets a Class of <code>FCConstructor</code>.
     *
     * @return Class
     */
    public Class getFCConstructorClass() {
        return (createFCConstructor().getClass());
    }

    /**
     * Gets a Class of <code>FCMethod</code>.
     *
     * @return Class
     */
    public Class getFCMethodClass() {
        return (createFCMethod().getClass());
    }

    /**
     * Gets a Class of <code>FCJndiComponentRef</code>.
     *
     * @return Class
     */
    public Class getFCJndiComponentRefClass() {
        return (createFCJndiComponentRef().getClass());
    }

    /**
     * Gets a Class of <code>FCConfigComponentRef</code>.
     *
     * @return Class
     */
    public Class getFCConfigComponentRefClass() {
        return (createFCConfigComponentRef().getClass());
    }

    /**
     * Gets a Class of <code>FCJavaBeansComponentRef</code>.
     *
     * @return Class
     */
    public Class getFCJavaBeansComponentRefClass() {
        return (createFCJavaBeansComponentRef().getClass());
    }

    /**
     * Gets a Class of <code>FCJndiModelRef</code>.
     *
     * @return Class
     */
    public Class getFCJndiModelRefClass() {
        return (createFCJndiModelRef().getClass());
    }

    /**
     * Gets a Class of <code>FCConfigModelRef</code>.
     *
     * @return Class
     */
    public Class getFCConfigModelRefClass() {
        return (createFCConfigModelRef().getClass());
    }

    /**
     * Gets a Class of <code>FCJavaBeansModelRef</code>.
     *
     * @return Class
     */
    public Class getFCJavaBeansModelRefClass() {
        return (createFCJavaBeansModelRef().getClass());
    }

    /**
     * Gets a Class of <code>FCJndiResourceRef</code>.
     *
     * @return Class
     */
    public Class getFCJndiResourceRefClass() {
        return (createFCJndiResourceRef().getClass());
    }

    /**
     * Gets a Class of <code>FCConfigResourceRef</code>.
     *
     * @return Class
     */
    public Class getFCConfigResourceRefClass() {
        return (createFCConfigResourceRef().getClass());
    }

    /**
     * Gets a Class of <code>FCRealization</code>.
     *
     * @return Class
     */
    public Class getFCRealizationClass() {
        return (createFCRealization().getClass());
    }

    /**
     * Gets a Class of <code>FCComponent</code>.
     *
     * @return Class
     */
    public Class getFCComponentClass() {
        return (createFCComponent().getClass());
    }

    /**
     * Gets a Class of <code>FCModelMapper</code>.
     *
     * @return Class
     */
    public Class getFCModelMapperClass() {
        return (createFCModelMapper().getClass());
    }

    /**
     * Gets a Class of <code>FCModelRepository</code>.
     *
     * @return Class
     */
    public Class getFCModelRepositoryClass() {
        return (createFCModelRepository().getClass());
    }

    /**
     * Gets a Class of <code>FCModel</code>.
     *
     * @return Class
     */
    public Class getFCModelClass() {
        return (createFCModel().getClass());
    }

    /**
     * Gets a Class of <code>FCJdbcResource</code>.
     *
     * @return Class
     */
    public Class getFCJdbcResourceClass() {
        return (createFCJdbcResource().getClass());
    }

    /**
     * Gets a Class of <code>FCDatasourceResource</code>.
     *
     * @return Class
     */
    public Class getFCDatasourceResourceClass() {
        return (createFCDatasourceResource().getClass());
    }

    /**
     * Gets a Class of <code>FCJndiResource</code>.
     *
     * @return Class
     */
    public Class getFCJndiResourceClass() {
        return (createFCJndiResource().getClass());
    }

    /**
     * Gets a Class of <code>FCFileResource</code>.
     *
     * @return Class
     */
    public Class getFCFileResourceClass() {
        return (createFCFileResource().getClass());
    }

    /**
     * Gets a Class of <code>FCUrlResource</code>.
     *
     * @return Class
     */
    public Class getFCUrlResourceClass() {
        return (createFCUrlResource().getClass());
    }

    /**
     * Gets a Class of <code>FCVariableResource</code>.
     *
     * @return Class
     */
    public Class getFCVariableResourceClass() {
        return (createFCVariableResource().getClass());
    }

    /**
     * Gets a Class of <code>FCResource</code>.
     *
     * @return Class
     */
    public Class getFCResourceClass() {
        return (createFCResource().getClass());
    }

    /**
     * Gets a Class of <code>FCLogger</code>.
     *
     * @return Class
     */
    public Class getFCLoggerClass() {
        return (createFCLogger().getClass());
    }

    /**
     * Gets a Class of <code>FCFrameworkLog</code>.
     *
     * @return Class
     */
    public Class getFCFrameworkLogClass() {
        return (createFCFrameworkLog().getClass());
    }

    /**
     * Gets a Class of <code>FCConfig</code>.
     *
     * @return Class
     */
    public Class getFCConfigClass() {
        return (createFCConfig().getClass());
    }

    /**
     * Gets a Class of <code>FCPlainScript</code>.
     *
     * @return Class
     */
    public Class getFCPlainScriptClass() {
        return (createFCPlainScript().getClass());
    }

    /**
     * Gets a Class of <code>FCPlainScriptBody</code>.
     *
     * @return Class
     */
    public Class getFCPlainScriptBodyClass() {
        return (createFCPlainScriptBody().getClass());
    }

    /**
     * Gets a Class of <code>FCSlotValue</code>.
     *
     * @return Class
     */
    public Class getFCSlotValueClass() {
        return (createFCSlotValue().getClass());
    }

    /**
     * Gets a Class of <code>FCActionInPeek</code>.
     *
     * @return Class
     */
    public Class getFCActionInPeekClass() {
        return (createFCActionInPeek().getClass());
    }

    /**
     * Gets a Class of <code>FCActionInPop</code>.
     *
     * @return Class
     */
    public Class getFCActionInPopClass() {
        return (createFCActionInPop().getClass());
    }

    /**
     * Gets a Class of <code>FCActionInValue</code>.
     *
     * @return Class
     */
    public Class getFCActionInValueClass() {
        return (createFCActionInValue().getClass());
    }

    /**
     * Gets a Class of <code>FCActionOutPoke</code>.
     *
     * @return Class
     */
    public Class getFCActionOutPokeClass() {
        return (createFCActionOutPoke().getClass());
    }

    /**
     * Gets a Class of <code>FCActionOutPush</code>.
     *
     * @return Class
     */
    public Class getFCActionOutPushClass() {
        return (createFCActionOutPush().getClass());
    }

    /**
     * Gets a Class of <code>FCParametersValues</code>.
     *
     * @return Class
     */
    public Class getFCParametersValuesClass() {
        return (createFCParametersValues().getClass());
    }

    /**
     * Gets a Class of <code>FCModelType</code>.
     *
     * @return Class
     */
    public Class getFCModelTypeClass() {
        return (createFCModelType().getClass());
    }

    /**
     * Gets a Class of <code>FCModelJavaClass</code>.
     *
     * @return Class
     */
    public Class getFCModelJavaClassClass() {
        return (createFCModelJavaClass().getClass());
    }

    /**
     * Sets a <b>errorHandler</b>.
     *
     * @param errorHandler
     */
    public void setErrorHandler(org.xml.sax.ErrorHandler errorHandler) {
        this.errorHandler = errorHandler;
    }

    /**
     * Gets a <b>errorHandler</b>.
     *
     * @return org.xml.sax.ErrorHandler
     */
    public org.xml.sax.ErrorHandler getErrorHandler() {
        return (errorHandler);
    }

    /**
     * Sets a <b>entityResolver</b>.
     *
     * @param entityResolver
     */
    public void setEntityResolver(org.xml.sax.EntityResolver entityResolver) {
        this.entityResolver = entityResolver;
    }

    /**
     * Gets a <b>entityResolver</b>.
     *
     * @return org.xml.sax.EntityResolver
     */
    public org.xml.sax.EntityResolver getEntityResolver() {
        return (entityResolver);
    }

    /**
     * Sets a <b>verifier</b>.
     *
     * @param verifier
     */
    public void setVerifier(org.iso_relax.verifier.Verifier verifier) {
        this.verifier = verifier;
    }

    /**
     * Gets a <b>verifier</b>.
     *
     * @return org.iso_relax.verifier.Verifier
     */
    public org.iso_relax.verifier.Verifier getVerifier() {
        return (verifier);
    }

    /**
     * Sets a <b>baseUri</b>.
     *
     * @param baseUri
     */
    public void setBaseUri(String baseUri) {
        this.baseUri = baseUri;
    }

    /**
     * Gets a <b>baseUri</b>.
     *
     * @return String
     */
    public String getBaseUri() {
        return (baseUri);
    }

    /**
     * Creates a <code>Object</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    public Object create(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        Object node = create(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    public Object create(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        Object node = create(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    public Object create(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        Object node = create(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    public Object create(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        Object node = create(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    public Object create(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        Object node = create(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    public Object create(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        Object node = create(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the copy <code>Object</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return Object
     */
    public Object create(Object source) {
        if (source instanceof FCCopyright) {
            FCCopyright node = createFCCopyright();
            node.setup((FCCopyright)source);
            return(node);
        } else if (source instanceof FCVersion) {
            FCVersion node = createFCVersion();
            node.setup((FCVersion)source);
            return(node);
        } else if (source instanceof FCUsage) {
            FCUsage node = createFCUsage();
            node.setup((FCUsage)source);
            return(node);
        } else if (source instanceof FCSlot) {
            FCSlot node = createFCSlot();
            node.setup((FCSlot)source);
            return(node);
        } else if (source instanceof FCActionIn) {
            FCActionIn node = createFCActionIn();
            node.setup((FCActionIn)source);
            return(node);
        } else if (source instanceof FCActionOut) {
            FCActionOut node = createFCActionOut();
            node.setup((FCActionOut)source);
            return(node);
        } else if (source instanceof FCComponentAction) {
            FCComponentAction node = createFCComponentAction();
            node.setup((FCComponentAction)source);
            return(node);
        } else if (source instanceof FCModelAction) {
            FCModelAction node = createFCModelAction();
            node.setup((FCModelAction)source);
            return(node);
        } else if (source instanceof FCServiceAction) {
            FCServiceAction node = createFCServiceAction();
            node.setup((FCServiceAction)source);
            return(node);
        } else if (source instanceof FCResourceAction) {
            FCResourceAction node = createFCResourceAction();
            node.setup((FCResourceAction)source);
            return(node);
        } else if (source instanceof FCSystemAction) {
            FCSystemAction node = createFCSystemAction();
            node.setup((FCSystemAction)source);
            return(node);
        } else if (source instanceof FCPrologue) {
            FCPrologue node = createFCPrologue();
            node.setup((FCPrologue)source);
            return(node);
        } else if (source instanceof FCEpilogue) {
            FCEpilogue node = createFCEpilogue();
            node.setup((FCEpilogue)source);
            return(node);
        } else if (source instanceof FCScenarioAction) {
            FCScenarioAction node = createFCScenarioAction();
            node.setup((FCScenarioAction)source);
            return(node);
        } else if (source instanceof FCMoveSceneAction) {
            FCMoveSceneAction node = createFCMoveSceneAction();
            node.setup((FCMoveSceneAction)source);
            return(node);
        } else if (source instanceof FCScenario) {
            FCScenario node = createFCScenario();
            node.setup((FCScenario)source);
            return(node);
        } else if (source instanceof FCScene) {
            FCScene node = createFCScene();
            node.setup((FCScene)source);
            return(node);
        } else if (source instanceof FCDialog) {
            FCDialog node = createFCDialog();
            node.setup((FCDialog)source);
            return(node);
        } else if (source instanceof FCHelp) {
            FCHelp node = createFCHelp();
            node.setup((FCHelp)source);
            return(node);
        } else if (source instanceof FCScriptService) {
            FCScriptService node = createFCScriptService();
            node.setup((FCScriptService)source);
            return(node);
        } else if (source instanceof FCComponentService) {
            FCComponentService node = createFCComponentService();
            node.setup((FCComponentService)source);
            return(node);
        } else if (source instanceof FCSystemService) {
            FCSystemService node = createFCSystemService();
            node.setup((FCSystemService)source);
            return(node);
        } else if (source instanceof FCComponentOption) {
            FCComponentOption node = createFCComponentOption();
            node.setup((FCComponentOption)source);
            return(node);
        } else if (source instanceof FCSystemOption) {
            FCSystemOption node = createFCSystemOption();
            node.setup((FCSystemOption)source);
            return(node);
        } else if (source instanceof FCOptionRef) {
            FCOptionRef node = createFCOptionRef();
            node.setup((FCOptionRef)source);
            return(node);
        } else if (source instanceof FCOptionSet) {
            FCOptionSet node = createFCOptionSet();
            node.setup((FCOptionSet)source);
            return(node);
        } else if (source instanceof FCAttribute) {
            FCAttribute node = createFCAttribute();
            node.setup((FCAttribute)source);
            return(node);
        } else if (source instanceof FCOperationIn) {
            FCOperationIn node = createFCOperationIn();
            node.setup((FCOperationIn)source);
            return(node);
        } else if (source instanceof FCOperationOut) {
            FCOperationOut node = createFCOperationOut();
            node.setup((FCOperationOut)source);
            return(node);
        } else if (source instanceof FCOperation) {
            FCOperation node = createFCOperation();
            node.setup((FCOperation)source);
            return(node);
        } else if (source instanceof FCProvider) {
            FCProvider node = createFCProvider();
            node.setup((FCProvider)source);
            return(node);
        } else if (source instanceof FCVariable) {
            FCVariable node = createFCVariable();
            node.setup((FCVariable)source);
            return(node);
        } else if (source instanceof FCExtension) {
            FCExtension node = createFCExtension();
            node.setup((FCExtension)source);
            return(node);
        } else if (source instanceof FCProperty) {
            FCProperty node = createFCProperty();
            node.setup((FCProperty)source);
            return(node);
        } else if (source instanceof FCValue) {
            FCValue node = createFCValue();
            node.setup((FCValue)source);
            return(node);
        } else if (source instanceof FCConstructor) {
            FCConstructor node = createFCConstructor();
            node.setup((FCConstructor)source);
            return(node);
        } else if (source instanceof FCMethod) {
            FCMethod node = createFCMethod();
            node.setup((FCMethod)source);
            return(node);
        } else if (source instanceof FCJndiComponentRef) {
            FCJndiComponentRef node = createFCJndiComponentRef();
            node.setup((FCJndiComponentRef)source);
            return(node);
        } else if (source instanceof FCConfigComponentRef) {
            FCConfigComponentRef node = createFCConfigComponentRef();
            node.setup((FCConfigComponentRef)source);
            return(node);
        } else if (source instanceof FCJavaBeansComponentRef) {
            FCJavaBeansComponentRef node = createFCJavaBeansComponentRef();
            node.setup((FCJavaBeansComponentRef)source);
            return(node);
        } else if (source instanceof FCJndiModelRef) {
            FCJndiModelRef node = createFCJndiModelRef();
            node.setup((FCJndiModelRef)source);
            return(node);
        } else if (source instanceof FCConfigModelRef) {
            FCConfigModelRef node = createFCConfigModelRef();
            node.setup((FCConfigModelRef)source);
            return(node);
        } else if (source instanceof FCJavaBeansModelRef) {
            FCJavaBeansModelRef node = createFCJavaBeansModelRef();
            node.setup((FCJavaBeansModelRef)source);
            return(node);
        } else if (source instanceof FCJndiResourceRef) {
            FCJndiResourceRef node = createFCJndiResourceRef();
            node.setup((FCJndiResourceRef)source);
            return(node);
        } else if (source instanceof FCConfigResourceRef) {
            FCConfigResourceRef node = createFCConfigResourceRef();
            node.setup((FCConfigResourceRef)source);
            return(node);
        } else if (source instanceof FCRealization) {
            FCRealization node = createFCRealization();
            node.setup((FCRealization)source);
            return(node);
        } else if (source instanceof FCComponent) {
            FCComponent node = createFCComponent();
            node.setup((FCComponent)source);
            return(node);
        } else if (source instanceof FCModelMapper) {
            FCModelMapper node = createFCModelMapper();
            node.setup((FCModelMapper)source);
            return(node);
        } else if (source instanceof FCModelRepository) {
            FCModelRepository node = createFCModelRepository();
            node.setup((FCModelRepository)source);
            return(node);
        } else if (source instanceof FCModel) {
            FCModel node = createFCModel();
            node.setup((FCModel)source);
            return(node);
        } else if (source instanceof FCJdbcResource) {
            FCJdbcResource node = createFCJdbcResource();
            node.setup((FCJdbcResource)source);
            return(node);
        } else if (source instanceof FCDatasourceResource) {
            FCDatasourceResource node = createFCDatasourceResource();
            node.setup((FCDatasourceResource)source);
            return(node);
        } else if (source instanceof FCJndiResource) {
            FCJndiResource node = createFCJndiResource();
            node.setup((FCJndiResource)source);
            return(node);
        } else if (source instanceof FCFileResource) {
            FCFileResource node = createFCFileResource();
            node.setup((FCFileResource)source);
            return(node);
        } else if (source instanceof FCUrlResource) {
            FCUrlResource node = createFCUrlResource();
            node.setup((FCUrlResource)source);
            return(node);
        } else if (source instanceof FCVariableResource) {
            FCVariableResource node = createFCVariableResource();
            node.setup((FCVariableResource)source);
            return(node);
        } else if (source instanceof FCResource) {
            FCResource node = createFCResource();
            node.setup((FCResource)source);
            return(node);
        } else if (source instanceof FCLogger) {
            FCLogger node = createFCLogger();
            node.setup((FCLogger)source);
            return(node);
        } else if (source instanceof FCFrameworkLog) {
            FCFrameworkLog node = createFCFrameworkLog();
            node.setup((FCFrameworkLog)source);
            return(node);
        } else if (source instanceof FCConfig) {
            FCConfig node = createFCConfig();
            node.setup((FCConfig)source);
            return(node);
        } else if (source instanceof FCPlainScript) {
            FCPlainScript node = createFCPlainScript();
            node.setup((FCPlainScript)source);
            return(node);
        } else if (source instanceof FCPlainScriptBody) {
            FCPlainScriptBody node = createFCPlainScriptBody();
            node.setup((FCPlainScriptBody)source);
            return(node);
        } else {
            return (null);
        }
    }

    /**
     * Creates a <code>Object</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    public Object create(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        Object node = create(doc.getDocumentElement());
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    public Object create(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        if (FCCopyright.isMatch(element)) {
            FCCopyright node = createFCCopyright();
            node.setup(element);
            return(node);
        } else if (FCVersion.isMatch(element)) {
            FCVersion node = createFCVersion();
            node.setup(element);
            return(node);
        } else if (FCUsage.isMatch(element)) {
            FCUsage node = createFCUsage();
            node.setup(element);
            return(node);
        } else if (FCSlot.isMatch(element)) {
            FCSlot node = createFCSlot();
            node.setup(element);
            return(node);
        } else if (FCActionIn.isMatch(element)) {
            FCActionIn node = createFCActionIn();
            node.setup(element);
            return(node);
        } else if (FCActionOut.isMatch(element)) {
            FCActionOut node = createFCActionOut();
            node.setup(element);
            return(node);
        } else if (FCComponentAction.isMatch(element)) {
            FCComponentAction node = createFCComponentAction();
            node.setup(element);
            return(node);
        } else if (FCModelAction.isMatch(element)) {
            FCModelAction node = createFCModelAction();
            node.setup(element);
            return(node);
        } else if (FCServiceAction.isMatch(element)) {
            FCServiceAction node = createFCServiceAction();
            node.setup(element);
            return(node);
        } else if (FCResourceAction.isMatch(element)) {
            FCResourceAction node = createFCResourceAction();
            node.setup(element);
            return(node);
        } else if (FCSystemAction.isMatch(element)) {
            FCSystemAction node = createFCSystemAction();
            node.setup(element);
            return(node);
        } else if (FCPrologue.isMatch(element)) {
            FCPrologue node = createFCPrologue();
            node.setup(element);
            return(node);
        } else if (FCEpilogue.isMatch(element)) {
            FCEpilogue node = createFCEpilogue();
            node.setup(element);
            return(node);
        } else if (FCScenarioAction.isMatch(element)) {
            FCScenarioAction node = createFCScenarioAction();
            node.setup(element);
            return(node);
        } else if (FCMoveSceneAction.isMatch(element)) {
            FCMoveSceneAction node = createFCMoveSceneAction();
            node.setup(element);
            return(node);
        } else if (FCScenario.isMatch(element)) {
            FCScenario node = createFCScenario();
            node.setup(element);
            return(node);
        } else if (FCScene.isMatch(element)) {
            FCScene node = createFCScene();
            node.setup(element);
            return(node);
        } else if (FCDialog.isMatch(element)) {
            FCDialog node = createFCDialog();
            node.setup(element);
            return(node);
        } else if (FCHelp.isMatch(element)) {
            FCHelp node = createFCHelp();
            node.setup(element);
            return(node);
        } else if (FCScriptService.isMatch(element)) {
            FCScriptService node = createFCScriptService();
            node.setup(element);
            return(node);
        } else if (FCComponentService.isMatch(element)) {
            FCComponentService node = createFCComponentService();
            node.setup(element);
            return(node);
        } else if (FCSystemService.isMatch(element)) {
            FCSystemService node = createFCSystemService();
            node.setup(element);
            return(node);
        } else if (FCComponentOption.isMatch(element)) {
            FCComponentOption node = createFCComponentOption();
            node.setup(element);
            return(node);
        } else if (FCSystemOption.isMatch(element)) {
            FCSystemOption node = createFCSystemOption();
            node.setup(element);
            return(node);
        } else if (FCOptionRef.isMatch(element)) {
            FCOptionRef node = createFCOptionRef();
            node.setup(element);
            return(node);
        } else if (FCOptionSet.isMatch(element)) {
            FCOptionSet node = createFCOptionSet();
            node.setup(element);
            return(node);
        } else if (FCAttribute.isMatch(element)) {
            FCAttribute node = createFCAttribute();
            node.setup(element);
            return(node);
        } else if (FCOperationIn.isMatch(element)) {
            FCOperationIn node = createFCOperationIn();
            node.setup(element);
            return(node);
        } else if (FCOperationOut.isMatch(element)) {
            FCOperationOut node = createFCOperationOut();
            node.setup(element);
            return(node);
        } else if (FCOperation.isMatch(element)) {
            FCOperation node = createFCOperation();
            node.setup(element);
            return(node);
        } else if (FCProvider.isMatch(element)) {
            FCProvider node = createFCProvider();
            node.setup(element);
            return(node);
        } else if (FCVariable.isMatch(element)) {
            FCVariable node = createFCVariable();
            node.setup(element);
            return(node);
        } else if (FCExtension.isMatch(element)) {
            FCExtension node = createFCExtension();
            node.setup(element);
            return(node);
        } else if (FCProperty.isMatch(element)) {
            FCProperty node = createFCProperty();
            node.setup(element);
            return(node);
        } else if (FCValue.isMatch(element)) {
            FCValue node = createFCValue();
            node.setup(element);
            return(node);
        } else if (FCConstructor.isMatch(element)) {
            FCConstructor node = createFCConstructor();
            node.setup(element);
            return(node);
        } else if (FCMethod.isMatch(element)) {
            FCMethod node = createFCMethod();
            node.setup(element);
            return(node);
        } else if (FCJndiComponentRef.isMatch(element)) {
            FCJndiComponentRef node = createFCJndiComponentRef();
            node.setup(element);
            return(node);
        } else if (FCConfigComponentRef.isMatch(element)) {
            FCConfigComponentRef node = createFCConfigComponentRef();
            node.setup(element);
            return(node);
        } else if (FCJavaBeansComponentRef.isMatch(element)) {
            FCJavaBeansComponentRef node = createFCJavaBeansComponentRef();
            node.setup(element);
            return(node);
        } else if (FCJndiModelRef.isMatch(element)) {
            FCJndiModelRef node = createFCJndiModelRef();
            node.setup(element);
            return(node);
        } else if (FCConfigModelRef.isMatch(element)) {
            FCConfigModelRef node = createFCConfigModelRef();
            node.setup(element);
            return(node);
        } else if (FCJavaBeansModelRef.isMatch(element)) {
            FCJavaBeansModelRef node = createFCJavaBeansModelRef();
            node.setup(element);
            return(node);
        } else if (FCJndiResourceRef.isMatch(element)) {
            FCJndiResourceRef node = createFCJndiResourceRef();
            node.setup(element);
            return(node);
        } else if (FCConfigResourceRef.isMatch(element)) {
            FCConfigResourceRef node = createFCConfigResourceRef();
            node.setup(element);
            return(node);
        } else if (FCRealization.isMatch(element)) {
            FCRealization node = createFCRealization();
            node.setup(element);
            return(node);
        } else if (FCComponent.isMatch(element)) {
            FCComponent node = createFCComponent();
            node.setup(element);
            return(node);
        } else if (FCModelMapper.isMatch(element)) {
            FCModelMapper node = createFCModelMapper();
            node.setup(element);
            return(node);
        } else if (FCModelRepository.isMatch(element)) {
            FCModelRepository node = createFCModelRepository();
            node.setup(element);
            return(node);
        } else if (FCModel.isMatch(element)) {
            FCModel node = createFCModel();
            node.setup(element);
            return(node);
        } else if (FCJdbcResource.isMatch(element)) {
            FCJdbcResource node = createFCJdbcResource();
            node.setup(element);
            return(node);
        } else if (FCDatasourceResource.isMatch(element)) {
            FCDatasourceResource node = createFCDatasourceResource();
            node.setup(element);
            return(node);
        } else if (FCJndiResource.isMatch(element)) {
            FCJndiResource node = createFCJndiResource();
            node.setup(element);
            return(node);
        } else if (FCFileResource.isMatch(element)) {
            FCFileResource node = createFCFileResource();
            node.setup(element);
            return(node);
        } else if (FCUrlResource.isMatch(element)) {
            FCUrlResource node = createFCUrlResource();
            node.setup(element);
            return(node);
        } else if (FCVariableResource.isMatch(element)) {
            FCVariableResource node = createFCVariableResource();
            node.setup(element);
            return(node);
        } else if (FCResource.isMatch(element)) {
            FCResource node = createFCResource();
            node.setup(element);
            return(node);
        } else if (FCLogger.isMatch(element)) {
            FCLogger node = createFCLogger();
            node.setup(element);
            return(node);
        } else if (FCFrameworkLog.isMatch(element)) {
            FCFrameworkLog node = createFCFrameworkLog();
            node.setup(element);
            return(node);
        } else if (FCConfig.isMatch(element)) {
            FCConfig node = createFCConfig();
            node.setup(element);
            return(node);
        } else if (FCPlainScript.isMatch(element)) {
            FCPlainScript node = createFCPlainScript();
            node.setup(element);
            return(node);
        } else if (FCPlainScriptBody.isMatch(element)) {
            FCPlainScriptBody node = createFCPlainScriptBody();
            node.setup(element);
            return(node);
        } else {
            return (null);
        }
    }

    /**
     * Creates a <code>FCCopyright</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    public FCCopyright createFCCopyright(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCCopyright fCCopyright_ = createFCCopyright();
        fCCopyright_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCCopyright_);
    }

    /**
     * Creates a <code>FCVersion</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    public FCVersion createFCVersion(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVersion fCVersion_ = createFCVersion();
        fCVersion_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVersion_);
    }

    /**
     * Creates a <code>FCUsage</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    public FCUsage createFCUsage(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUsage fCUsage_ = createFCUsage();
        fCUsage_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCUsage_);
    }

    /**
     * Creates a <code>FCSlot</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    public FCSlot createFCSlot(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSlot fCSlot_ = createFCSlot();
        fCSlot_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSlot_);
    }

    /**
     * Creates a <code>FCActionIn</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    public FCActionIn createFCActionIn(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionIn fCActionIn_ = createFCActionIn();
        fCActionIn_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCActionIn_);
    }

    /**
     * Creates a <code>FCActionOut</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    public FCActionOut createFCActionOut(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionOut fCActionOut_ = createFCActionOut();
        fCActionOut_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCActionOut_);
    }

    /**
     * Creates a <code>FCComponentAction</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    public FCComponentAction createFCComponentAction(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentAction fCComponentAction_ = createFCComponentAction();
        fCComponentAction_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentAction_);
    }

    /**
     * Creates a <code>FCModelAction</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    public FCModelAction createFCModelAction(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelAction fCModelAction_ = createFCModelAction();
        fCModelAction_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelAction_);
    }

    /**
     * Creates a <code>FCServiceAction</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    public FCServiceAction createFCServiceAction(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCServiceAction fCServiceAction_ = createFCServiceAction();
        fCServiceAction_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCServiceAction_);
    }

    /**
     * Creates a <code>FCResourceAction</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    public FCResourceAction createFCResourceAction(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResourceAction fCResourceAction_ = createFCResourceAction();
        fCResourceAction_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCResourceAction_);
    }

    /**
     * Creates a <code>FCSystemAction</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    public FCSystemAction createFCSystemAction(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemAction fCSystemAction_ = createFCSystemAction();
        fCSystemAction_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemAction_);
    }

    /**
     * Creates a <code>FCPrologue</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    public FCPrologue createFCPrologue(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPrologue fCPrologue_ = createFCPrologue();
        fCPrologue_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPrologue_);
    }

    /**
     * Creates a <code>FCEpilogue</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    public FCEpilogue createFCEpilogue(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCEpilogue fCEpilogue_ = createFCEpilogue();
        fCEpilogue_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCEpilogue_);
    }

    /**
     * Creates a <code>FCScenarioAction</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    public FCScenarioAction createFCScenarioAction(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenarioAction fCScenarioAction_ = createFCScenarioAction();
        fCScenarioAction_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScenarioAction_);
    }

    /**
     * Creates a <code>FCMoveSceneAction</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    public FCMoveSceneAction createFCMoveSceneAction(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMoveSceneAction fCMoveSceneAction_ = createFCMoveSceneAction();
        fCMoveSceneAction_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCMoveSceneAction_);
    }

    /**
     * Creates a <code>FCScenario</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    public FCScenario createFCScenario(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenario fCScenario_ = createFCScenario();
        fCScenario_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScenario_);
    }

    /**
     * Creates a <code>FCScene</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    public FCScene createFCScene(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScene fCScene_ = createFCScene();
        fCScene_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScene_);
    }

    /**
     * Creates a <code>FCDialog</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    public FCDialog createFCDialog(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDialog fCDialog_ = createFCDialog();
        fCDialog_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCDialog_);
    }

    /**
     * Creates a <code>FCHelp</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    public FCHelp createFCHelp(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCHelp fCHelp_ = createFCHelp();
        fCHelp_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCHelp_);
    }

    /**
     * Creates a <code>FCScriptService</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    public FCScriptService createFCScriptService(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScriptService fCScriptService_ = createFCScriptService();
        fCScriptService_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScriptService_);
    }

    /**
     * Creates a <code>FCComponentService</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    public FCComponentService createFCComponentService(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentService fCComponentService_ = createFCComponentService();
        fCComponentService_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentService_);
    }

    /**
     * Creates a <code>FCSystemService</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    public FCSystemService createFCSystemService(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemService fCSystemService_ = createFCSystemService();
        fCSystemService_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemService_);
    }

    /**
     * Creates a <code>FCComponentOption</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    public FCComponentOption createFCComponentOption(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentOption fCComponentOption_ = createFCComponentOption();
        fCComponentOption_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentOption_);
    }

    /**
     * Creates a <code>FCSystemOption</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    public FCSystemOption createFCSystemOption(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemOption fCSystemOption_ = createFCSystemOption();
        fCSystemOption_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemOption_);
    }

    /**
     * Creates a <code>FCOptionRef</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    public FCOptionRef createFCOptionRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionRef fCOptionRef_ = createFCOptionRef();
        fCOptionRef_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOptionRef_);
    }

    /**
     * Creates a <code>FCOptionSet</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    public FCOptionSet createFCOptionSet(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionSet fCOptionSet_ = createFCOptionSet();
        fCOptionSet_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOptionSet_);
    }

    /**
     * Creates a <code>FCAttribute</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    public FCAttribute createFCAttribute(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCAttribute fCAttribute_ = createFCAttribute();
        fCAttribute_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCAttribute_);
    }

    /**
     * Creates a <code>FCOperationIn</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    public FCOperationIn createFCOperationIn(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationIn fCOperationIn_ = createFCOperationIn();
        fCOperationIn_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperationIn_);
    }

    /**
     * Creates a <code>FCOperationOut</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    public FCOperationOut createFCOperationOut(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationOut fCOperationOut_ = createFCOperationOut();
        fCOperationOut_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperationOut_);
    }

    /**
     * Creates a <code>FCOperation</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    public FCOperation createFCOperation(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperation fCOperation_ = createFCOperation();
        fCOperation_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperation_);
    }

    /**
     * Creates a <code>FCProvider</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    public FCProvider createFCProvider(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProvider fCProvider_ = createFCProvider();
        fCProvider_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCProvider_);
    }

    /**
     * Creates a <code>FCVariable</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    public FCVariable createFCVariable(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariable fCVariable_ = createFCVariable();
        fCVariable_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVariable_);
    }

    /**
     * Creates a <code>FCExtension</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    public FCExtension createFCExtension(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCExtension fCExtension_ = createFCExtension();
        fCExtension_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCExtension_);
    }

    /**
     * Creates a <code>FCProperty</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    public FCProperty createFCProperty(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProperty fCProperty_ = createFCProperty();
        fCProperty_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCProperty_);
    }

    /**
     * Creates a <code>FCValue</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    public FCValue createFCValue(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCValue fCValue_ = createFCValue();
        fCValue_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCValue_);
    }

    /**
     * Creates a <code>FCConstructor</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    public FCConstructor createFCConstructor(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConstructor fCConstructor_ = createFCConstructor();
        fCConstructor_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConstructor_);
    }

    /**
     * Creates a <code>FCMethod</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    public FCMethod createFCMethod(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMethod fCMethod_ = createFCMethod();
        fCMethod_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCMethod_);
    }

    /**
     * Creates a <code>FCJndiComponentRef</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    public FCJndiComponentRef createFCJndiComponentRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiComponentRef fCJndiComponentRef_ = createFCJndiComponentRef();
        fCJndiComponentRef_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiComponentRef_);
    }

    /**
     * Creates a <code>FCConfigComponentRef</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    public FCConfigComponentRef createFCConfigComponentRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigComponentRef fCConfigComponentRef_ = createFCConfigComponentRef();
        fCConfigComponentRef_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigComponentRef_);
    }

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    public FCJavaBeansComponentRef createFCJavaBeansComponentRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansComponentRef fCJavaBeansComponentRef_ = createFCJavaBeansComponentRef();
        fCJavaBeansComponentRef_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJavaBeansComponentRef_);
    }

    /**
     * Creates a <code>FCJndiModelRef</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    public FCJndiModelRef createFCJndiModelRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiModelRef fCJndiModelRef_ = createFCJndiModelRef();
        fCJndiModelRef_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiModelRef_);
    }

    /**
     * Creates a <code>FCConfigModelRef</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    public FCConfigModelRef createFCConfigModelRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigModelRef fCConfigModelRef_ = createFCConfigModelRef();
        fCConfigModelRef_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigModelRef_);
    }

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    public FCJavaBeansModelRef createFCJavaBeansModelRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansModelRef fCJavaBeansModelRef_ = createFCJavaBeansModelRef();
        fCJavaBeansModelRef_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJavaBeansModelRef_);
    }

    /**
     * Creates a <code>FCJndiResourceRef</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    public FCJndiResourceRef createFCJndiResourceRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResourceRef fCJndiResourceRef_ = createFCJndiResourceRef();
        fCJndiResourceRef_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiResourceRef_);
    }

    /**
     * Creates a <code>FCConfigResourceRef</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    public FCConfigResourceRef createFCConfigResourceRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigResourceRef fCConfigResourceRef_ = createFCConfigResourceRef();
        fCConfigResourceRef_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigResourceRef_);
    }

    /**
     * Creates a <code>FCRealization</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    public FCRealization createFCRealization(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCRealization fCRealization_ = createFCRealization();
        fCRealization_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCRealization_);
    }

    /**
     * Creates a <code>FCComponent</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    public FCComponent createFCComponent(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponent fCComponent_ = createFCComponent();
        fCComponent_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponent_);
    }

    /**
     * Creates a <code>FCModelMapper</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    public FCModelMapper createFCModelMapper(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelMapper fCModelMapper_ = createFCModelMapper();
        fCModelMapper_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelMapper_);
    }

    /**
     * Creates a <code>FCModelRepository</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    public FCModelRepository createFCModelRepository(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelRepository fCModelRepository_ = createFCModelRepository();
        fCModelRepository_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelRepository_);
    }

    /**
     * Creates a <code>FCModel</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    public FCModel createFCModel(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModel fCModel_ = createFCModel();
        fCModel_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModel_);
    }

    /**
     * Creates a <code>FCJdbcResource</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    public FCJdbcResource createFCJdbcResource(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJdbcResource fCJdbcResource_ = createFCJdbcResource();
        fCJdbcResource_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJdbcResource_);
    }

    /**
     * Creates a <code>FCDatasourceResource</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    public FCDatasourceResource createFCDatasourceResource(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDatasourceResource fCDatasourceResource_ = createFCDatasourceResource();
        fCDatasourceResource_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCDatasourceResource_);
    }

    /**
     * Creates a <code>FCJndiResource</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    public FCJndiResource createFCJndiResource(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResource fCJndiResource_ = createFCJndiResource();
        fCJndiResource_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiResource_);
    }

    /**
     * Creates a <code>FCFileResource</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    public FCFileResource createFCFileResource(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFileResource fCFileResource_ = createFCFileResource();
        fCFileResource_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCFileResource_);
    }

    /**
     * Creates a <code>FCUrlResource</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    public FCUrlResource createFCUrlResource(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUrlResource fCUrlResource_ = createFCUrlResource();
        fCUrlResource_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCUrlResource_);
    }

    /**
     * Creates a <code>FCVariableResource</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    public FCVariableResource createFCVariableResource(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariableResource fCVariableResource_ = createFCVariableResource();
        fCVariableResource_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVariableResource_);
    }

    /**
     * Creates a <code>FCResource</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    public FCResource createFCResource(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResource fCResource_ = createFCResource();
        fCResource_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCResource_);
    }

    /**
     * Creates a <code>FCLogger</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    public FCLogger createFCLogger(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCLogger fCLogger_ = createFCLogger();
        fCLogger_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCLogger_);
    }

    /**
     * Creates a <code>FCFrameworkLog</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    public FCFrameworkLog createFCFrameworkLog(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFrameworkLog fCFrameworkLog_ = createFCFrameworkLog();
        fCFrameworkLog_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCFrameworkLog_);
    }

    /**
     * Creates a <code>FCConfig</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    public FCConfig createFCConfig(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfig fCConfig_ = createFCConfig();
        fCConfig_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfig_);
    }

    /**
     * Creates a <code>FCPlainScript</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    public FCPlainScript createFCPlainScript(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScript fCPlainScript_ = createFCPlainScript();
        fCPlainScript_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPlainScript_);
    }

    /**
     * Creates a <code>FCPlainScriptBody</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    public FCPlainScriptBody createFCPlainScriptBody(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScriptBody fCPlainScriptBody_ = createFCPlainScriptBody();
        fCPlainScriptBody_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPlainScriptBody_);
    }

    /**
     * Creates a <code>FCCopyright</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    public FCCopyright createFCCopyright(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCCopyright fCCopyright_ = createFCCopyright();
        fCCopyright_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCCopyright_);
    }

    /**
     * Creates a <code>FCVersion</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    public FCVersion createFCVersion(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVersion fCVersion_ = createFCVersion();
        fCVersion_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVersion_);
    }

    /**
     * Creates a <code>FCUsage</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    public FCUsage createFCUsage(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUsage fCUsage_ = createFCUsage();
        fCUsage_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCUsage_);
    }

    /**
     * Creates a <code>FCSlot</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    public FCSlot createFCSlot(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSlot fCSlot_ = createFCSlot();
        fCSlot_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSlot_);
    }

    /**
     * Creates a <code>FCActionIn</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    public FCActionIn createFCActionIn(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionIn fCActionIn_ = createFCActionIn();
        fCActionIn_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCActionIn_);
    }

    /**
     * Creates a <code>FCActionOut</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    public FCActionOut createFCActionOut(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionOut fCActionOut_ = createFCActionOut();
        fCActionOut_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCActionOut_);
    }

    /**
     * Creates a <code>FCComponentAction</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    public FCComponentAction createFCComponentAction(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentAction fCComponentAction_ = createFCComponentAction();
        fCComponentAction_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentAction_);
    }

    /**
     * Creates a <code>FCModelAction</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    public FCModelAction createFCModelAction(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelAction fCModelAction_ = createFCModelAction();
        fCModelAction_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelAction_);
    }

    /**
     * Creates a <code>FCServiceAction</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    public FCServiceAction createFCServiceAction(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCServiceAction fCServiceAction_ = createFCServiceAction();
        fCServiceAction_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCServiceAction_);
    }

    /**
     * Creates a <code>FCResourceAction</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    public FCResourceAction createFCResourceAction(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResourceAction fCResourceAction_ = createFCResourceAction();
        fCResourceAction_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCResourceAction_);
    }

    /**
     * Creates a <code>FCSystemAction</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    public FCSystemAction createFCSystemAction(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemAction fCSystemAction_ = createFCSystemAction();
        fCSystemAction_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemAction_);
    }

    /**
     * Creates a <code>FCPrologue</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    public FCPrologue createFCPrologue(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPrologue fCPrologue_ = createFCPrologue();
        fCPrologue_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPrologue_);
    }

    /**
     * Creates a <code>FCEpilogue</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    public FCEpilogue createFCEpilogue(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCEpilogue fCEpilogue_ = createFCEpilogue();
        fCEpilogue_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCEpilogue_);
    }

    /**
     * Creates a <code>FCScenarioAction</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    public FCScenarioAction createFCScenarioAction(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenarioAction fCScenarioAction_ = createFCScenarioAction();
        fCScenarioAction_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScenarioAction_);
    }

    /**
     * Creates a <code>FCMoveSceneAction</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    public FCMoveSceneAction createFCMoveSceneAction(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMoveSceneAction fCMoveSceneAction_ = createFCMoveSceneAction();
        fCMoveSceneAction_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCMoveSceneAction_);
    }

    /**
     * Creates a <code>FCScenario</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    public FCScenario createFCScenario(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenario fCScenario_ = createFCScenario();
        fCScenario_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScenario_);
    }

    /**
     * Creates a <code>FCScene</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    public FCScene createFCScene(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScene fCScene_ = createFCScene();
        fCScene_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScene_);
    }

    /**
     * Creates a <code>FCDialog</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    public FCDialog createFCDialog(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDialog fCDialog_ = createFCDialog();
        fCDialog_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCDialog_);
    }

    /**
     * Creates a <code>FCHelp</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    public FCHelp createFCHelp(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCHelp fCHelp_ = createFCHelp();
        fCHelp_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCHelp_);
    }

    /**
     * Creates a <code>FCScriptService</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    public FCScriptService createFCScriptService(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScriptService fCScriptService_ = createFCScriptService();
        fCScriptService_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScriptService_);
    }

    /**
     * Creates a <code>FCComponentService</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    public FCComponentService createFCComponentService(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentService fCComponentService_ = createFCComponentService();
        fCComponentService_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentService_);
    }

    /**
     * Creates a <code>FCSystemService</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    public FCSystemService createFCSystemService(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemService fCSystemService_ = createFCSystemService();
        fCSystemService_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemService_);
    }

    /**
     * Creates a <code>FCComponentOption</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    public FCComponentOption createFCComponentOption(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentOption fCComponentOption_ = createFCComponentOption();
        fCComponentOption_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentOption_);
    }

    /**
     * Creates a <code>FCSystemOption</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    public FCSystemOption createFCSystemOption(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemOption fCSystemOption_ = createFCSystemOption();
        fCSystemOption_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemOption_);
    }

    /**
     * Creates a <code>FCOptionRef</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    public FCOptionRef createFCOptionRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionRef fCOptionRef_ = createFCOptionRef();
        fCOptionRef_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOptionRef_);
    }

    /**
     * Creates a <code>FCOptionSet</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    public FCOptionSet createFCOptionSet(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionSet fCOptionSet_ = createFCOptionSet();
        fCOptionSet_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOptionSet_);
    }

    /**
     * Creates a <code>FCAttribute</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    public FCAttribute createFCAttribute(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCAttribute fCAttribute_ = createFCAttribute();
        fCAttribute_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCAttribute_);
    }

    /**
     * Creates a <code>FCOperationIn</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    public FCOperationIn createFCOperationIn(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationIn fCOperationIn_ = createFCOperationIn();
        fCOperationIn_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperationIn_);
    }

    /**
     * Creates a <code>FCOperationOut</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    public FCOperationOut createFCOperationOut(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationOut fCOperationOut_ = createFCOperationOut();
        fCOperationOut_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperationOut_);
    }

    /**
     * Creates a <code>FCOperation</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    public FCOperation createFCOperation(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperation fCOperation_ = createFCOperation();
        fCOperation_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperation_);
    }

    /**
     * Creates a <code>FCProvider</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    public FCProvider createFCProvider(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProvider fCProvider_ = createFCProvider();
        fCProvider_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCProvider_);
    }

    /**
     * Creates a <code>FCVariable</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    public FCVariable createFCVariable(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariable fCVariable_ = createFCVariable();
        fCVariable_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVariable_);
    }

    /**
     * Creates a <code>FCExtension</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    public FCExtension createFCExtension(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCExtension fCExtension_ = createFCExtension();
        fCExtension_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCExtension_);
    }

    /**
     * Creates a <code>FCProperty</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    public FCProperty createFCProperty(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProperty fCProperty_ = createFCProperty();
        fCProperty_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCProperty_);
    }

    /**
     * Creates a <code>FCValue</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    public FCValue createFCValue(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCValue fCValue_ = createFCValue();
        fCValue_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCValue_);
    }

    /**
     * Creates a <code>FCConstructor</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    public FCConstructor createFCConstructor(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConstructor fCConstructor_ = createFCConstructor();
        fCConstructor_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConstructor_);
    }

    /**
     * Creates a <code>FCMethod</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    public FCMethod createFCMethod(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMethod fCMethod_ = createFCMethod();
        fCMethod_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCMethod_);
    }

    /**
     * Creates a <code>FCJndiComponentRef</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    public FCJndiComponentRef createFCJndiComponentRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiComponentRef fCJndiComponentRef_ = createFCJndiComponentRef();
        fCJndiComponentRef_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiComponentRef_);
    }

    /**
     * Creates a <code>FCConfigComponentRef</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    public FCConfigComponentRef createFCConfigComponentRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigComponentRef fCConfigComponentRef_ = createFCConfigComponentRef();
        fCConfigComponentRef_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigComponentRef_);
    }

    /**
     * Creates a <code>FCJavaBeansComponentRef</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    public FCJavaBeansComponentRef createFCJavaBeansComponentRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansComponentRef fCJavaBeansComponentRef_ = createFCJavaBeansComponentRef();
        fCJavaBeansComponentRef_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJavaBeansComponentRef_);
    }

    /**
     * Creates a <code>FCJndiModelRef</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    public FCJndiModelRef createFCJndiModelRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiModelRef fCJndiModelRef_ = createFCJndiModelRef();
        fCJndiModelRef_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiModelRef_);
    }

    /**
     * Creates a <code>FCConfigModelRef</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    public FCConfigModelRef createFCConfigModelRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigModelRef fCConfigModelRef_ = createFCConfigModelRef();
        fCConfigModelRef_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigModelRef_);
    }

    /**
     * Creates a <code>FCJavaBeansModelRef</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    public FCJavaBeansModelRef createFCJavaBeansModelRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansModelRef fCJavaBeansModelRef_ = createFCJavaBeansModelRef();
        fCJavaBeansModelRef_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJavaBeansModelRef_);
    }

    /**
     * Creates a <code>FCJndiResourceRef</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    public FCJndiResourceRef createFCJndiResourceRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResourceRef fCJndiResourceRef_ = createFCJndiResourceRef();
        fCJndiResourceRef_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiResourceRef_);
    }

    /**
     * Creates a <code>FCConfigResourceRef</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    public FCConfigResourceRef createFCConfigResourceRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigResourceRef fCConfigResourceRef_ = createFCConfigResourceRef();
        fCConfigResourceRef_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigResourceRef_);
    }

    /**
     * Creates a <code>FCRealization</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    public FCRealization createFCRealization(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCRealization fCRealization_ = createFCRealization();
        fCRealization_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCRealization_);
    }

    /**
     * Creates a <code>FCComponent</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    public FCComponent createFCComponent(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponent fCComponent_ = createFCComponent();
        fCComponent_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponent_);
    }

    /**
     * Creates a <code>FCModelMapper</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    public FCModelMapper createFCModelMapper(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelMapper fCModelMapper_ = createFCModelMapper();
        fCModelMapper_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelMapper_);
    }

    /**
     * Creates a <code>FCModelRepository</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    public FCModelRepository createFCModelRepository(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelRepository fCModelRepository_ = createFCModelRepository();
        fCModelRepository_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelRepository_);
    }

    /**
     * Creates a <code>FCModel</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    public FCModel createFCModel(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModel fCModel_ = createFCModel();
        fCModel_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModel_);
    }

    /**
     * Creates a <code>FCJdbcResource</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    public FCJdbcResource createFCJdbcResource(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJdbcResource fCJdbcResource_ = createFCJdbcResource();
        fCJdbcResource_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJdbcResource_);
    }

    /**
     * Creates a <code>FCDatasourceResource</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    public FCDatasourceResource createFCDatasourceResource(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDatasourceResource fCDatasourceResource_ = createFCDatasourceResource();
        fCDatasourceResource_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCDatasourceResource_);
    }

    /**
     * Creates a <code>FCJndiResource</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    public FCJndiResource createFCJndiResource(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResource fCJndiResource_ = createFCJndiResource();
        fCJndiResource_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiResource_);
    }

    /**
     * Creates a <code>FCFileResource</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    public FCFileResource createFCFileResource(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFileResource fCFileResource_ = createFCFileResource();
        fCFileResource_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCFileResource_);
    }

    /**
     * Creates a <code>FCUrlResource</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    public FCUrlResource createFCUrlResource(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUrlResource fCUrlResource_ = createFCUrlResource();
        fCUrlResource_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCUrlResource_);
    }

    /**
     * Creates a <code>FCVariableResource</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    public FCVariableResource createFCVariableResource(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariableResource fCVariableResource_ = createFCVariableResource();
        fCVariableResource_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVariableResource_);
    }

    /**
     * Creates a <code>FCResource</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    public FCResource createFCResource(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResource fCResource_ = createFCResource();
        fCResource_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCResource_);
    }

    /**
     * Creates a <code>FCLogger</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    public FCLogger createFCLogger(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCLogger fCLogger_ = createFCLogger();
        fCLogger_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCLogger_);
    }

    /**
     * Creates a <code>FCFrameworkLog</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    public FCFrameworkLog createFCFrameworkLog(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFrameworkLog fCFrameworkLog_ = createFCFrameworkLog();
        fCFrameworkLog_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCFrameworkLog_);
    }

    /**
     * Creates a <code>FCConfig</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    public FCConfig createFCConfig(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfig fCConfig_ = createFCConfig();
        fCConfig_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfig_);
    }

    /**
     * Creates a <code>FCPlainScript</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    public FCPlainScript createFCPlainScript(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScript fCPlainScript_ = createFCPlainScript();
        fCPlainScript_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPlainScript_);
    }

    /**
     * Creates a <code>FCPlainScriptBody</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    public FCPlainScriptBody createFCPlainScriptBody(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScriptBody fCPlainScriptBody_ = createFCPlainScriptBody();
        fCPlainScriptBody_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPlainScriptBody_);
    }

    /**
     * Creates a <code>FCCopyright</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    public FCCopyright createFCCopyright(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCCopyright fCCopyright_ = createFCCopyright();
        fCCopyright_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCCopyright_);
    }

    /**
     * Creates a <code>FCVersion</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    public FCVersion createFCVersion(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVersion fCVersion_ = createFCVersion();
        fCVersion_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVersion_);
    }

    /**
     * Creates a <code>FCUsage</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    public FCUsage createFCUsage(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUsage fCUsage_ = createFCUsage();
        fCUsage_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCUsage_);
    }

    /**
     * Creates a <code>FCSlot</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    public FCSlot createFCSlot(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSlot fCSlot_ = createFCSlot();
        fCSlot_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSlot_);
    }

    /**
     * Creates a <code>FCActionIn</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    public FCActionIn createFCActionIn(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionIn fCActionIn_ = createFCActionIn();
        fCActionIn_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCActionIn_);
    }

    /**
     * Creates a <code>FCActionOut</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    public FCActionOut createFCActionOut(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionOut fCActionOut_ = createFCActionOut();
        fCActionOut_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCActionOut_);
    }

    /**
     * Creates a <code>FCComponentAction</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    public FCComponentAction createFCComponentAction(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentAction fCComponentAction_ = createFCComponentAction();
        fCComponentAction_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentAction_);
    }

    /**
     * Creates a <code>FCModelAction</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    public FCModelAction createFCModelAction(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelAction fCModelAction_ = createFCModelAction();
        fCModelAction_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelAction_);
    }

    /**
     * Creates a <code>FCServiceAction</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    public FCServiceAction createFCServiceAction(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCServiceAction fCServiceAction_ = createFCServiceAction();
        fCServiceAction_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCServiceAction_);
    }

    /**
     * Creates a <code>FCResourceAction</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    public FCResourceAction createFCResourceAction(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResourceAction fCResourceAction_ = createFCResourceAction();
        fCResourceAction_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCResourceAction_);
    }

    /**
     * Creates a <code>FCSystemAction</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    public FCSystemAction createFCSystemAction(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemAction fCSystemAction_ = createFCSystemAction();
        fCSystemAction_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemAction_);
    }

    /**
     * Creates a <code>FCPrologue</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    public FCPrologue createFCPrologue(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPrologue fCPrologue_ = createFCPrologue();
        fCPrologue_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPrologue_);
    }

    /**
     * Creates a <code>FCEpilogue</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    public FCEpilogue createFCEpilogue(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCEpilogue fCEpilogue_ = createFCEpilogue();
        fCEpilogue_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCEpilogue_);
    }

    /**
     * Creates a <code>FCScenarioAction</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    public FCScenarioAction createFCScenarioAction(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenarioAction fCScenarioAction_ = createFCScenarioAction();
        fCScenarioAction_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScenarioAction_);
    }

    /**
     * Creates a <code>FCMoveSceneAction</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    public FCMoveSceneAction createFCMoveSceneAction(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMoveSceneAction fCMoveSceneAction_ = createFCMoveSceneAction();
        fCMoveSceneAction_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCMoveSceneAction_);
    }

    /**
     * Creates a <code>FCScenario</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    public FCScenario createFCScenario(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenario fCScenario_ = createFCScenario();
        fCScenario_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScenario_);
    }

    /**
     * Creates a <code>FCScene</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    public FCScene createFCScene(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScene fCScene_ = createFCScene();
        fCScene_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScene_);
    }

    /**
     * Creates a <code>FCDialog</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    public FCDialog createFCDialog(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDialog fCDialog_ = createFCDialog();
        fCDialog_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCDialog_);
    }

    /**
     * Creates a <code>FCHelp</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    public FCHelp createFCHelp(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCHelp fCHelp_ = createFCHelp();
        fCHelp_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCHelp_);
    }

    /**
     * Creates a <code>FCScriptService</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    public FCScriptService createFCScriptService(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScriptService fCScriptService_ = createFCScriptService();
        fCScriptService_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScriptService_);
    }

    /**
     * Creates a <code>FCComponentService</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    public FCComponentService createFCComponentService(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentService fCComponentService_ = createFCComponentService();
        fCComponentService_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentService_);
    }

    /**
     * Creates a <code>FCSystemService</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    public FCSystemService createFCSystemService(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemService fCSystemService_ = createFCSystemService();
        fCSystemService_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemService_);
    }

    /**
     * Creates a <code>FCComponentOption</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    public FCComponentOption createFCComponentOption(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentOption fCComponentOption_ = createFCComponentOption();
        fCComponentOption_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentOption_);
    }

    /**
     * Creates a <code>FCSystemOption</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    public FCSystemOption createFCSystemOption(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemOption fCSystemOption_ = createFCSystemOption();
        fCSystemOption_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemOption_);
    }

    /**
     * Creates a <code>FCOptionRef</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    public FCOptionRef createFCOptionRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionRef fCOptionRef_ = createFCOptionRef();
        fCOptionRef_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOptionRef_);
    }

    /**
     * Creates a <code>FCOptionSet</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    public FCOptionSet createFCOptionSet(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionSet fCOptionSet_ = createFCOptionSet();
        fCOptionSet_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOptionSet_);
    }

    /**
     * Creates a <code>FCAttribute</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    public FCAttribute createFCAttribute(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCAttribute fCAttribute_ = createFCAttribute();
        fCAttribute_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCAttribute_);
    }

    /**
     * Creates a <code>FCOperationIn</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    public FCOperationIn createFCOperationIn(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationIn fCOperationIn_ = createFCOperationIn();
        fCOperationIn_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperationIn_);
    }

    /**
     * Creates a <code>FCOperationOut</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    public FCOperationOut createFCOperationOut(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationOut fCOperationOut_ = createFCOperationOut();
        fCOperationOut_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperationOut_);
    }

    /**
     * Creates a <code>FCOperation</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    public FCOperation createFCOperation(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperation fCOperation_ = createFCOperation();
        fCOperation_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperation_);
    }

    /**
     * Creates a <code>FCProvider</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    public FCProvider createFCProvider(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProvider fCProvider_ = createFCProvider();
        fCProvider_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCProvider_);
    }

    /**
     * Creates a <code>FCVariable</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    public FCVariable createFCVariable(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariable fCVariable_ = createFCVariable();
        fCVariable_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVariable_);
    }

    /**
     * Creates a <code>FCExtension</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    public FCExtension createFCExtension(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCExtension fCExtension_ = createFCExtension();
        fCExtension_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCExtension_);
    }

    /**
     * Creates a <code>FCProperty</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    public FCProperty createFCProperty(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProperty fCProperty_ = createFCProperty();
        fCProperty_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCProperty_);
    }

    /**
     * Creates a <code>FCValue</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    public FCValue createFCValue(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCValue fCValue_ = createFCValue();
        fCValue_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCValue_);
    }

    /**
     * Creates a <code>FCConstructor</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    public FCConstructor createFCConstructor(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConstructor fCConstructor_ = createFCConstructor();
        fCConstructor_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConstructor_);
    }

    /**
     * Creates a <code>FCMethod</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    public FCMethod createFCMethod(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMethod fCMethod_ = createFCMethod();
        fCMethod_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCMethod_);
    }

    /**
     * Creates a <code>FCJndiComponentRef</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    public FCJndiComponentRef createFCJndiComponentRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiComponentRef fCJndiComponentRef_ = createFCJndiComponentRef();
        fCJndiComponentRef_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiComponentRef_);
    }

    /**
     * Creates a <code>FCConfigComponentRef</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    public FCConfigComponentRef createFCConfigComponentRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigComponentRef fCConfigComponentRef_ = createFCConfigComponentRef();
        fCConfigComponentRef_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigComponentRef_);
    }

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    public FCJavaBeansComponentRef createFCJavaBeansComponentRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansComponentRef fCJavaBeansComponentRef_ = createFCJavaBeansComponentRef();
        fCJavaBeansComponentRef_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJavaBeansComponentRef_);
    }

    /**
     * Creates a <code>FCJndiModelRef</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    public FCJndiModelRef createFCJndiModelRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiModelRef fCJndiModelRef_ = createFCJndiModelRef();
        fCJndiModelRef_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiModelRef_);
    }

    /**
     * Creates a <code>FCConfigModelRef</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    public FCConfigModelRef createFCConfigModelRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigModelRef fCConfigModelRef_ = createFCConfigModelRef();
        fCConfigModelRef_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigModelRef_);
    }

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    public FCJavaBeansModelRef createFCJavaBeansModelRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansModelRef fCJavaBeansModelRef_ = createFCJavaBeansModelRef();
        fCJavaBeansModelRef_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJavaBeansModelRef_);
    }

    /**
     * Creates a <code>FCJndiResourceRef</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    public FCJndiResourceRef createFCJndiResourceRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResourceRef fCJndiResourceRef_ = createFCJndiResourceRef();
        fCJndiResourceRef_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiResourceRef_);
    }

    /**
     * Creates a <code>FCConfigResourceRef</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    public FCConfigResourceRef createFCConfigResourceRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigResourceRef fCConfigResourceRef_ = createFCConfigResourceRef();
        fCConfigResourceRef_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigResourceRef_);
    }

    /**
     * Creates a <code>FCRealization</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    public FCRealization createFCRealization(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCRealization fCRealization_ = createFCRealization();
        fCRealization_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCRealization_);
    }

    /**
     * Creates a <code>FCComponent</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    public FCComponent createFCComponent(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponent fCComponent_ = createFCComponent();
        fCComponent_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponent_);
    }

    /**
     * Creates a <code>FCModelMapper</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    public FCModelMapper createFCModelMapper(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelMapper fCModelMapper_ = createFCModelMapper();
        fCModelMapper_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelMapper_);
    }

    /**
     * Creates a <code>FCModelRepository</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    public FCModelRepository createFCModelRepository(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelRepository fCModelRepository_ = createFCModelRepository();
        fCModelRepository_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelRepository_);
    }

    /**
     * Creates a <code>FCModel</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    public FCModel createFCModel(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModel fCModel_ = createFCModel();
        fCModel_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModel_);
    }

    /**
     * Creates a <code>FCJdbcResource</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    public FCJdbcResource createFCJdbcResource(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJdbcResource fCJdbcResource_ = createFCJdbcResource();
        fCJdbcResource_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJdbcResource_);
    }

    /**
     * Creates a <code>FCDatasourceResource</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    public FCDatasourceResource createFCDatasourceResource(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDatasourceResource fCDatasourceResource_ = createFCDatasourceResource();
        fCDatasourceResource_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCDatasourceResource_);
    }

    /**
     * Creates a <code>FCJndiResource</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    public FCJndiResource createFCJndiResource(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResource fCJndiResource_ = createFCJndiResource();
        fCJndiResource_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiResource_);
    }

    /**
     * Creates a <code>FCFileResource</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    public FCFileResource createFCFileResource(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFileResource fCFileResource_ = createFCFileResource();
        fCFileResource_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCFileResource_);
    }

    /**
     * Creates a <code>FCUrlResource</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    public FCUrlResource createFCUrlResource(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUrlResource fCUrlResource_ = createFCUrlResource();
        fCUrlResource_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCUrlResource_);
    }

    /**
     * Creates a <code>FCVariableResource</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    public FCVariableResource createFCVariableResource(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariableResource fCVariableResource_ = createFCVariableResource();
        fCVariableResource_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVariableResource_);
    }

    /**
     * Creates a <code>FCResource</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    public FCResource createFCResource(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResource fCResource_ = createFCResource();
        fCResource_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCResource_);
    }

    /**
     * Creates a <code>FCLogger</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    public FCLogger createFCLogger(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCLogger fCLogger_ = createFCLogger();
        fCLogger_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCLogger_);
    }

    /**
     * Creates a <code>FCFrameworkLog</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    public FCFrameworkLog createFCFrameworkLog(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFrameworkLog fCFrameworkLog_ = createFCFrameworkLog();
        fCFrameworkLog_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCFrameworkLog_);
    }

    /**
     * Creates a <code>FCConfig</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    public FCConfig createFCConfig(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfig fCConfig_ = createFCConfig();
        fCConfig_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfig_);
    }

    /**
     * Creates a <code>FCPlainScript</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    public FCPlainScript createFCPlainScript(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScript fCPlainScript_ = createFCPlainScript();
        fCPlainScript_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPlainScript_);
    }

    /**
     * Creates a <code>FCPlainScriptBody</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    public FCPlainScriptBody createFCPlainScriptBody(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScriptBody fCPlainScriptBody_ = createFCPlainScriptBody();
        fCPlainScriptBody_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPlainScriptBody_);
    }

    /**
     * Creates a <code>FCCopyright</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    public FCCopyright createFCCopyright(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCCopyright fCCopyright_ = createFCCopyright();
        fCCopyright_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCCopyright_);
    }

    /**
     * Creates a <code>FCVersion</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    public FCVersion createFCVersion(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVersion fCVersion_ = createFCVersion();
        fCVersion_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVersion_);
    }

    /**
     * Creates a <code>FCUsage</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    public FCUsage createFCUsage(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUsage fCUsage_ = createFCUsage();
        fCUsage_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCUsage_);
    }

    /**
     * Creates a <code>FCSlot</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    public FCSlot createFCSlot(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSlot fCSlot_ = createFCSlot();
        fCSlot_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSlot_);
    }

    /**
     * Creates a <code>FCActionIn</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    public FCActionIn createFCActionIn(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionIn fCActionIn_ = createFCActionIn();
        fCActionIn_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCActionIn_);
    }

    /**
     * Creates a <code>FCActionOut</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    public FCActionOut createFCActionOut(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionOut fCActionOut_ = createFCActionOut();
        fCActionOut_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCActionOut_);
    }

    /**
     * Creates a <code>FCComponentAction</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    public FCComponentAction createFCComponentAction(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentAction fCComponentAction_ = createFCComponentAction();
        fCComponentAction_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentAction_);
    }

    /**
     * Creates a <code>FCModelAction</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    public FCModelAction createFCModelAction(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelAction fCModelAction_ = createFCModelAction();
        fCModelAction_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelAction_);
    }

    /**
     * Creates a <code>FCServiceAction</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    public FCServiceAction createFCServiceAction(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCServiceAction fCServiceAction_ = createFCServiceAction();
        fCServiceAction_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCServiceAction_);
    }

    /**
     * Creates a <code>FCResourceAction</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    public FCResourceAction createFCResourceAction(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResourceAction fCResourceAction_ = createFCResourceAction();
        fCResourceAction_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCResourceAction_);
    }

    /**
     * Creates a <code>FCSystemAction</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    public FCSystemAction createFCSystemAction(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemAction fCSystemAction_ = createFCSystemAction();
        fCSystemAction_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemAction_);
    }

    /**
     * Creates a <code>FCPrologue</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    public FCPrologue createFCPrologue(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPrologue fCPrologue_ = createFCPrologue();
        fCPrologue_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPrologue_);
    }

    /**
     * Creates a <code>FCEpilogue</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    public FCEpilogue createFCEpilogue(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCEpilogue fCEpilogue_ = createFCEpilogue();
        fCEpilogue_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCEpilogue_);
    }

    /**
     * Creates a <code>FCScenarioAction</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    public FCScenarioAction createFCScenarioAction(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenarioAction fCScenarioAction_ = createFCScenarioAction();
        fCScenarioAction_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScenarioAction_);
    }

    /**
     * Creates a <code>FCMoveSceneAction</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    public FCMoveSceneAction createFCMoveSceneAction(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMoveSceneAction fCMoveSceneAction_ = createFCMoveSceneAction();
        fCMoveSceneAction_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCMoveSceneAction_);
    }

    /**
     * Creates a <code>FCScenario</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    public FCScenario createFCScenario(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenario fCScenario_ = createFCScenario();
        fCScenario_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScenario_);
    }

    /**
     * Creates a <code>FCScene</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    public FCScene createFCScene(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScene fCScene_ = createFCScene();
        fCScene_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScene_);
    }

    /**
     * Creates a <code>FCDialog</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    public FCDialog createFCDialog(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDialog fCDialog_ = createFCDialog();
        fCDialog_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCDialog_);
    }

    /**
     * Creates a <code>FCHelp</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    public FCHelp createFCHelp(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCHelp fCHelp_ = createFCHelp();
        fCHelp_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCHelp_);
    }

    /**
     * Creates a <code>FCScriptService</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    public FCScriptService createFCScriptService(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScriptService fCScriptService_ = createFCScriptService();
        fCScriptService_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScriptService_);
    }

    /**
     * Creates a <code>FCComponentService</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    public FCComponentService createFCComponentService(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentService fCComponentService_ = createFCComponentService();
        fCComponentService_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentService_);
    }

    /**
     * Creates a <code>FCSystemService</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    public FCSystemService createFCSystemService(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemService fCSystemService_ = createFCSystemService();
        fCSystemService_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemService_);
    }

    /**
     * Creates a <code>FCComponentOption</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    public FCComponentOption createFCComponentOption(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentOption fCComponentOption_ = createFCComponentOption();
        fCComponentOption_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentOption_);
    }

    /**
     * Creates a <code>FCSystemOption</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    public FCSystemOption createFCSystemOption(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemOption fCSystemOption_ = createFCSystemOption();
        fCSystemOption_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemOption_);
    }

    /**
     * Creates a <code>FCOptionRef</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    public FCOptionRef createFCOptionRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionRef fCOptionRef_ = createFCOptionRef();
        fCOptionRef_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOptionRef_);
    }

    /**
     * Creates a <code>FCOptionSet</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    public FCOptionSet createFCOptionSet(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionSet fCOptionSet_ = createFCOptionSet();
        fCOptionSet_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOptionSet_);
    }

    /**
     * Creates a <code>FCAttribute</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    public FCAttribute createFCAttribute(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCAttribute fCAttribute_ = createFCAttribute();
        fCAttribute_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCAttribute_);
    }

    /**
     * Creates a <code>FCOperationIn</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    public FCOperationIn createFCOperationIn(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationIn fCOperationIn_ = createFCOperationIn();
        fCOperationIn_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperationIn_);
    }

    /**
     * Creates a <code>FCOperationOut</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    public FCOperationOut createFCOperationOut(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationOut fCOperationOut_ = createFCOperationOut();
        fCOperationOut_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperationOut_);
    }

    /**
     * Creates a <code>FCOperation</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    public FCOperation createFCOperation(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperation fCOperation_ = createFCOperation();
        fCOperation_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperation_);
    }

    /**
     * Creates a <code>FCProvider</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    public FCProvider createFCProvider(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProvider fCProvider_ = createFCProvider();
        fCProvider_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCProvider_);
    }

    /**
     * Creates a <code>FCVariable</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    public FCVariable createFCVariable(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariable fCVariable_ = createFCVariable();
        fCVariable_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVariable_);
    }

    /**
     * Creates a <code>FCExtension</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    public FCExtension createFCExtension(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCExtension fCExtension_ = createFCExtension();
        fCExtension_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCExtension_);
    }

    /**
     * Creates a <code>FCProperty</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    public FCProperty createFCProperty(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProperty fCProperty_ = createFCProperty();
        fCProperty_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCProperty_);
    }

    /**
     * Creates a <code>FCValue</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    public FCValue createFCValue(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCValue fCValue_ = createFCValue();
        fCValue_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCValue_);
    }

    /**
     * Creates a <code>FCConstructor</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    public FCConstructor createFCConstructor(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConstructor fCConstructor_ = createFCConstructor();
        fCConstructor_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConstructor_);
    }

    /**
     * Creates a <code>FCMethod</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    public FCMethod createFCMethod(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMethod fCMethod_ = createFCMethod();
        fCMethod_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCMethod_);
    }

    /**
     * Creates a <code>FCJndiComponentRef</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    public FCJndiComponentRef createFCJndiComponentRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiComponentRef fCJndiComponentRef_ = createFCJndiComponentRef();
        fCJndiComponentRef_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiComponentRef_);
    }

    /**
     * Creates a <code>FCConfigComponentRef</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    public FCConfigComponentRef createFCConfigComponentRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigComponentRef fCConfigComponentRef_ = createFCConfigComponentRef();
        fCConfigComponentRef_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigComponentRef_);
    }

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    public FCJavaBeansComponentRef createFCJavaBeansComponentRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansComponentRef fCJavaBeansComponentRef_ = createFCJavaBeansComponentRef();
        fCJavaBeansComponentRef_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJavaBeansComponentRef_);
    }

    /**
     * Creates a <code>FCJndiModelRef</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    public FCJndiModelRef createFCJndiModelRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiModelRef fCJndiModelRef_ = createFCJndiModelRef();
        fCJndiModelRef_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiModelRef_);
    }

    /**
     * Creates a <code>FCConfigModelRef</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    public FCConfigModelRef createFCConfigModelRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigModelRef fCConfigModelRef_ = createFCConfigModelRef();
        fCConfigModelRef_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigModelRef_);
    }

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    public FCJavaBeansModelRef createFCJavaBeansModelRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansModelRef fCJavaBeansModelRef_ = createFCJavaBeansModelRef();
        fCJavaBeansModelRef_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJavaBeansModelRef_);
    }

    /**
     * Creates a <code>FCJndiResourceRef</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    public FCJndiResourceRef createFCJndiResourceRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResourceRef fCJndiResourceRef_ = createFCJndiResourceRef();
        fCJndiResourceRef_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiResourceRef_);
    }

    /**
     * Creates a <code>FCConfigResourceRef</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    public FCConfigResourceRef createFCConfigResourceRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigResourceRef fCConfigResourceRef_ = createFCConfigResourceRef();
        fCConfigResourceRef_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigResourceRef_);
    }

    /**
     * Creates a <code>FCRealization</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    public FCRealization createFCRealization(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCRealization fCRealization_ = createFCRealization();
        fCRealization_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCRealization_);
    }

    /**
     * Creates a <code>FCComponent</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    public FCComponent createFCComponent(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponent fCComponent_ = createFCComponent();
        fCComponent_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponent_);
    }

    /**
     * Creates a <code>FCModelMapper</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    public FCModelMapper createFCModelMapper(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelMapper fCModelMapper_ = createFCModelMapper();
        fCModelMapper_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelMapper_);
    }

    /**
     * Creates a <code>FCModelRepository</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    public FCModelRepository createFCModelRepository(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelRepository fCModelRepository_ = createFCModelRepository();
        fCModelRepository_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelRepository_);
    }

    /**
     * Creates a <code>FCModel</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    public FCModel createFCModel(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModel fCModel_ = createFCModel();
        fCModel_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModel_);
    }

    /**
     * Creates a <code>FCJdbcResource</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    public FCJdbcResource createFCJdbcResource(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJdbcResource fCJdbcResource_ = createFCJdbcResource();
        fCJdbcResource_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJdbcResource_);
    }

    /**
     * Creates a <code>FCDatasourceResource</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    public FCDatasourceResource createFCDatasourceResource(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDatasourceResource fCDatasourceResource_ = createFCDatasourceResource();
        fCDatasourceResource_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCDatasourceResource_);
    }

    /**
     * Creates a <code>FCJndiResource</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    public FCJndiResource createFCJndiResource(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResource fCJndiResource_ = createFCJndiResource();
        fCJndiResource_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiResource_);
    }

    /**
     * Creates a <code>FCFileResource</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    public FCFileResource createFCFileResource(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFileResource fCFileResource_ = createFCFileResource();
        fCFileResource_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCFileResource_);
    }

    /**
     * Creates a <code>FCUrlResource</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    public FCUrlResource createFCUrlResource(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUrlResource fCUrlResource_ = createFCUrlResource();
        fCUrlResource_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCUrlResource_);
    }

    /**
     * Creates a <code>FCVariableResource</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    public FCVariableResource createFCVariableResource(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariableResource fCVariableResource_ = createFCVariableResource();
        fCVariableResource_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVariableResource_);
    }

    /**
     * Creates a <code>FCResource</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    public FCResource createFCResource(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResource fCResource_ = createFCResource();
        fCResource_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCResource_);
    }

    /**
     * Creates a <code>FCLogger</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    public FCLogger createFCLogger(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCLogger fCLogger_ = createFCLogger();
        fCLogger_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCLogger_);
    }

    /**
     * Creates a <code>FCFrameworkLog</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    public FCFrameworkLog createFCFrameworkLog(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFrameworkLog fCFrameworkLog_ = createFCFrameworkLog();
        fCFrameworkLog_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCFrameworkLog_);
    }

    /**
     * Creates a <code>FCConfig</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    public FCConfig createFCConfig(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfig fCConfig_ = createFCConfig();
        fCConfig_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfig_);
    }

    /**
     * Creates a <code>FCPlainScript</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    public FCPlainScript createFCPlainScript(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScript fCPlainScript_ = createFCPlainScript();
        fCPlainScript_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPlainScript_);
    }

    /**
     * Creates a <code>FCPlainScriptBody</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    public FCPlainScriptBody createFCPlainScriptBody(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScriptBody fCPlainScriptBody_ = createFCPlainScriptBody();
        fCPlainScriptBody_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPlainScriptBody_);
    }

    /**
     * Creates a <code>FCCopyright</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    public FCCopyright createFCCopyright(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCCopyright fCCopyright_ = createFCCopyright();
        fCCopyright_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCCopyright_);
    }

    /**
     * Creates a <code>FCVersion</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    public FCVersion createFCVersion(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVersion fCVersion_ = createFCVersion();
        fCVersion_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVersion_);
    }

    /**
     * Creates a <code>FCUsage</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    public FCUsage createFCUsage(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUsage fCUsage_ = createFCUsage();
        fCUsage_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCUsage_);
    }

    /**
     * Creates a <code>FCSlot</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    public FCSlot createFCSlot(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSlot fCSlot_ = createFCSlot();
        fCSlot_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSlot_);
    }

    /**
     * Creates a <code>FCActionIn</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    public FCActionIn createFCActionIn(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionIn fCActionIn_ = createFCActionIn();
        fCActionIn_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCActionIn_);
    }

    /**
     * Creates a <code>FCActionOut</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    public FCActionOut createFCActionOut(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionOut fCActionOut_ = createFCActionOut();
        fCActionOut_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCActionOut_);
    }

    /**
     * Creates a <code>FCComponentAction</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    public FCComponentAction createFCComponentAction(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentAction fCComponentAction_ = createFCComponentAction();
        fCComponentAction_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentAction_);
    }

    /**
     * Creates a <code>FCModelAction</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    public FCModelAction createFCModelAction(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelAction fCModelAction_ = createFCModelAction();
        fCModelAction_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelAction_);
    }

    /**
     * Creates a <code>FCServiceAction</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    public FCServiceAction createFCServiceAction(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCServiceAction fCServiceAction_ = createFCServiceAction();
        fCServiceAction_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCServiceAction_);
    }

    /**
     * Creates a <code>FCResourceAction</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    public FCResourceAction createFCResourceAction(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResourceAction fCResourceAction_ = createFCResourceAction();
        fCResourceAction_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCResourceAction_);
    }

    /**
     * Creates a <code>FCSystemAction</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    public FCSystemAction createFCSystemAction(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemAction fCSystemAction_ = createFCSystemAction();
        fCSystemAction_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemAction_);
    }

    /**
     * Creates a <code>FCPrologue</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    public FCPrologue createFCPrologue(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPrologue fCPrologue_ = createFCPrologue();
        fCPrologue_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPrologue_);
    }

    /**
     * Creates a <code>FCEpilogue</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    public FCEpilogue createFCEpilogue(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCEpilogue fCEpilogue_ = createFCEpilogue();
        fCEpilogue_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCEpilogue_);
    }

    /**
     * Creates a <code>FCScenarioAction</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    public FCScenarioAction createFCScenarioAction(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenarioAction fCScenarioAction_ = createFCScenarioAction();
        fCScenarioAction_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScenarioAction_);
    }

    /**
     * Creates a <code>FCMoveSceneAction</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    public FCMoveSceneAction createFCMoveSceneAction(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMoveSceneAction fCMoveSceneAction_ = createFCMoveSceneAction();
        fCMoveSceneAction_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCMoveSceneAction_);
    }

    /**
     * Creates a <code>FCScenario</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    public FCScenario createFCScenario(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenario fCScenario_ = createFCScenario();
        fCScenario_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScenario_);
    }

    /**
     * Creates a <code>FCScene</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    public FCScene createFCScene(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScene fCScene_ = createFCScene();
        fCScene_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScene_);
    }

    /**
     * Creates a <code>FCDialog</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    public FCDialog createFCDialog(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDialog fCDialog_ = createFCDialog();
        fCDialog_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCDialog_);
    }

    /**
     * Creates a <code>FCHelp</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    public FCHelp createFCHelp(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCHelp fCHelp_ = createFCHelp();
        fCHelp_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCHelp_);
    }

    /**
     * Creates a <code>FCScriptService</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    public FCScriptService createFCScriptService(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScriptService fCScriptService_ = createFCScriptService();
        fCScriptService_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScriptService_);
    }

    /**
     * Creates a <code>FCComponentService</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    public FCComponentService createFCComponentService(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentService fCComponentService_ = createFCComponentService();
        fCComponentService_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentService_);
    }

    /**
     * Creates a <code>FCSystemService</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    public FCSystemService createFCSystemService(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemService fCSystemService_ = createFCSystemService();
        fCSystemService_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemService_);
    }

    /**
     * Creates a <code>FCComponentOption</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    public FCComponentOption createFCComponentOption(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentOption fCComponentOption_ = createFCComponentOption();
        fCComponentOption_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentOption_);
    }

    /**
     * Creates a <code>FCSystemOption</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    public FCSystemOption createFCSystemOption(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemOption fCSystemOption_ = createFCSystemOption();
        fCSystemOption_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemOption_);
    }

    /**
     * Creates a <code>FCOptionRef</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    public FCOptionRef createFCOptionRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionRef fCOptionRef_ = createFCOptionRef();
        fCOptionRef_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOptionRef_);
    }

    /**
     * Creates a <code>FCOptionSet</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    public FCOptionSet createFCOptionSet(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionSet fCOptionSet_ = createFCOptionSet();
        fCOptionSet_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOptionSet_);
    }

    /**
     * Creates a <code>FCAttribute</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    public FCAttribute createFCAttribute(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCAttribute fCAttribute_ = createFCAttribute();
        fCAttribute_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCAttribute_);
    }

    /**
     * Creates a <code>FCOperationIn</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    public FCOperationIn createFCOperationIn(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationIn fCOperationIn_ = createFCOperationIn();
        fCOperationIn_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperationIn_);
    }

    /**
     * Creates a <code>FCOperationOut</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    public FCOperationOut createFCOperationOut(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationOut fCOperationOut_ = createFCOperationOut();
        fCOperationOut_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperationOut_);
    }

    /**
     * Creates a <code>FCOperation</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    public FCOperation createFCOperation(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperation fCOperation_ = createFCOperation();
        fCOperation_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperation_);
    }

    /**
     * Creates a <code>FCProvider</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    public FCProvider createFCProvider(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProvider fCProvider_ = createFCProvider();
        fCProvider_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCProvider_);
    }

    /**
     * Creates a <code>FCVariable</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    public FCVariable createFCVariable(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariable fCVariable_ = createFCVariable();
        fCVariable_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVariable_);
    }

    /**
     * Creates a <code>FCExtension</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    public FCExtension createFCExtension(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCExtension fCExtension_ = createFCExtension();
        fCExtension_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCExtension_);
    }

    /**
     * Creates a <code>FCProperty</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    public FCProperty createFCProperty(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProperty fCProperty_ = createFCProperty();
        fCProperty_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCProperty_);
    }

    /**
     * Creates a <code>FCValue</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    public FCValue createFCValue(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCValue fCValue_ = createFCValue();
        fCValue_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCValue_);
    }

    /**
     * Creates a <code>FCConstructor</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    public FCConstructor createFCConstructor(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConstructor fCConstructor_ = createFCConstructor();
        fCConstructor_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConstructor_);
    }

    /**
     * Creates a <code>FCMethod</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    public FCMethod createFCMethod(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMethod fCMethod_ = createFCMethod();
        fCMethod_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCMethod_);
    }

    /**
     * Creates a <code>FCJndiComponentRef</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    public FCJndiComponentRef createFCJndiComponentRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiComponentRef fCJndiComponentRef_ = createFCJndiComponentRef();
        fCJndiComponentRef_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiComponentRef_);
    }

    /**
     * Creates a <code>FCConfigComponentRef</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    public FCConfigComponentRef createFCConfigComponentRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigComponentRef fCConfigComponentRef_ = createFCConfigComponentRef();
        fCConfigComponentRef_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigComponentRef_);
    }

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    public FCJavaBeansComponentRef createFCJavaBeansComponentRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansComponentRef fCJavaBeansComponentRef_ = createFCJavaBeansComponentRef();
        fCJavaBeansComponentRef_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJavaBeansComponentRef_);
    }

    /**
     * Creates a <code>FCJndiModelRef</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    public FCJndiModelRef createFCJndiModelRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiModelRef fCJndiModelRef_ = createFCJndiModelRef();
        fCJndiModelRef_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiModelRef_);
    }

    /**
     * Creates a <code>FCConfigModelRef</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    public FCConfigModelRef createFCConfigModelRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigModelRef fCConfigModelRef_ = createFCConfigModelRef();
        fCConfigModelRef_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigModelRef_);
    }

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    public FCJavaBeansModelRef createFCJavaBeansModelRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansModelRef fCJavaBeansModelRef_ = createFCJavaBeansModelRef();
        fCJavaBeansModelRef_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJavaBeansModelRef_);
    }

    /**
     * Creates a <code>FCJndiResourceRef</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    public FCJndiResourceRef createFCJndiResourceRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResourceRef fCJndiResourceRef_ = createFCJndiResourceRef();
        fCJndiResourceRef_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiResourceRef_);
    }

    /**
     * Creates a <code>FCConfigResourceRef</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    public FCConfigResourceRef createFCConfigResourceRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigResourceRef fCConfigResourceRef_ = createFCConfigResourceRef();
        fCConfigResourceRef_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigResourceRef_);
    }

    /**
     * Creates a <code>FCRealization</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    public FCRealization createFCRealization(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCRealization fCRealization_ = createFCRealization();
        fCRealization_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCRealization_);
    }

    /**
     * Creates a <code>FCComponent</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    public FCComponent createFCComponent(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponent fCComponent_ = createFCComponent();
        fCComponent_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponent_);
    }

    /**
     * Creates a <code>FCModelMapper</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    public FCModelMapper createFCModelMapper(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelMapper fCModelMapper_ = createFCModelMapper();
        fCModelMapper_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelMapper_);
    }

    /**
     * Creates a <code>FCModelRepository</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    public FCModelRepository createFCModelRepository(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelRepository fCModelRepository_ = createFCModelRepository();
        fCModelRepository_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelRepository_);
    }

    /**
     * Creates a <code>FCModel</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    public FCModel createFCModel(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModel fCModel_ = createFCModel();
        fCModel_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModel_);
    }

    /**
     * Creates a <code>FCJdbcResource</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    public FCJdbcResource createFCJdbcResource(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJdbcResource fCJdbcResource_ = createFCJdbcResource();
        fCJdbcResource_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJdbcResource_);
    }

    /**
     * Creates a <code>FCDatasourceResource</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    public FCDatasourceResource createFCDatasourceResource(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDatasourceResource fCDatasourceResource_ = createFCDatasourceResource();
        fCDatasourceResource_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCDatasourceResource_);
    }

    /**
     * Creates a <code>FCJndiResource</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    public FCJndiResource createFCJndiResource(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResource fCJndiResource_ = createFCJndiResource();
        fCJndiResource_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiResource_);
    }

    /**
     * Creates a <code>FCFileResource</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    public FCFileResource createFCFileResource(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFileResource fCFileResource_ = createFCFileResource();
        fCFileResource_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCFileResource_);
    }

    /**
     * Creates a <code>FCUrlResource</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    public FCUrlResource createFCUrlResource(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUrlResource fCUrlResource_ = createFCUrlResource();
        fCUrlResource_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCUrlResource_);
    }

    /**
     * Creates a <code>FCVariableResource</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    public FCVariableResource createFCVariableResource(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariableResource fCVariableResource_ = createFCVariableResource();
        fCVariableResource_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVariableResource_);
    }

    /**
     * Creates a <code>FCResource</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    public FCResource createFCResource(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResource fCResource_ = createFCResource();
        fCResource_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCResource_);
    }

    /**
     * Creates a <code>FCLogger</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    public FCLogger createFCLogger(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCLogger fCLogger_ = createFCLogger();
        fCLogger_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCLogger_);
    }

    /**
     * Creates a <code>FCFrameworkLog</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    public FCFrameworkLog createFCFrameworkLog(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFrameworkLog fCFrameworkLog_ = createFCFrameworkLog();
        fCFrameworkLog_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCFrameworkLog_);
    }

    /**
     * Creates a <code>FCConfig</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    public FCConfig createFCConfig(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfig fCConfig_ = createFCConfig();
        fCConfig_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfig_);
    }

    /**
     * Creates a <code>FCPlainScript</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    public FCPlainScript createFCPlainScript(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScript fCPlainScript_ = createFCPlainScript();
        fCPlainScript_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPlainScript_);
    }

    /**
     * Creates a <code>FCPlainScriptBody</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    public FCPlainScriptBody createFCPlainScriptBody(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScriptBody fCPlainScriptBody_ = createFCPlainScriptBody();
        fCPlainScriptBody_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPlainScriptBody_);
    }

    /**
     * Creates a <code>FCCopyright</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    public FCCopyright createFCCopyright(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCCopyright fCCopyright_ = createFCCopyright();
        fCCopyright_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCCopyright_);
    }

    /**
     * Creates a <code>FCVersion</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    public FCVersion createFCVersion(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVersion fCVersion_ = createFCVersion();
        fCVersion_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVersion_);
    }

    /**
     * Creates a <code>FCUsage</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    public FCUsage createFCUsage(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUsage fCUsage_ = createFCUsage();
        fCUsage_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCUsage_);
    }

    /**
     * Creates a <code>FCSlot</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    public FCSlot createFCSlot(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSlot fCSlot_ = createFCSlot();
        fCSlot_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSlot_);
    }

    /**
     * Creates a <code>FCActionIn</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    public FCActionIn createFCActionIn(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionIn fCActionIn_ = createFCActionIn();
        fCActionIn_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCActionIn_);
    }

    /**
     * Creates a <code>FCActionOut</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    public FCActionOut createFCActionOut(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionOut fCActionOut_ = createFCActionOut();
        fCActionOut_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCActionOut_);
    }

    /**
     * Creates a <code>FCComponentAction</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    public FCComponentAction createFCComponentAction(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentAction fCComponentAction_ = createFCComponentAction();
        fCComponentAction_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentAction_);
    }

    /**
     * Creates a <code>FCModelAction</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    public FCModelAction createFCModelAction(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelAction fCModelAction_ = createFCModelAction();
        fCModelAction_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelAction_);
    }

    /**
     * Creates a <code>FCServiceAction</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    public FCServiceAction createFCServiceAction(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCServiceAction fCServiceAction_ = createFCServiceAction();
        fCServiceAction_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCServiceAction_);
    }

    /**
     * Creates a <code>FCResourceAction</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    public FCResourceAction createFCResourceAction(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResourceAction fCResourceAction_ = createFCResourceAction();
        fCResourceAction_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCResourceAction_);
    }

    /**
     * Creates a <code>FCSystemAction</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    public FCSystemAction createFCSystemAction(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemAction fCSystemAction_ = createFCSystemAction();
        fCSystemAction_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemAction_);
    }

    /**
     * Creates a <code>FCPrologue</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    public FCPrologue createFCPrologue(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPrologue fCPrologue_ = createFCPrologue();
        fCPrologue_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPrologue_);
    }

    /**
     * Creates a <code>FCEpilogue</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    public FCEpilogue createFCEpilogue(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCEpilogue fCEpilogue_ = createFCEpilogue();
        fCEpilogue_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCEpilogue_);
    }

    /**
     * Creates a <code>FCScenarioAction</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    public FCScenarioAction createFCScenarioAction(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenarioAction fCScenarioAction_ = createFCScenarioAction();
        fCScenarioAction_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScenarioAction_);
    }

    /**
     * Creates a <code>FCMoveSceneAction</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    public FCMoveSceneAction createFCMoveSceneAction(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMoveSceneAction fCMoveSceneAction_ = createFCMoveSceneAction();
        fCMoveSceneAction_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCMoveSceneAction_);
    }

    /**
     * Creates a <code>FCScenario</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    public FCScenario createFCScenario(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenario fCScenario_ = createFCScenario();
        fCScenario_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScenario_);
    }

    /**
     * Creates a <code>FCScene</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    public FCScene createFCScene(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScene fCScene_ = createFCScene();
        fCScene_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScene_);
    }

    /**
     * Creates a <code>FCDialog</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    public FCDialog createFCDialog(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDialog fCDialog_ = createFCDialog();
        fCDialog_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCDialog_);
    }

    /**
     * Creates a <code>FCHelp</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    public FCHelp createFCHelp(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCHelp fCHelp_ = createFCHelp();
        fCHelp_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCHelp_);
    }

    /**
     * Creates a <code>FCScriptService</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    public FCScriptService createFCScriptService(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScriptService fCScriptService_ = createFCScriptService();
        fCScriptService_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCScriptService_);
    }

    /**
     * Creates a <code>FCComponentService</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    public FCComponentService createFCComponentService(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentService fCComponentService_ = createFCComponentService();
        fCComponentService_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentService_);
    }

    /**
     * Creates a <code>FCSystemService</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    public FCSystemService createFCSystemService(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemService fCSystemService_ = createFCSystemService();
        fCSystemService_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemService_);
    }

    /**
     * Creates a <code>FCComponentOption</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    public FCComponentOption createFCComponentOption(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentOption fCComponentOption_ = createFCComponentOption();
        fCComponentOption_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponentOption_);
    }

    /**
     * Creates a <code>FCSystemOption</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    public FCSystemOption createFCSystemOption(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemOption fCSystemOption_ = createFCSystemOption();
        fCSystemOption_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCSystemOption_);
    }

    /**
     * Creates a <code>FCOptionRef</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    public FCOptionRef createFCOptionRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionRef fCOptionRef_ = createFCOptionRef();
        fCOptionRef_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOptionRef_);
    }

    /**
     * Creates a <code>FCOptionSet</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    public FCOptionSet createFCOptionSet(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionSet fCOptionSet_ = createFCOptionSet();
        fCOptionSet_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOptionSet_);
    }

    /**
     * Creates a <code>FCAttribute</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    public FCAttribute createFCAttribute(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCAttribute fCAttribute_ = createFCAttribute();
        fCAttribute_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCAttribute_);
    }

    /**
     * Creates a <code>FCOperationIn</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    public FCOperationIn createFCOperationIn(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationIn fCOperationIn_ = createFCOperationIn();
        fCOperationIn_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperationIn_);
    }

    /**
     * Creates a <code>FCOperationOut</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    public FCOperationOut createFCOperationOut(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationOut fCOperationOut_ = createFCOperationOut();
        fCOperationOut_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperationOut_);
    }

    /**
     * Creates a <code>FCOperation</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    public FCOperation createFCOperation(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperation fCOperation_ = createFCOperation();
        fCOperation_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCOperation_);
    }

    /**
     * Creates a <code>FCProvider</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    public FCProvider createFCProvider(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProvider fCProvider_ = createFCProvider();
        fCProvider_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCProvider_);
    }

    /**
     * Creates a <code>FCVariable</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    public FCVariable createFCVariable(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariable fCVariable_ = createFCVariable();
        fCVariable_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVariable_);
    }

    /**
     * Creates a <code>FCExtension</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    public FCExtension createFCExtension(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCExtension fCExtension_ = createFCExtension();
        fCExtension_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCExtension_);
    }

    /**
     * Creates a <code>FCProperty</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    public FCProperty createFCProperty(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProperty fCProperty_ = createFCProperty();
        fCProperty_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCProperty_);
    }

    /**
     * Creates a <code>FCValue</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    public FCValue createFCValue(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCValue fCValue_ = createFCValue();
        fCValue_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCValue_);
    }

    /**
     * Creates a <code>FCConstructor</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    public FCConstructor createFCConstructor(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConstructor fCConstructor_ = createFCConstructor();
        fCConstructor_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConstructor_);
    }

    /**
     * Creates a <code>FCMethod</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    public FCMethod createFCMethod(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMethod fCMethod_ = createFCMethod();
        fCMethod_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCMethod_);
    }

    /**
     * Creates a <code>FCJndiComponentRef</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    public FCJndiComponentRef createFCJndiComponentRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiComponentRef fCJndiComponentRef_ = createFCJndiComponentRef();
        fCJndiComponentRef_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiComponentRef_);
    }

    /**
     * Creates a <code>FCConfigComponentRef</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    public FCConfigComponentRef createFCConfigComponentRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigComponentRef fCConfigComponentRef_ = createFCConfigComponentRef();
        fCConfigComponentRef_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigComponentRef_);
    }

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    public FCJavaBeansComponentRef createFCJavaBeansComponentRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansComponentRef fCJavaBeansComponentRef_ = createFCJavaBeansComponentRef();
        fCJavaBeansComponentRef_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJavaBeansComponentRef_);
    }

    /**
     * Creates a <code>FCJndiModelRef</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    public FCJndiModelRef createFCJndiModelRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiModelRef fCJndiModelRef_ = createFCJndiModelRef();
        fCJndiModelRef_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiModelRef_);
    }

    /**
     * Creates a <code>FCConfigModelRef</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    public FCConfigModelRef createFCConfigModelRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigModelRef fCConfigModelRef_ = createFCConfigModelRef();
        fCConfigModelRef_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigModelRef_);
    }

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    public FCJavaBeansModelRef createFCJavaBeansModelRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansModelRef fCJavaBeansModelRef_ = createFCJavaBeansModelRef();
        fCJavaBeansModelRef_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJavaBeansModelRef_);
    }

    /**
     * Creates a <code>FCJndiResourceRef</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    public FCJndiResourceRef createFCJndiResourceRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResourceRef fCJndiResourceRef_ = createFCJndiResourceRef();
        fCJndiResourceRef_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiResourceRef_);
    }

    /**
     * Creates a <code>FCConfigResourceRef</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    public FCConfigResourceRef createFCConfigResourceRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigResourceRef fCConfigResourceRef_ = createFCConfigResourceRef();
        fCConfigResourceRef_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfigResourceRef_);
    }

    /**
     * Creates a <code>FCRealization</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    public FCRealization createFCRealization(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCRealization fCRealization_ = createFCRealization();
        fCRealization_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCRealization_);
    }

    /**
     * Creates a <code>FCComponent</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    public FCComponent createFCComponent(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponent fCComponent_ = createFCComponent();
        fCComponent_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCComponent_);
    }

    /**
     * Creates a <code>FCModelMapper</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    public FCModelMapper createFCModelMapper(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelMapper fCModelMapper_ = createFCModelMapper();
        fCModelMapper_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelMapper_);
    }

    /**
     * Creates a <code>FCModelRepository</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    public FCModelRepository createFCModelRepository(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelRepository fCModelRepository_ = createFCModelRepository();
        fCModelRepository_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModelRepository_);
    }

    /**
     * Creates a <code>FCModel</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    public FCModel createFCModel(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModel fCModel_ = createFCModel();
        fCModel_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCModel_);
    }

    /**
     * Creates a <code>FCJdbcResource</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    public FCJdbcResource createFCJdbcResource(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJdbcResource fCJdbcResource_ = createFCJdbcResource();
        fCJdbcResource_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJdbcResource_);
    }

    /**
     * Creates a <code>FCDatasourceResource</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    public FCDatasourceResource createFCDatasourceResource(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDatasourceResource fCDatasourceResource_ = createFCDatasourceResource();
        fCDatasourceResource_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCDatasourceResource_);
    }

    /**
     * Creates a <code>FCJndiResource</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    public FCJndiResource createFCJndiResource(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResource fCJndiResource_ = createFCJndiResource();
        fCJndiResource_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCJndiResource_);
    }

    /**
     * Creates a <code>FCFileResource</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    public FCFileResource createFCFileResource(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFileResource fCFileResource_ = createFCFileResource();
        fCFileResource_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCFileResource_);
    }

    /**
     * Creates a <code>FCUrlResource</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    public FCUrlResource createFCUrlResource(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUrlResource fCUrlResource_ = createFCUrlResource();
        fCUrlResource_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCUrlResource_);
    }

    /**
     * Creates a <code>FCVariableResource</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    public FCVariableResource createFCVariableResource(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariableResource fCVariableResource_ = createFCVariableResource();
        fCVariableResource_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCVariableResource_);
    }

    /**
     * Creates a <code>FCResource</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    public FCResource createFCResource(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResource fCResource_ = createFCResource();
        fCResource_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCResource_);
    }

    /**
     * Creates a <code>FCLogger</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    public FCLogger createFCLogger(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCLogger fCLogger_ = createFCLogger();
        fCLogger_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCLogger_);
    }

    /**
     * Creates a <code>FCFrameworkLog</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    public FCFrameworkLog createFCFrameworkLog(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFrameworkLog fCFrameworkLog_ = createFCFrameworkLog();
        fCFrameworkLog_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCFrameworkLog_);
    }

    /**
     * Creates a <code>FCConfig</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    public FCConfig createFCConfig(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfig fCConfig_ = createFCConfig();
        fCConfig_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCConfig_);
    }

    /**
     * Creates a <code>FCPlainScript</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    public FCPlainScript createFCPlainScript(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScript fCPlainScript_ = createFCPlainScript();
        fCPlainScript_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPlainScript_);
    }

    /**
     * Creates a <code>FCPlainScriptBody</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    public FCPlainScriptBody createFCPlainScriptBody(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScriptBody fCPlainScriptBody_ = createFCPlainScriptBody();
        fCPlainScriptBody_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NAMESPACE_AWARE, errorHandler, entityResolver));
        return (fCPlainScriptBody_);
    }

    /**
     * Creates a <code>FCCopyright</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCCopyright
     */
    public FCCopyright createFCCopyright(FCCopyright source) {
        FCCopyright fCCopyright_ = createFCCopyright();
        fCCopyright_.setup(source);
        return (fCCopyright_);
    }

    /**
     * Creates a <code>FCVersion</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCVersion
     */
    public FCVersion createFCVersion(FCVersion source) {
        FCVersion fCVersion_ = createFCVersion();
        fCVersion_.setup(source);
        return (fCVersion_);
    }

    /**
     * Creates a <code>FCUsage</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCUsage
     */
    public FCUsage createFCUsage(FCUsage source) {
        FCUsage fCUsage_ = createFCUsage();
        fCUsage_.setup(source);
        return (fCUsage_);
    }

    /**
     * Creates a <code>FCSlot</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCSlot
     */
    public FCSlot createFCSlot(FCSlot source) {
        FCSlot fCSlot_ = createFCSlot();
        fCSlot_.setup(source);
        return (fCSlot_);
    }

    /**
     * Creates a <code>FCActionIn</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCActionIn
     */
    public FCActionIn createFCActionIn(FCActionIn source) {
        FCActionIn fCActionIn_ = createFCActionIn();
        fCActionIn_.setup(source);
        return (fCActionIn_);
    }

    /**
     * Creates a <code>FCActionOut</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCActionOut
     */
    public FCActionOut createFCActionOut(FCActionOut source) {
        FCActionOut fCActionOut_ = createFCActionOut();
        fCActionOut_.setup(source);
        return (fCActionOut_);
    }

    /**
     * Creates a <code>FCComponentAction</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCComponentAction
     */
    public FCComponentAction createFCComponentAction(FCComponentAction source) {
        FCComponentAction fCComponentAction_ = createFCComponentAction();
        fCComponentAction_.setup(source);
        return (fCComponentAction_);
    }

    /**
     * Creates a <code>FCModelAction</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCModelAction
     */
    public FCModelAction createFCModelAction(FCModelAction source) {
        FCModelAction fCModelAction_ = createFCModelAction();
        fCModelAction_.setup(source);
        return (fCModelAction_);
    }

    /**
     * Creates a <code>FCServiceAction</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCServiceAction
     */
    public FCServiceAction createFCServiceAction(FCServiceAction source) {
        FCServiceAction fCServiceAction_ = createFCServiceAction();
        fCServiceAction_.setup(source);
        return (fCServiceAction_);
    }

    /**
     * Creates a <code>FCResourceAction</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCResourceAction
     */
    public FCResourceAction createFCResourceAction(FCResourceAction source) {
        FCResourceAction fCResourceAction_ = createFCResourceAction();
        fCResourceAction_.setup(source);
        return (fCResourceAction_);
    }

    /**
     * Creates a <code>FCSystemAction</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCSystemAction
     */
    public FCSystemAction createFCSystemAction(FCSystemAction source) {
        FCSystemAction fCSystemAction_ = createFCSystemAction();
        fCSystemAction_.setup(source);
        return (fCSystemAction_);
    }

    /**
     * Creates a <code>FCPrologue</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCPrologue
     */
    public FCPrologue createFCPrologue(FCPrologue source) {
        FCPrologue fCPrologue_ = createFCPrologue();
        fCPrologue_.setup(source);
        return (fCPrologue_);
    }

    /**
     * Creates a <code>FCEpilogue</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCEpilogue
     */
    public FCEpilogue createFCEpilogue(FCEpilogue source) {
        FCEpilogue fCEpilogue_ = createFCEpilogue();
        fCEpilogue_.setup(source);
        return (fCEpilogue_);
    }

    /**
     * Creates a <code>FCScenarioAction</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCScenarioAction
     */
    public FCScenarioAction createFCScenarioAction(FCScenarioAction source) {
        FCScenarioAction fCScenarioAction_ = createFCScenarioAction();
        fCScenarioAction_.setup(source);
        return (fCScenarioAction_);
    }

    /**
     * Creates a <code>FCMoveSceneAction</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCMoveSceneAction
     */
    public FCMoveSceneAction createFCMoveSceneAction(FCMoveSceneAction source) {
        FCMoveSceneAction fCMoveSceneAction_ = createFCMoveSceneAction();
        fCMoveSceneAction_.setup(source);
        return (fCMoveSceneAction_);
    }

    /**
     * Creates a <code>FCScenario</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCScenario
     */
    public FCScenario createFCScenario(FCScenario source) {
        FCScenario fCScenario_ = createFCScenario();
        fCScenario_.setup(source);
        return (fCScenario_);
    }

    /**
     * Creates a <code>FCScene</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCScene
     */
    public FCScene createFCScene(FCScene source) {
        FCScene fCScene_ = createFCScene();
        fCScene_.setup(source);
        return (fCScene_);
    }

    /**
     * Creates a <code>FCDialog</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCDialog
     */
    public FCDialog createFCDialog(FCDialog source) {
        FCDialog fCDialog_ = createFCDialog();
        fCDialog_.setup(source);
        return (fCDialog_);
    }

    /**
     * Creates a <code>FCHelp</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCHelp
     */
    public FCHelp createFCHelp(FCHelp source) {
        FCHelp fCHelp_ = createFCHelp();
        fCHelp_.setup(source);
        return (fCHelp_);
    }

    /**
     * Creates a <code>FCScriptService</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCScriptService
     */
    public FCScriptService createFCScriptService(FCScriptService source) {
        FCScriptService fCScriptService_ = createFCScriptService();
        fCScriptService_.setup(source);
        return (fCScriptService_);
    }

    /**
     * Creates a <code>FCComponentService</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCComponentService
     */
    public FCComponentService createFCComponentService(FCComponentService source) {
        FCComponentService fCComponentService_ = createFCComponentService();
        fCComponentService_.setup(source);
        return (fCComponentService_);
    }

    /**
     * Creates a <code>FCSystemService</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCSystemService
     */
    public FCSystemService createFCSystemService(FCSystemService source) {
        FCSystemService fCSystemService_ = createFCSystemService();
        fCSystemService_.setup(source);
        return (fCSystemService_);
    }

    /**
     * Creates a <code>FCComponentOption</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCComponentOption
     */
    public FCComponentOption createFCComponentOption(FCComponentOption source) {
        FCComponentOption fCComponentOption_ = createFCComponentOption();
        fCComponentOption_.setup(source);
        return (fCComponentOption_);
    }

    /**
     * Creates a <code>FCSystemOption</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCSystemOption
     */
    public FCSystemOption createFCSystemOption(FCSystemOption source) {
        FCSystemOption fCSystemOption_ = createFCSystemOption();
        fCSystemOption_.setup(source);
        return (fCSystemOption_);
    }

    /**
     * Creates a <code>FCOptionRef</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCOptionRef
     */
    public FCOptionRef createFCOptionRef(FCOptionRef source) {
        FCOptionRef fCOptionRef_ = createFCOptionRef();
        fCOptionRef_.setup(source);
        return (fCOptionRef_);
    }

    /**
     * Creates a <code>FCOptionSet</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCOptionSet
     */
    public FCOptionSet createFCOptionSet(FCOptionSet source) {
        FCOptionSet fCOptionSet_ = createFCOptionSet();
        fCOptionSet_.setup(source);
        return (fCOptionSet_);
    }

    /**
     * Creates a <code>FCAttribute</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCAttribute
     */
    public FCAttribute createFCAttribute(FCAttribute source) {
        FCAttribute fCAttribute_ = createFCAttribute();
        fCAttribute_.setup(source);
        return (fCAttribute_);
    }

    /**
     * Creates a <code>FCOperationIn</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCOperationIn
     */
    public FCOperationIn createFCOperationIn(FCOperationIn source) {
        FCOperationIn fCOperationIn_ = createFCOperationIn();
        fCOperationIn_.setup(source);
        return (fCOperationIn_);
    }

    /**
     * Creates a <code>FCOperationOut</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCOperationOut
     */
    public FCOperationOut createFCOperationOut(FCOperationOut source) {
        FCOperationOut fCOperationOut_ = createFCOperationOut();
        fCOperationOut_.setup(source);
        return (fCOperationOut_);
    }

    /**
     * Creates a <code>FCOperation</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCOperation
     */
    public FCOperation createFCOperation(FCOperation source) {
        FCOperation fCOperation_ = createFCOperation();
        fCOperation_.setup(source);
        return (fCOperation_);
    }

    /**
     * Creates a <code>FCProvider</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCProvider
     */
    public FCProvider createFCProvider(FCProvider source) {
        FCProvider fCProvider_ = createFCProvider();
        fCProvider_.setup(source);
        return (fCProvider_);
    }

    /**
     * Creates a <code>FCVariable</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCVariable
     */
    public FCVariable createFCVariable(FCVariable source) {
        FCVariable fCVariable_ = createFCVariable();
        fCVariable_.setup(source);
        return (fCVariable_);
    }

    /**
     * Creates a <code>FCExtension</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCExtension
     */
    public FCExtension createFCExtension(FCExtension source) {
        FCExtension fCExtension_ = createFCExtension();
        fCExtension_.setup(source);
        return (fCExtension_);
    }

    /**
     * Creates a <code>FCProperty</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCProperty
     */
    public FCProperty createFCProperty(FCProperty source) {
        FCProperty fCProperty_ = createFCProperty();
        fCProperty_.setup(source);
        return (fCProperty_);
    }

    /**
     * Creates a <code>FCValue</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCValue
     */
    public FCValue createFCValue(FCValue source) {
        FCValue fCValue_ = createFCValue();
        fCValue_.setup(source);
        return (fCValue_);
    }

    /**
     * Creates a <code>FCConstructor</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCConstructor
     */
    public FCConstructor createFCConstructor(FCConstructor source) {
        FCConstructor fCConstructor_ = createFCConstructor();
        fCConstructor_.setup(source);
        return (fCConstructor_);
    }

    /**
     * Creates a <code>FCMethod</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCMethod
     */
    public FCMethod createFCMethod(FCMethod source) {
        FCMethod fCMethod_ = createFCMethod();
        fCMethod_.setup(source);
        return (fCMethod_);
    }

    /**
     * Creates a <code>FCJndiComponentRef</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCJndiComponentRef
     */
    public FCJndiComponentRef createFCJndiComponentRef(FCJndiComponentRef source) {
        FCJndiComponentRef fCJndiComponentRef_ = createFCJndiComponentRef();
        fCJndiComponentRef_.setup(source);
        return (fCJndiComponentRef_);
    }

    /**
     * Creates a <code>FCConfigComponentRef</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCConfigComponentRef
     */
    public FCConfigComponentRef createFCConfigComponentRef(FCConfigComponentRef source) {
        FCConfigComponentRef fCConfigComponentRef_ = createFCConfigComponentRef();
        fCConfigComponentRef_.setup(source);
        return (fCConfigComponentRef_);
    }

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCJavaBeansComponentRef
     */
    public FCJavaBeansComponentRef createFCJavaBeansComponentRef(FCJavaBeansComponentRef source) {
        FCJavaBeansComponentRef fCJavaBeansComponentRef_ = createFCJavaBeansComponentRef();
        fCJavaBeansComponentRef_.setup(source);
        return (fCJavaBeansComponentRef_);
    }

    /**
     * Creates a <code>FCJndiModelRef</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCJndiModelRef
     */
    public FCJndiModelRef createFCJndiModelRef(FCJndiModelRef source) {
        FCJndiModelRef fCJndiModelRef_ = createFCJndiModelRef();
        fCJndiModelRef_.setup(source);
        return (fCJndiModelRef_);
    }

    /**
     * Creates a <code>FCConfigModelRef</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCConfigModelRef
     */
    public FCConfigModelRef createFCConfigModelRef(FCConfigModelRef source) {
        FCConfigModelRef fCConfigModelRef_ = createFCConfigModelRef();
        fCConfigModelRef_.setup(source);
        return (fCConfigModelRef_);
    }

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCJavaBeansModelRef
     */
    public FCJavaBeansModelRef createFCJavaBeansModelRef(FCJavaBeansModelRef source) {
        FCJavaBeansModelRef fCJavaBeansModelRef_ = createFCJavaBeansModelRef();
        fCJavaBeansModelRef_.setup(source);
        return (fCJavaBeansModelRef_);
    }

    /**
     * Creates a <code>FCJndiResourceRef</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCJndiResourceRef
     */
    public FCJndiResourceRef createFCJndiResourceRef(FCJndiResourceRef source) {
        FCJndiResourceRef fCJndiResourceRef_ = createFCJndiResourceRef();
        fCJndiResourceRef_.setup(source);
        return (fCJndiResourceRef_);
    }

    /**
     * Creates a <code>FCConfigResourceRef</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCConfigResourceRef
     */
    public FCConfigResourceRef createFCConfigResourceRef(FCConfigResourceRef source) {
        FCConfigResourceRef fCConfigResourceRef_ = createFCConfigResourceRef();
        fCConfigResourceRef_.setup(source);
        return (fCConfigResourceRef_);
    }

    /**
     * Creates a <code>FCRealization</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCRealization
     */
    public FCRealization createFCRealization(FCRealization source) {
        FCRealization fCRealization_ = createFCRealization();
        fCRealization_.setup(source);
        return (fCRealization_);
    }

    /**
     * Creates a <code>FCComponent</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCComponent
     */
    public FCComponent createFCComponent(FCComponent source) {
        FCComponent fCComponent_ = createFCComponent();
        fCComponent_.setup(source);
        return (fCComponent_);
    }

    /**
     * Creates a <code>FCModelMapper</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCModelMapper
     */
    public FCModelMapper createFCModelMapper(FCModelMapper source) {
        FCModelMapper fCModelMapper_ = createFCModelMapper();
        fCModelMapper_.setup(source);
        return (fCModelMapper_);
    }

    /**
     * Creates a <code>FCModelRepository</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCModelRepository
     */
    public FCModelRepository createFCModelRepository(FCModelRepository source) {
        FCModelRepository fCModelRepository_ = createFCModelRepository();
        fCModelRepository_.setup(source);
        return (fCModelRepository_);
    }

    /**
     * Creates a <code>FCModel</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCModel
     */
    public FCModel createFCModel(FCModel source) {
        FCModel fCModel_ = createFCModel();
        fCModel_.setup(source);
        return (fCModel_);
    }

    /**
     * Creates a <code>FCJdbcResource</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCJdbcResource
     */
    public FCJdbcResource createFCJdbcResource(FCJdbcResource source) {
        FCJdbcResource fCJdbcResource_ = createFCJdbcResource();
        fCJdbcResource_.setup(source);
        return (fCJdbcResource_);
    }

    /**
     * Creates a <code>FCDatasourceResource</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCDatasourceResource
     */
    public FCDatasourceResource createFCDatasourceResource(FCDatasourceResource source) {
        FCDatasourceResource fCDatasourceResource_ = createFCDatasourceResource();
        fCDatasourceResource_.setup(source);
        return (fCDatasourceResource_);
    }

    /**
     * Creates a <code>FCJndiResource</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCJndiResource
     */
    public FCJndiResource createFCJndiResource(FCJndiResource source) {
        FCJndiResource fCJndiResource_ = createFCJndiResource();
        fCJndiResource_.setup(source);
        return (fCJndiResource_);
    }

    /**
     * Creates a <code>FCFileResource</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCFileResource
     */
    public FCFileResource createFCFileResource(FCFileResource source) {
        FCFileResource fCFileResource_ = createFCFileResource();
        fCFileResource_.setup(source);
        return (fCFileResource_);
    }

    /**
     * Creates a <code>FCUrlResource</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCUrlResource
     */
    public FCUrlResource createFCUrlResource(FCUrlResource source) {
        FCUrlResource fCUrlResource_ = createFCUrlResource();
        fCUrlResource_.setup(source);
        return (fCUrlResource_);
    }

    /**
     * Creates a <code>FCVariableResource</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCVariableResource
     */
    public FCVariableResource createFCVariableResource(FCVariableResource source) {
        FCVariableResource fCVariableResource_ = createFCVariableResource();
        fCVariableResource_.setup(source);
        return (fCVariableResource_);
    }

    /**
     * Creates a <code>FCResource</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCResource
     */
    public FCResource createFCResource(FCResource source) {
        FCResource fCResource_ = createFCResource();
        fCResource_.setup(source);
        return (fCResource_);
    }

    /**
     * Creates a <code>FCLogger</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCLogger
     */
    public FCLogger createFCLogger(FCLogger source) {
        FCLogger fCLogger_ = createFCLogger();
        fCLogger_.setup(source);
        return (fCLogger_);
    }

    /**
     * Creates a <code>FCFrameworkLog</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCFrameworkLog
     */
    public FCFrameworkLog createFCFrameworkLog(FCFrameworkLog source) {
        FCFrameworkLog fCFrameworkLog_ = createFCFrameworkLog();
        fCFrameworkLog_.setup(source);
        return (fCFrameworkLog_);
    }

    /**
     * Creates a <code>FCConfig</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCConfig
     */
    public FCConfig createFCConfig(FCConfig source) {
        FCConfig fCConfig_ = createFCConfig();
        fCConfig_.setup(source);
        return (fCConfig_);
    }

    /**
     * Creates a <code>FCPlainScript</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCPlainScript
     */
    public FCPlainScript createFCPlainScript(FCPlainScript source) {
        FCPlainScript fCPlainScript_ = createFCPlainScript();
        fCPlainScript_.setup(source);
        return (fCPlainScript_);
    }

    /**
     * Creates a <code>FCPlainScriptBody</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCPlainScriptBody
     */
    public FCPlainScriptBody createFCPlainScriptBody(FCPlainScriptBody source) {
        FCPlainScriptBody fCPlainScriptBody_ = createFCPlainScriptBody();
        fCPlainScriptBody_.setup(source);
        return (fCPlainScriptBody_);
    }

    /**
     * Creates a <code>FCCopyright</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    public FCCopyright createFCCopyright(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCCopyright fCCopyright_ = createFCCopyright();
        fCCopyright_.setup(doc);
        return (fCCopyright_);
    }

    /**
     * Creates a <code>FCVersion</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    public FCVersion createFCVersion(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVersion fCVersion_ = createFCVersion();
        fCVersion_.setup(doc);
        return (fCVersion_);
    }

    /**
     * Creates a <code>FCUsage</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    public FCUsage createFCUsage(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUsage fCUsage_ = createFCUsage();
        fCUsage_.setup(doc);
        return (fCUsage_);
    }

    /**
     * Creates a <code>FCSlot</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    public FCSlot createFCSlot(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSlot fCSlot_ = createFCSlot();
        fCSlot_.setup(doc);
        return (fCSlot_);
    }

    /**
     * Creates a <code>FCActionIn</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    public FCActionIn createFCActionIn(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionIn fCActionIn_ = createFCActionIn();
        fCActionIn_.setup(doc);
        return (fCActionIn_);
    }

    /**
     * Creates a <code>FCActionOut</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    public FCActionOut createFCActionOut(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionOut fCActionOut_ = createFCActionOut();
        fCActionOut_.setup(doc);
        return (fCActionOut_);
    }

    /**
     * Creates a <code>FCComponentAction</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    public FCComponentAction createFCComponentAction(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentAction fCComponentAction_ = createFCComponentAction();
        fCComponentAction_.setup(doc);
        return (fCComponentAction_);
    }

    /**
     * Creates a <code>FCModelAction</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    public FCModelAction createFCModelAction(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelAction fCModelAction_ = createFCModelAction();
        fCModelAction_.setup(doc);
        return (fCModelAction_);
    }

    /**
     * Creates a <code>FCServiceAction</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    public FCServiceAction createFCServiceAction(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCServiceAction fCServiceAction_ = createFCServiceAction();
        fCServiceAction_.setup(doc);
        return (fCServiceAction_);
    }

    /**
     * Creates a <code>FCResourceAction</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    public FCResourceAction createFCResourceAction(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResourceAction fCResourceAction_ = createFCResourceAction();
        fCResourceAction_.setup(doc);
        return (fCResourceAction_);
    }

    /**
     * Creates a <code>FCSystemAction</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    public FCSystemAction createFCSystemAction(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemAction fCSystemAction_ = createFCSystemAction();
        fCSystemAction_.setup(doc);
        return (fCSystemAction_);
    }

    /**
     * Creates a <code>FCPrologue</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    public FCPrologue createFCPrologue(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPrologue fCPrologue_ = createFCPrologue();
        fCPrologue_.setup(doc);
        return (fCPrologue_);
    }

    /**
     * Creates a <code>FCEpilogue</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    public FCEpilogue createFCEpilogue(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCEpilogue fCEpilogue_ = createFCEpilogue();
        fCEpilogue_.setup(doc);
        return (fCEpilogue_);
    }

    /**
     * Creates a <code>FCScenarioAction</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    public FCScenarioAction createFCScenarioAction(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenarioAction fCScenarioAction_ = createFCScenarioAction();
        fCScenarioAction_.setup(doc);
        return (fCScenarioAction_);
    }

    /**
     * Creates a <code>FCMoveSceneAction</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    public FCMoveSceneAction createFCMoveSceneAction(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMoveSceneAction fCMoveSceneAction_ = createFCMoveSceneAction();
        fCMoveSceneAction_.setup(doc);
        return (fCMoveSceneAction_);
    }

    /**
     * Creates a <code>FCScenario</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    public FCScenario createFCScenario(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenario fCScenario_ = createFCScenario();
        fCScenario_.setup(doc);
        return (fCScenario_);
    }

    /**
     * Creates a <code>FCScene</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    public FCScene createFCScene(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScene fCScene_ = createFCScene();
        fCScene_.setup(doc);
        return (fCScene_);
    }

    /**
     * Creates a <code>FCDialog</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    public FCDialog createFCDialog(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDialog fCDialog_ = createFCDialog();
        fCDialog_.setup(doc);
        return (fCDialog_);
    }

    /**
     * Creates a <code>FCHelp</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    public FCHelp createFCHelp(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCHelp fCHelp_ = createFCHelp();
        fCHelp_.setup(doc);
        return (fCHelp_);
    }

    /**
     * Creates a <code>FCScriptService</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    public FCScriptService createFCScriptService(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScriptService fCScriptService_ = createFCScriptService();
        fCScriptService_.setup(doc);
        return (fCScriptService_);
    }

    /**
     * Creates a <code>FCComponentService</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    public FCComponentService createFCComponentService(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentService fCComponentService_ = createFCComponentService();
        fCComponentService_.setup(doc);
        return (fCComponentService_);
    }

    /**
     * Creates a <code>FCSystemService</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    public FCSystemService createFCSystemService(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemService fCSystemService_ = createFCSystemService();
        fCSystemService_.setup(doc);
        return (fCSystemService_);
    }

    /**
     * Creates a <code>FCComponentOption</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    public FCComponentOption createFCComponentOption(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentOption fCComponentOption_ = createFCComponentOption();
        fCComponentOption_.setup(doc);
        return (fCComponentOption_);
    }

    /**
     * Creates a <code>FCSystemOption</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    public FCSystemOption createFCSystemOption(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemOption fCSystemOption_ = createFCSystemOption();
        fCSystemOption_.setup(doc);
        return (fCSystemOption_);
    }

    /**
     * Creates a <code>FCOptionRef</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    public FCOptionRef createFCOptionRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionRef fCOptionRef_ = createFCOptionRef();
        fCOptionRef_.setup(doc);
        return (fCOptionRef_);
    }

    /**
     * Creates a <code>FCOptionSet</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    public FCOptionSet createFCOptionSet(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionSet fCOptionSet_ = createFCOptionSet();
        fCOptionSet_.setup(doc);
        return (fCOptionSet_);
    }

    /**
     * Creates a <code>FCAttribute</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    public FCAttribute createFCAttribute(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCAttribute fCAttribute_ = createFCAttribute();
        fCAttribute_.setup(doc);
        return (fCAttribute_);
    }

    /**
     * Creates a <code>FCOperationIn</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    public FCOperationIn createFCOperationIn(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationIn fCOperationIn_ = createFCOperationIn();
        fCOperationIn_.setup(doc);
        return (fCOperationIn_);
    }

    /**
     * Creates a <code>FCOperationOut</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    public FCOperationOut createFCOperationOut(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationOut fCOperationOut_ = createFCOperationOut();
        fCOperationOut_.setup(doc);
        return (fCOperationOut_);
    }

    /**
     * Creates a <code>FCOperation</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    public FCOperation createFCOperation(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperation fCOperation_ = createFCOperation();
        fCOperation_.setup(doc);
        return (fCOperation_);
    }

    /**
     * Creates a <code>FCProvider</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    public FCProvider createFCProvider(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProvider fCProvider_ = createFCProvider();
        fCProvider_.setup(doc);
        return (fCProvider_);
    }

    /**
     * Creates a <code>FCVariable</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    public FCVariable createFCVariable(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariable fCVariable_ = createFCVariable();
        fCVariable_.setup(doc);
        return (fCVariable_);
    }

    /**
     * Creates a <code>FCExtension</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    public FCExtension createFCExtension(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCExtension fCExtension_ = createFCExtension();
        fCExtension_.setup(doc);
        return (fCExtension_);
    }

    /**
     * Creates a <code>FCProperty</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    public FCProperty createFCProperty(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProperty fCProperty_ = createFCProperty();
        fCProperty_.setup(doc);
        return (fCProperty_);
    }

    /**
     * Creates a <code>FCValue</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    public FCValue createFCValue(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCValue fCValue_ = createFCValue();
        fCValue_.setup(doc);
        return (fCValue_);
    }

    /**
     * Creates a <code>FCConstructor</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    public FCConstructor createFCConstructor(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConstructor fCConstructor_ = createFCConstructor();
        fCConstructor_.setup(doc);
        return (fCConstructor_);
    }

    /**
     * Creates a <code>FCMethod</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    public FCMethod createFCMethod(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMethod fCMethod_ = createFCMethod();
        fCMethod_.setup(doc);
        return (fCMethod_);
    }

    /**
     * Creates a <code>FCJndiComponentRef</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    public FCJndiComponentRef createFCJndiComponentRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiComponentRef fCJndiComponentRef_ = createFCJndiComponentRef();
        fCJndiComponentRef_.setup(doc);
        return (fCJndiComponentRef_);
    }

    /**
     * Creates a <code>FCConfigComponentRef</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    public FCConfigComponentRef createFCConfigComponentRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigComponentRef fCConfigComponentRef_ = createFCConfigComponentRef();
        fCConfigComponentRef_.setup(doc);
        return (fCConfigComponentRef_);
    }

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    public FCJavaBeansComponentRef createFCJavaBeansComponentRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansComponentRef fCJavaBeansComponentRef_ = createFCJavaBeansComponentRef();
        fCJavaBeansComponentRef_.setup(doc);
        return (fCJavaBeansComponentRef_);
    }

    /**
     * Creates a <code>FCJndiModelRef</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    public FCJndiModelRef createFCJndiModelRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiModelRef fCJndiModelRef_ = createFCJndiModelRef();
        fCJndiModelRef_.setup(doc);
        return (fCJndiModelRef_);
    }

    /**
     * Creates a <code>FCConfigModelRef</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    public FCConfigModelRef createFCConfigModelRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigModelRef fCConfigModelRef_ = createFCConfigModelRef();
        fCConfigModelRef_.setup(doc);
        return (fCConfigModelRef_);
    }

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    public FCJavaBeansModelRef createFCJavaBeansModelRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansModelRef fCJavaBeansModelRef_ = createFCJavaBeansModelRef();
        fCJavaBeansModelRef_.setup(doc);
        return (fCJavaBeansModelRef_);
    }

    /**
     * Creates a <code>FCJndiResourceRef</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    public FCJndiResourceRef createFCJndiResourceRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResourceRef fCJndiResourceRef_ = createFCJndiResourceRef();
        fCJndiResourceRef_.setup(doc);
        return (fCJndiResourceRef_);
    }

    /**
     * Creates a <code>FCConfigResourceRef</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    public FCConfigResourceRef createFCConfigResourceRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigResourceRef fCConfigResourceRef_ = createFCConfigResourceRef();
        fCConfigResourceRef_.setup(doc);
        return (fCConfigResourceRef_);
    }

    /**
     * Creates a <code>FCRealization</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    public FCRealization createFCRealization(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCRealization fCRealization_ = createFCRealization();
        fCRealization_.setup(doc);
        return (fCRealization_);
    }

    /**
     * Creates a <code>FCComponent</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    public FCComponent createFCComponent(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponent fCComponent_ = createFCComponent();
        fCComponent_.setup(doc);
        return (fCComponent_);
    }

    /**
     * Creates a <code>FCModelMapper</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    public FCModelMapper createFCModelMapper(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelMapper fCModelMapper_ = createFCModelMapper();
        fCModelMapper_.setup(doc);
        return (fCModelMapper_);
    }

    /**
     * Creates a <code>FCModelRepository</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    public FCModelRepository createFCModelRepository(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelRepository fCModelRepository_ = createFCModelRepository();
        fCModelRepository_.setup(doc);
        return (fCModelRepository_);
    }

    /**
     * Creates a <code>FCModel</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    public FCModel createFCModel(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModel fCModel_ = createFCModel();
        fCModel_.setup(doc);
        return (fCModel_);
    }

    /**
     * Creates a <code>FCJdbcResource</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    public FCJdbcResource createFCJdbcResource(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJdbcResource fCJdbcResource_ = createFCJdbcResource();
        fCJdbcResource_.setup(doc);
        return (fCJdbcResource_);
    }

    /**
     * Creates a <code>FCDatasourceResource</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    public FCDatasourceResource createFCDatasourceResource(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDatasourceResource fCDatasourceResource_ = createFCDatasourceResource();
        fCDatasourceResource_.setup(doc);
        return (fCDatasourceResource_);
    }

    /**
     * Creates a <code>FCJndiResource</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    public FCJndiResource createFCJndiResource(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResource fCJndiResource_ = createFCJndiResource();
        fCJndiResource_.setup(doc);
        return (fCJndiResource_);
    }

    /**
     * Creates a <code>FCFileResource</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    public FCFileResource createFCFileResource(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFileResource fCFileResource_ = createFCFileResource();
        fCFileResource_.setup(doc);
        return (fCFileResource_);
    }

    /**
     * Creates a <code>FCUrlResource</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    public FCUrlResource createFCUrlResource(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUrlResource fCUrlResource_ = createFCUrlResource();
        fCUrlResource_.setup(doc);
        return (fCUrlResource_);
    }

    /**
     * Creates a <code>FCVariableResource</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    public FCVariableResource createFCVariableResource(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariableResource fCVariableResource_ = createFCVariableResource();
        fCVariableResource_.setup(doc);
        return (fCVariableResource_);
    }

    /**
     * Creates a <code>FCResource</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    public FCResource createFCResource(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResource fCResource_ = createFCResource();
        fCResource_.setup(doc);
        return (fCResource_);
    }

    /**
     * Creates a <code>FCLogger</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    public FCLogger createFCLogger(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCLogger fCLogger_ = createFCLogger();
        fCLogger_.setup(doc);
        return (fCLogger_);
    }

    /**
     * Creates a <code>FCFrameworkLog</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    public FCFrameworkLog createFCFrameworkLog(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFrameworkLog fCFrameworkLog_ = createFCFrameworkLog();
        fCFrameworkLog_.setup(doc);
        return (fCFrameworkLog_);
    }

    /**
     * Creates a <code>FCConfig</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    public FCConfig createFCConfig(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfig fCConfig_ = createFCConfig();
        fCConfig_.setup(doc);
        return (fCConfig_);
    }

    /**
     * Creates a <code>FCPlainScript</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    public FCPlainScript createFCPlainScript(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScript fCPlainScript_ = createFCPlainScript();
        fCPlainScript_.setup(doc);
        return (fCPlainScript_);
    }

    /**
     * Creates a <code>FCPlainScriptBody</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    public FCPlainScriptBody createFCPlainScriptBody(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScriptBody fCPlainScriptBody_ = createFCPlainScriptBody();
        fCPlainScriptBody_.setup(doc);
        return (fCPlainScriptBody_);
    }

    /**
     * Creates a <code>FCCopyright</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    public FCCopyright createFCCopyright(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCCopyright fCCopyright_ = createFCCopyright();
        fCCopyright_.setup(element);
        return (fCCopyright_);
    }

    /**
     * Creates a <code>FCVersion</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    public FCVersion createFCVersion(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVersion fCVersion_ = createFCVersion();
        fCVersion_.setup(element);
        return (fCVersion_);
    }

    /**
     * Creates a <code>FCUsage</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    public FCUsage createFCUsage(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUsage fCUsage_ = createFCUsage();
        fCUsage_.setup(element);
        return (fCUsage_);
    }

    /**
     * Creates a <code>FCSlot</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    public FCSlot createFCSlot(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSlot fCSlot_ = createFCSlot();
        fCSlot_.setup(element);
        return (fCSlot_);
    }

    /**
     * Creates a <code>FCActionIn</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    public FCActionIn createFCActionIn(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionIn fCActionIn_ = createFCActionIn();
        fCActionIn_.setup(element);
        return (fCActionIn_);
    }

    /**
     * Creates a <code>FCActionOut</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    public FCActionOut createFCActionOut(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCActionOut fCActionOut_ = createFCActionOut();
        fCActionOut_.setup(element);
        return (fCActionOut_);
    }

    /**
     * Creates a <code>FCComponentAction</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    public FCComponentAction createFCComponentAction(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentAction fCComponentAction_ = createFCComponentAction();
        fCComponentAction_.setup(element);
        return (fCComponentAction_);
    }

    /**
     * Creates a <code>FCModelAction</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    public FCModelAction createFCModelAction(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelAction fCModelAction_ = createFCModelAction();
        fCModelAction_.setup(element);
        return (fCModelAction_);
    }

    /**
     * Creates a <code>FCServiceAction</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    public FCServiceAction createFCServiceAction(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCServiceAction fCServiceAction_ = createFCServiceAction();
        fCServiceAction_.setup(element);
        return (fCServiceAction_);
    }

    /**
     * Creates a <code>FCResourceAction</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    public FCResourceAction createFCResourceAction(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResourceAction fCResourceAction_ = createFCResourceAction();
        fCResourceAction_.setup(element);
        return (fCResourceAction_);
    }

    /**
     * Creates a <code>FCSystemAction</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    public FCSystemAction createFCSystemAction(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemAction fCSystemAction_ = createFCSystemAction();
        fCSystemAction_.setup(element);
        return (fCSystemAction_);
    }

    /**
     * Creates a <code>FCPrologue</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    public FCPrologue createFCPrologue(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPrologue fCPrologue_ = createFCPrologue();
        fCPrologue_.setup(element);
        return (fCPrologue_);
    }

    /**
     * Creates a <code>FCEpilogue</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    public FCEpilogue createFCEpilogue(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCEpilogue fCEpilogue_ = createFCEpilogue();
        fCEpilogue_.setup(element);
        return (fCEpilogue_);
    }

    /**
     * Creates a <code>FCScenarioAction</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    public FCScenarioAction createFCScenarioAction(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenarioAction fCScenarioAction_ = createFCScenarioAction();
        fCScenarioAction_.setup(element);
        return (fCScenarioAction_);
    }

    /**
     * Creates a <code>FCMoveSceneAction</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    public FCMoveSceneAction createFCMoveSceneAction(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMoveSceneAction fCMoveSceneAction_ = createFCMoveSceneAction();
        fCMoveSceneAction_.setup(element);
        return (fCMoveSceneAction_);
    }

    /**
     * Creates a <code>FCScenario</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    public FCScenario createFCScenario(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScenario fCScenario_ = createFCScenario();
        fCScenario_.setup(element);
        return (fCScenario_);
    }

    /**
     * Creates a <code>FCScene</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    public FCScene createFCScene(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScene fCScene_ = createFCScene();
        fCScene_.setup(element);
        return (fCScene_);
    }

    /**
     * Creates a <code>FCDialog</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    public FCDialog createFCDialog(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDialog fCDialog_ = createFCDialog();
        fCDialog_.setup(element);
        return (fCDialog_);
    }

    /**
     * Creates a <code>FCHelp</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    public FCHelp createFCHelp(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCHelp fCHelp_ = createFCHelp();
        fCHelp_.setup(element);
        return (fCHelp_);
    }

    /**
     * Creates a <code>FCScriptService</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    public FCScriptService createFCScriptService(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCScriptService fCScriptService_ = createFCScriptService();
        fCScriptService_.setup(element);
        return (fCScriptService_);
    }

    /**
     * Creates a <code>FCComponentService</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    public FCComponentService createFCComponentService(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentService fCComponentService_ = createFCComponentService();
        fCComponentService_.setup(element);
        return (fCComponentService_);
    }

    /**
     * Creates a <code>FCSystemService</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    public FCSystemService createFCSystemService(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemService fCSystemService_ = createFCSystemService();
        fCSystemService_.setup(element);
        return (fCSystemService_);
    }

    /**
     * Creates a <code>FCComponentOption</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    public FCComponentOption createFCComponentOption(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponentOption fCComponentOption_ = createFCComponentOption();
        fCComponentOption_.setup(element);
        return (fCComponentOption_);
    }

    /**
     * Creates a <code>FCSystemOption</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    public FCSystemOption createFCSystemOption(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCSystemOption fCSystemOption_ = createFCSystemOption();
        fCSystemOption_.setup(element);
        return (fCSystemOption_);
    }

    /**
     * Creates a <code>FCOptionRef</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    public FCOptionRef createFCOptionRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionRef fCOptionRef_ = createFCOptionRef();
        fCOptionRef_.setup(element);
        return (fCOptionRef_);
    }

    /**
     * Creates a <code>FCOptionSet</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    public FCOptionSet createFCOptionSet(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOptionSet fCOptionSet_ = createFCOptionSet();
        fCOptionSet_.setup(element);
        return (fCOptionSet_);
    }

    /**
     * Creates a <code>FCAttribute</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    public FCAttribute createFCAttribute(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCAttribute fCAttribute_ = createFCAttribute();
        fCAttribute_.setup(element);
        return (fCAttribute_);
    }

    /**
     * Creates a <code>FCOperationIn</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    public FCOperationIn createFCOperationIn(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationIn fCOperationIn_ = createFCOperationIn();
        fCOperationIn_.setup(element);
        return (fCOperationIn_);
    }

    /**
     * Creates a <code>FCOperationOut</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    public FCOperationOut createFCOperationOut(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperationOut fCOperationOut_ = createFCOperationOut();
        fCOperationOut_.setup(element);
        return (fCOperationOut_);
    }

    /**
     * Creates a <code>FCOperation</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    public FCOperation createFCOperation(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCOperation fCOperation_ = createFCOperation();
        fCOperation_.setup(element);
        return (fCOperation_);
    }

    /**
     * Creates a <code>FCProvider</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    public FCProvider createFCProvider(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProvider fCProvider_ = createFCProvider();
        fCProvider_.setup(element);
        return (fCProvider_);
    }

    /**
     * Creates a <code>FCVariable</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    public FCVariable createFCVariable(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariable fCVariable_ = createFCVariable();
        fCVariable_.setup(element);
        return (fCVariable_);
    }

    /**
     * Creates a <code>FCExtension</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    public FCExtension createFCExtension(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCExtension fCExtension_ = createFCExtension();
        fCExtension_.setup(element);
        return (fCExtension_);
    }

    /**
     * Creates a <code>FCProperty</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    public FCProperty createFCProperty(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCProperty fCProperty_ = createFCProperty();
        fCProperty_.setup(element);
        return (fCProperty_);
    }

    /**
     * Creates a <code>FCValue</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    public FCValue createFCValue(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCValue fCValue_ = createFCValue();
        fCValue_.setup(element);
        return (fCValue_);
    }

    /**
     * Creates a <code>FCConstructor</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    public FCConstructor createFCConstructor(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConstructor fCConstructor_ = createFCConstructor();
        fCConstructor_.setup(element);
        return (fCConstructor_);
    }

    /**
     * Creates a <code>FCMethod</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    public FCMethod createFCMethod(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCMethod fCMethod_ = createFCMethod();
        fCMethod_.setup(element);
        return (fCMethod_);
    }

    /**
     * Creates a <code>FCJndiComponentRef</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    public FCJndiComponentRef createFCJndiComponentRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiComponentRef fCJndiComponentRef_ = createFCJndiComponentRef();
        fCJndiComponentRef_.setup(element);
        return (fCJndiComponentRef_);
    }

    /**
     * Creates a <code>FCConfigComponentRef</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    public FCConfigComponentRef createFCConfigComponentRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigComponentRef fCConfigComponentRef_ = createFCConfigComponentRef();
        fCConfigComponentRef_.setup(element);
        return (fCConfigComponentRef_);
    }

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    public FCJavaBeansComponentRef createFCJavaBeansComponentRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansComponentRef fCJavaBeansComponentRef_ = createFCJavaBeansComponentRef();
        fCJavaBeansComponentRef_.setup(element);
        return (fCJavaBeansComponentRef_);
    }

    /**
     * Creates a <code>FCJndiModelRef</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    public FCJndiModelRef createFCJndiModelRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiModelRef fCJndiModelRef_ = createFCJndiModelRef();
        fCJndiModelRef_.setup(element);
        return (fCJndiModelRef_);
    }

    /**
     * Creates a <code>FCConfigModelRef</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    public FCConfigModelRef createFCConfigModelRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigModelRef fCConfigModelRef_ = createFCConfigModelRef();
        fCConfigModelRef_.setup(element);
        return (fCConfigModelRef_);
    }

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    public FCJavaBeansModelRef createFCJavaBeansModelRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJavaBeansModelRef fCJavaBeansModelRef_ = createFCJavaBeansModelRef();
        fCJavaBeansModelRef_.setup(element);
        return (fCJavaBeansModelRef_);
    }

    /**
     * Creates a <code>FCJndiResourceRef</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    public FCJndiResourceRef createFCJndiResourceRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResourceRef fCJndiResourceRef_ = createFCJndiResourceRef();
        fCJndiResourceRef_.setup(element);
        return (fCJndiResourceRef_);
    }

    /**
     * Creates a <code>FCConfigResourceRef</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    public FCConfigResourceRef createFCConfigResourceRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfigResourceRef fCConfigResourceRef_ = createFCConfigResourceRef();
        fCConfigResourceRef_.setup(element);
        return (fCConfigResourceRef_);
    }

    /**
     * Creates a <code>FCRealization</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    public FCRealization createFCRealization(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCRealization fCRealization_ = createFCRealization();
        fCRealization_.setup(element);
        return (fCRealization_);
    }

    /**
     * Creates a <code>FCComponent</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    public FCComponent createFCComponent(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCComponent fCComponent_ = createFCComponent();
        fCComponent_.setup(element);
        return (fCComponent_);
    }

    /**
     * Creates a <code>FCModelMapper</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    public FCModelMapper createFCModelMapper(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelMapper fCModelMapper_ = createFCModelMapper();
        fCModelMapper_.setup(element);
        return (fCModelMapper_);
    }

    /**
     * Creates a <code>FCModelRepository</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    public FCModelRepository createFCModelRepository(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModelRepository fCModelRepository_ = createFCModelRepository();
        fCModelRepository_.setup(element);
        return (fCModelRepository_);
    }

    /**
     * Creates a <code>FCModel</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    public FCModel createFCModel(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCModel fCModel_ = createFCModel();
        fCModel_.setup(element);
        return (fCModel_);
    }

    /**
     * Creates a <code>FCJdbcResource</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    public FCJdbcResource createFCJdbcResource(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJdbcResource fCJdbcResource_ = createFCJdbcResource();
        fCJdbcResource_.setup(element);
        return (fCJdbcResource_);
    }

    /**
     * Creates a <code>FCDatasourceResource</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    public FCDatasourceResource createFCDatasourceResource(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCDatasourceResource fCDatasourceResource_ = createFCDatasourceResource();
        fCDatasourceResource_.setup(element);
        return (fCDatasourceResource_);
    }

    /**
     * Creates a <code>FCJndiResource</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    public FCJndiResource createFCJndiResource(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCJndiResource fCJndiResource_ = createFCJndiResource();
        fCJndiResource_.setup(element);
        return (fCJndiResource_);
    }

    /**
     * Creates a <code>FCFileResource</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    public FCFileResource createFCFileResource(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFileResource fCFileResource_ = createFCFileResource();
        fCFileResource_.setup(element);
        return (fCFileResource_);
    }

    /**
     * Creates a <code>FCUrlResource</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    public FCUrlResource createFCUrlResource(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCUrlResource fCUrlResource_ = createFCUrlResource();
        fCUrlResource_.setup(element);
        return (fCUrlResource_);
    }

    /**
     * Creates a <code>FCVariableResource</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    public FCVariableResource createFCVariableResource(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCVariableResource fCVariableResource_ = createFCVariableResource();
        fCVariableResource_.setup(element);
        return (fCVariableResource_);
    }

    /**
     * Creates a <code>FCResource</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    public FCResource createFCResource(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCResource fCResource_ = createFCResource();
        fCResource_.setup(element);
        return (fCResource_);
    }

    /**
     * Creates a <code>FCLogger</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    public FCLogger createFCLogger(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCLogger fCLogger_ = createFCLogger();
        fCLogger_.setup(element);
        return (fCLogger_);
    }

    /**
     * Creates a <code>FCFrameworkLog</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    public FCFrameworkLog createFCFrameworkLog(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCFrameworkLog fCFrameworkLog_ = createFCFrameworkLog();
        fCFrameworkLog_.setup(element);
        return (fCFrameworkLog_);
    }

    /**
     * Creates a <code>FCConfig</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    public FCConfig createFCConfig(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCConfig fCConfig_ = createFCConfig();
        fCConfig_.setup(element);
        return (fCConfig_);
    }

    /**
     * Creates a <code>FCPlainScript</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    public FCPlainScript createFCPlainScript(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScript fCPlainScript_ = createFCPlainScript();
        fCPlainScript_.setup(element);
        return (fCPlainScript_);
    }

    /**
     * Creates a <code>FCPlainScriptBody</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    public FCPlainScriptBody createFCPlainScriptBody(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException {
        FCPlainScriptBody fCPlainScriptBody_ = createFCPlainScriptBody();
        fCPlainScriptBody_.setup(element);
        return (fCPlainScriptBody_);
    }

    /**
     * Creates a <code>FCCopyright</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCCopyright
     */
    public FCCopyright createFCCopyright(RStack stack) {
        FCCopyright fCCopyright_ = createFCCopyright();
        fCCopyright_.setup(stack);
        return (fCCopyright_);
    }

    /**
     * Creates a <code>FCVersion</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCVersion
     */
    public FCVersion createFCVersion(RStack stack) {
        FCVersion fCVersion_ = createFCVersion();
        fCVersion_.setup(stack);
        return (fCVersion_);
    }

    /**
     * Creates a <code>FCUsage</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCUsage
     */
    public FCUsage createFCUsage(RStack stack) {
        FCUsage fCUsage_ = createFCUsage();
        fCUsage_.setup(stack);
        return (fCUsage_);
    }

    /**
     * Creates a <code>FCSlot</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCSlot
     */
    public FCSlot createFCSlot(RStack stack) {
        FCSlot fCSlot_ = createFCSlot();
        fCSlot_.setup(stack);
        return (fCSlot_);
    }

    /**
     * Creates a <code>FCActionIn</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCActionIn
     */
    public FCActionIn createFCActionIn(RStack stack) {
        FCActionIn fCActionIn_ = createFCActionIn();
        fCActionIn_.setup(stack);
        return (fCActionIn_);
    }

    /**
     * Creates a <code>FCActionOut</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCActionOut
     */
    public FCActionOut createFCActionOut(RStack stack) {
        FCActionOut fCActionOut_ = createFCActionOut();
        fCActionOut_.setup(stack);
        return (fCActionOut_);
    }

    /**
     * Creates a <code>FCComponentAction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCComponentAction
     */
    public FCComponentAction createFCComponentAction(RStack stack) {
        FCComponentAction fCComponentAction_ = createFCComponentAction();
        fCComponentAction_.setup(stack);
        return (fCComponentAction_);
    }

    /**
     * Creates a <code>FCModelAction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCModelAction
     */
    public FCModelAction createFCModelAction(RStack stack) {
        FCModelAction fCModelAction_ = createFCModelAction();
        fCModelAction_.setup(stack);
        return (fCModelAction_);
    }

    /**
     * Creates a <code>FCServiceAction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCServiceAction
     */
    public FCServiceAction createFCServiceAction(RStack stack) {
        FCServiceAction fCServiceAction_ = createFCServiceAction();
        fCServiceAction_.setup(stack);
        return (fCServiceAction_);
    }

    /**
     * Creates a <code>FCResourceAction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCResourceAction
     */
    public FCResourceAction createFCResourceAction(RStack stack) {
        FCResourceAction fCResourceAction_ = createFCResourceAction();
        fCResourceAction_.setup(stack);
        return (fCResourceAction_);
    }

    /**
     * Creates a <code>FCSystemAction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCSystemAction
     */
    public FCSystemAction createFCSystemAction(RStack stack) {
        FCSystemAction fCSystemAction_ = createFCSystemAction();
        fCSystemAction_.setup(stack);
        return (fCSystemAction_);
    }

    /**
     * Creates a <code>FCPrologue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCPrologue
     */
    public FCPrologue createFCPrologue(RStack stack) {
        FCPrologue fCPrologue_ = createFCPrologue();
        fCPrologue_.setup(stack);
        return (fCPrologue_);
    }

    /**
     * Creates a <code>FCEpilogue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCEpilogue
     */
    public FCEpilogue createFCEpilogue(RStack stack) {
        FCEpilogue fCEpilogue_ = createFCEpilogue();
        fCEpilogue_.setup(stack);
        return (fCEpilogue_);
    }

    /**
     * Creates a <code>FCScenarioAction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCScenarioAction
     */
    public FCScenarioAction createFCScenarioAction(RStack stack) {
        FCScenarioAction fCScenarioAction_ = createFCScenarioAction();
        fCScenarioAction_.setup(stack);
        return (fCScenarioAction_);
    }

    /**
     * Creates a <code>FCMoveSceneAction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCMoveSceneAction
     */
    public FCMoveSceneAction createFCMoveSceneAction(RStack stack) {
        FCMoveSceneAction fCMoveSceneAction_ = createFCMoveSceneAction();
        fCMoveSceneAction_.setup(stack);
        return (fCMoveSceneAction_);
    }

    /**
     * Creates a <code>FCScenario</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCScenario
     */
    public FCScenario createFCScenario(RStack stack) {
        FCScenario fCScenario_ = createFCScenario();
        fCScenario_.setup(stack);
        return (fCScenario_);
    }

    /**
     * Creates a <code>FCScene</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCScene
     */
    public FCScene createFCScene(RStack stack) {
        FCScene fCScene_ = createFCScene();
        fCScene_.setup(stack);
        return (fCScene_);
    }

    /**
     * Creates a <code>FCDialog</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCDialog
     */
    public FCDialog createFCDialog(RStack stack) {
        FCDialog fCDialog_ = createFCDialog();
        fCDialog_.setup(stack);
        return (fCDialog_);
    }

    /**
     * Creates a <code>FCHelp</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCHelp
     */
    public FCHelp createFCHelp(RStack stack) {
        FCHelp fCHelp_ = createFCHelp();
        fCHelp_.setup(stack);
        return (fCHelp_);
    }

    /**
     * Creates a <code>FCScriptService</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCScriptService
     */
    public FCScriptService createFCScriptService(RStack stack) {
        FCScriptService fCScriptService_ = createFCScriptService();
        fCScriptService_.setup(stack);
        return (fCScriptService_);
    }

    /**
     * Creates a <code>FCComponentService</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCComponentService
     */
    public FCComponentService createFCComponentService(RStack stack) {
        FCComponentService fCComponentService_ = createFCComponentService();
        fCComponentService_.setup(stack);
        return (fCComponentService_);
    }

    /**
     * Creates a <code>FCSystemService</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCSystemService
     */
    public FCSystemService createFCSystemService(RStack stack) {
        FCSystemService fCSystemService_ = createFCSystemService();
        fCSystemService_.setup(stack);
        return (fCSystemService_);
    }

    /**
     * Creates a <code>FCComponentOption</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCComponentOption
     */
    public FCComponentOption createFCComponentOption(RStack stack) {
        FCComponentOption fCComponentOption_ = createFCComponentOption();
        fCComponentOption_.setup(stack);
        return (fCComponentOption_);
    }

    /**
     * Creates a <code>FCSystemOption</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCSystemOption
     */
    public FCSystemOption createFCSystemOption(RStack stack) {
        FCSystemOption fCSystemOption_ = createFCSystemOption();
        fCSystemOption_.setup(stack);
        return (fCSystemOption_);
    }

    /**
     * Creates a <code>FCOptionRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCOptionRef
     */
    public FCOptionRef createFCOptionRef(RStack stack) {
        FCOptionRef fCOptionRef_ = createFCOptionRef();
        fCOptionRef_.setup(stack);
        return (fCOptionRef_);
    }

    /**
     * Creates a <code>FCOptionSet</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCOptionSet
     */
    public FCOptionSet createFCOptionSet(RStack stack) {
        FCOptionSet fCOptionSet_ = createFCOptionSet();
        fCOptionSet_.setup(stack);
        return (fCOptionSet_);
    }

    /**
     * Creates a <code>FCAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCAttribute
     */
    public FCAttribute createFCAttribute(RStack stack) {
        FCAttribute fCAttribute_ = createFCAttribute();
        fCAttribute_.setup(stack);
        return (fCAttribute_);
    }

    /**
     * Creates a <code>FCOperationIn</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCOperationIn
     */
    public FCOperationIn createFCOperationIn(RStack stack) {
        FCOperationIn fCOperationIn_ = createFCOperationIn();
        fCOperationIn_.setup(stack);
        return (fCOperationIn_);
    }

    /**
     * Creates a <code>FCOperationOut</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCOperationOut
     */
    public FCOperationOut createFCOperationOut(RStack stack) {
        FCOperationOut fCOperationOut_ = createFCOperationOut();
        fCOperationOut_.setup(stack);
        return (fCOperationOut_);
    }

    /**
     * Creates a <code>FCOperation</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCOperation
     */
    public FCOperation createFCOperation(RStack stack) {
        FCOperation fCOperation_ = createFCOperation();
        fCOperation_.setup(stack);
        return (fCOperation_);
    }

    /**
     * Creates a <code>FCProvider</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCProvider
     */
    public FCProvider createFCProvider(RStack stack) {
        FCProvider fCProvider_ = createFCProvider();
        fCProvider_.setup(stack);
        return (fCProvider_);
    }

    /**
     * Creates a <code>FCVariable</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCVariable
     */
    public FCVariable createFCVariable(RStack stack) {
        FCVariable fCVariable_ = createFCVariable();
        fCVariable_.setup(stack);
        return (fCVariable_);
    }

    /**
     * Creates a <code>FCExtension</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCExtension
     */
    public FCExtension createFCExtension(RStack stack) {
        FCExtension fCExtension_ = createFCExtension();
        fCExtension_.setup(stack);
        return (fCExtension_);
    }

    /**
     * Creates a <code>FCProperty</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCProperty
     */
    public FCProperty createFCProperty(RStack stack) {
        FCProperty fCProperty_ = createFCProperty();
        fCProperty_.setup(stack);
        return (fCProperty_);
    }

    /**
     * Creates a <code>FCValue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCValue
     */
    public FCValue createFCValue(RStack stack) {
        FCValue fCValue_ = createFCValue();
        fCValue_.setup(stack);
        return (fCValue_);
    }

    /**
     * Creates a <code>FCConstructor</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCConstructor
     */
    public FCConstructor createFCConstructor(RStack stack) {
        FCConstructor fCConstructor_ = createFCConstructor();
        fCConstructor_.setup(stack);
        return (fCConstructor_);
    }

    /**
     * Creates a <code>FCMethod</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCMethod
     */
    public FCMethod createFCMethod(RStack stack) {
        FCMethod fCMethod_ = createFCMethod();
        fCMethod_.setup(stack);
        return (fCMethod_);
    }

    /**
     * Creates a <code>FCJndiComponentRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCJndiComponentRef
     */
    public FCJndiComponentRef createFCJndiComponentRef(RStack stack) {
        FCJndiComponentRef fCJndiComponentRef_ = createFCJndiComponentRef();
        fCJndiComponentRef_.setup(stack);
        return (fCJndiComponentRef_);
    }

    /**
     * Creates a <code>FCConfigComponentRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCConfigComponentRef
     */
    public FCConfigComponentRef createFCConfigComponentRef(RStack stack) {
        FCConfigComponentRef fCConfigComponentRef_ = createFCConfigComponentRef();
        fCConfigComponentRef_.setup(stack);
        return (fCConfigComponentRef_);
    }

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCJavaBeansComponentRef
     */
    public FCJavaBeansComponentRef createFCJavaBeansComponentRef(RStack stack) {
        FCJavaBeansComponentRef fCJavaBeansComponentRef_ = createFCJavaBeansComponentRef();
        fCJavaBeansComponentRef_.setup(stack);
        return (fCJavaBeansComponentRef_);
    }

    /**
     * Creates a <code>FCJndiModelRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCJndiModelRef
     */
    public FCJndiModelRef createFCJndiModelRef(RStack stack) {
        FCJndiModelRef fCJndiModelRef_ = createFCJndiModelRef();
        fCJndiModelRef_.setup(stack);
        return (fCJndiModelRef_);
    }

    /**
     * Creates a <code>FCConfigModelRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCConfigModelRef
     */
    public FCConfigModelRef createFCConfigModelRef(RStack stack) {
        FCConfigModelRef fCConfigModelRef_ = createFCConfigModelRef();
        fCConfigModelRef_.setup(stack);
        return (fCConfigModelRef_);
    }

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCJavaBeansModelRef
     */
    public FCJavaBeansModelRef createFCJavaBeansModelRef(RStack stack) {
        FCJavaBeansModelRef fCJavaBeansModelRef_ = createFCJavaBeansModelRef();
        fCJavaBeansModelRef_.setup(stack);
        return (fCJavaBeansModelRef_);
    }

    /**
     * Creates a <code>FCJndiResourceRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCJndiResourceRef
     */
    public FCJndiResourceRef createFCJndiResourceRef(RStack stack) {
        FCJndiResourceRef fCJndiResourceRef_ = createFCJndiResourceRef();
        fCJndiResourceRef_.setup(stack);
        return (fCJndiResourceRef_);
    }

    /**
     * Creates a <code>FCConfigResourceRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCConfigResourceRef
     */
    public FCConfigResourceRef createFCConfigResourceRef(RStack stack) {
        FCConfigResourceRef fCConfigResourceRef_ = createFCConfigResourceRef();
        fCConfigResourceRef_.setup(stack);
        return (fCConfigResourceRef_);
    }

    /**
     * Creates a <code>FCRealization</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCRealization
     */
    public FCRealization createFCRealization(RStack stack) {
        FCRealization fCRealization_ = createFCRealization();
        fCRealization_.setup(stack);
        return (fCRealization_);
    }

    /**
     * Creates a <code>FCComponent</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCComponent
     */
    public FCComponent createFCComponent(RStack stack) {
        FCComponent fCComponent_ = createFCComponent();
        fCComponent_.setup(stack);
        return (fCComponent_);
    }

    /**
     * Creates a <code>FCModelMapper</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCModelMapper
     */
    public FCModelMapper createFCModelMapper(RStack stack) {
        FCModelMapper fCModelMapper_ = createFCModelMapper();
        fCModelMapper_.setup(stack);
        return (fCModelMapper_);
    }

    /**
     * Creates a <code>FCModelRepository</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCModelRepository
     */
    public FCModelRepository createFCModelRepository(RStack stack) {
        FCModelRepository fCModelRepository_ = createFCModelRepository();
        fCModelRepository_.setup(stack);
        return (fCModelRepository_);
    }

    /**
     * Creates a <code>FCModel</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCModel
     */
    public FCModel createFCModel(RStack stack) {
        FCModel fCModel_ = createFCModel();
        fCModel_.setup(stack);
        return (fCModel_);
    }

    /**
     * Creates a <code>FCJdbcResource</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCJdbcResource
     */
    public FCJdbcResource createFCJdbcResource(RStack stack) {
        FCJdbcResource fCJdbcResource_ = createFCJdbcResource();
        fCJdbcResource_.setup(stack);
        return (fCJdbcResource_);
    }

    /**
     * Creates a <code>FCDatasourceResource</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCDatasourceResource
     */
    public FCDatasourceResource createFCDatasourceResource(RStack stack) {
        FCDatasourceResource fCDatasourceResource_ = createFCDatasourceResource();
        fCDatasourceResource_.setup(stack);
        return (fCDatasourceResource_);
    }

    /**
     * Creates a <code>FCJndiResource</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCJndiResource
     */
    public FCJndiResource createFCJndiResource(RStack stack) {
        FCJndiResource fCJndiResource_ = createFCJndiResource();
        fCJndiResource_.setup(stack);
        return (fCJndiResource_);
    }

    /**
     * Creates a <code>FCFileResource</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCFileResource
     */
    public FCFileResource createFCFileResource(RStack stack) {
        FCFileResource fCFileResource_ = createFCFileResource();
        fCFileResource_.setup(stack);
        return (fCFileResource_);
    }

    /**
     * Creates a <code>FCUrlResource</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCUrlResource
     */
    public FCUrlResource createFCUrlResource(RStack stack) {
        FCUrlResource fCUrlResource_ = createFCUrlResource();
        fCUrlResource_.setup(stack);
        return (fCUrlResource_);
    }

    /**
     * Creates a <code>FCVariableResource</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCVariableResource
     */
    public FCVariableResource createFCVariableResource(RStack stack) {
        FCVariableResource fCVariableResource_ = createFCVariableResource();
        fCVariableResource_.setup(stack);
        return (fCVariableResource_);
    }

    /**
     * Creates a <code>FCResource</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCResource
     */
    public FCResource createFCResource(RStack stack) {
        FCResource fCResource_ = createFCResource();
        fCResource_.setup(stack);
        return (fCResource_);
    }

    /**
     * Creates a <code>FCLogger</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCLogger
     */
    public FCLogger createFCLogger(RStack stack) {
        FCLogger fCLogger_ = createFCLogger();
        fCLogger_.setup(stack);
        return (fCLogger_);
    }

    /**
     * Creates a <code>FCFrameworkLog</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCFrameworkLog
     */
    public FCFrameworkLog createFCFrameworkLog(RStack stack) {
        FCFrameworkLog fCFrameworkLog_ = createFCFrameworkLog();
        fCFrameworkLog_.setup(stack);
        return (fCFrameworkLog_);
    }

    /**
     * Creates a <code>FCConfig</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCConfig
     */
    public FCConfig createFCConfig(RStack stack) {
        FCConfig fCConfig_ = createFCConfig();
        fCConfig_.setup(stack);
        return (fCConfig_);
    }

    /**
     * Creates a <code>FCPlainScript</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCPlainScript
     */
    public FCPlainScript createFCPlainScript(RStack stack) {
        FCPlainScript fCPlainScript_ = createFCPlainScript();
        fCPlainScript_.setup(stack);
        return (fCPlainScript_);
    }

    /**
     * Creates a <code>FCPlainScriptBody</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCPlainScriptBody
     */
    public FCPlainScriptBody createFCPlainScriptBody(RStack stack) {
        FCPlainScriptBody fCPlainScriptBody_ = createFCPlainScriptBody();
        fCPlainScriptBody_.setup(stack);
        return (fCPlainScriptBody_);
    }

    /**
     * Creates a <code>FCSlotValue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCSlotValue
     */
    public FCSlotValue createFCSlotValue(RStack stack) {
        FCSlotValue fCSlotValue_ = createFCSlotValue();
        fCSlotValue_.setup(stack);
        return (fCSlotValue_);
    }

    /**
     * Creates a <code>FCActionInPeek</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCActionInPeek
     */
    public FCActionInPeek createFCActionInPeek(RStack stack) {
        FCActionInPeek fCActionInPeek_ = createFCActionInPeek();
        fCActionInPeek_.setup(stack);
        return (fCActionInPeek_);
    }

    /**
     * Creates a <code>FCActionInPop</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCActionInPop
     */
    public FCActionInPop createFCActionInPop(RStack stack) {
        FCActionInPop fCActionInPop_ = createFCActionInPop();
        fCActionInPop_.setup(stack);
        return (fCActionInPop_);
    }

    /**
     * Creates a <code>FCActionInValue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCActionInValue
     */
    public FCActionInValue createFCActionInValue(RStack stack) {
        FCActionInValue fCActionInValue_ = createFCActionInValue();
        fCActionInValue_.setup(stack);
        return (fCActionInValue_);
    }

    /**
     * Creates a <code>FCActionOutPoke</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCActionOutPoke
     */
    public FCActionOutPoke createFCActionOutPoke(RStack stack) {
        FCActionOutPoke fCActionOutPoke_ = createFCActionOutPoke();
        fCActionOutPoke_.setup(stack);
        return (fCActionOutPoke_);
    }

    /**
     * Creates a <code>FCActionOutPush</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCActionOutPush
     */
    public FCActionOutPush createFCActionOutPush(RStack stack) {
        FCActionOutPush fCActionOutPush_ = createFCActionOutPush();
        fCActionOutPush_.setup(stack);
        return (fCActionOutPush_);
    }

    /**
     * Creates a <code>FCParametersValues</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCParametersValues
     */
    public FCParametersValues createFCParametersValues(RStack stack) {
        FCParametersValues fCParametersValues_ = createFCParametersValues();
        fCParametersValues_.setup(stack);
        return (fCParametersValues_);
    }

    /**
     * Creates a <code>FCModelType</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCModelType
     */
    public FCModelType createFCModelType(RStack stack) {
        FCModelType fCModelType_ = createFCModelType();
        fCModelType_.setup(stack);
        return (fCModelType_);
    }

    /**
     * Creates a <code>FCModelJavaClass</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FCModelJavaClass
     */
    public FCModelJavaClass createFCModelJavaClass(RStack stack) {
        FCModelJavaClass fCModelJavaClass_ = createFCModelJavaClass();
        fCModelJavaClass_.setup(stack);
        return (fCModelJavaClass_);
    }

    /**
     * Creates a <code>FCSlotValue</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCSlotValue
     */
    public FCSlotValue createFCSlotValue(FCSlotValue source) {
        FCSlotValue fCSlotValue_ = createFCSlotValue();
        fCSlotValue_.setup(source);
        return (fCSlotValue_);
    }

    /**
     * Creates a <code>FCActionInPeek</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCActionInPeek
     */
    public FCActionInPeek createFCActionInPeek(FCActionInPeek source) {
        FCActionInPeek fCActionInPeek_ = createFCActionInPeek();
        fCActionInPeek_.setup(source);
        return (fCActionInPeek_);
    }

    /**
     * Creates a <code>FCActionInPop</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCActionInPop
     */
    public FCActionInPop createFCActionInPop(FCActionInPop source) {
        FCActionInPop fCActionInPop_ = createFCActionInPop();
        fCActionInPop_.setup(source);
        return (fCActionInPop_);
    }

    /**
     * Creates a <code>FCActionInValue</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCActionInValue
     */
    public FCActionInValue createFCActionInValue(FCActionInValue source) {
        FCActionInValue fCActionInValue_ = createFCActionInValue();
        fCActionInValue_.setup(source);
        return (fCActionInValue_);
    }

    /**
     * Creates a <code>FCActionOutPoke</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCActionOutPoke
     */
    public FCActionOutPoke createFCActionOutPoke(FCActionOutPoke source) {
        FCActionOutPoke fCActionOutPoke_ = createFCActionOutPoke();
        fCActionOutPoke_.setup(source);
        return (fCActionOutPoke_);
    }

    /**
     * Creates a <code>FCActionOutPush</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCActionOutPush
     */
    public FCActionOutPush createFCActionOutPush(FCActionOutPush source) {
        FCActionOutPush fCActionOutPush_ = createFCActionOutPush();
        fCActionOutPush_.setup(source);
        return (fCActionOutPush_);
    }

    /**
     * Creates a <code>FCParametersValues</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCParametersValues
     */
    public FCParametersValues createFCParametersValues(FCParametersValues source) {
        FCParametersValues fCParametersValues_ = createFCParametersValues();
        fCParametersValues_.setup(source);
        return (fCParametersValues_);
    }

    /**
     * Creates a <code>FCModelType</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCModelType
     */
    public FCModelType createFCModelType(FCModelType source) {
        FCModelType fCModelType_ = createFCModelType();
        fCModelType_.setup(source);
        return (fCModelType_);
    }

    /**
     * Creates a <code>FCModelJavaClass</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCModelJavaClass
     */
    public FCModelJavaClass createFCModelJavaClass(FCModelJavaClass source) {
        FCModelJavaClass fCModelJavaClass_ = createFCModelJavaClass();
        fCModelJavaClass_.setup(source);
        return (fCModelJavaClass_);
    }

    /**
     * Creates a default <code>RString</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return RString
     */
    public RString createRString() {
        return (new RString());
    }

    /**
     * Creates a <code>RString</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return RString
     */
    public RString createRString(RStack stack) {
        return (new RString(stack));
    }
}
