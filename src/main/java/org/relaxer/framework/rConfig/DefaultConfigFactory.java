/*
 * The Relaxer artifact
 * Copyright (c) 2000-2004, ASAMI Tomoharu, All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer. 
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package org.relaxer.framework.rConfig;

/**
 * DefaultConfigFactory is generated by Relaxer based on config.rng.
 *
 * @version config.rng 1.0 (Tue Sep 07 10:36:41 JST 2004)
 * @author  Relaxer 1.1b (http://www.relaxer.org)
 */
public class DefaultConfigFactory extends AbstractConfigFactory {

    /**
     * Gets a Class of <code>FCCopyright</code>.
     *
     * @return Class
     */
    public Class getFCCopyrightClass() {
        return (FCCopyright.class);
    }

    /**
     * Gets a Class of <code>FCVersion</code>.
     *
     * @return Class
     */
    public Class getFCVersionClass() {
        return (FCVersion.class);
    }

    /**
     * Gets a Class of <code>FCUsage</code>.
     *
     * @return Class
     */
    public Class getFCUsageClass() {
        return (FCUsage.class);
    }

    /**
     * Gets a Class of <code>FCSlot</code>.
     *
     * @return Class
     */
    public Class getFCSlotClass() {
        return (FCSlot.class);
    }

    /**
     * Gets a Class of <code>FCActionIn</code>.
     *
     * @return Class
     */
    public Class getFCActionInClass() {
        return (FCActionIn.class);
    }

    /**
     * Gets a Class of <code>FCActionOut</code>.
     *
     * @return Class
     */
    public Class getFCActionOutClass() {
        return (FCActionOut.class);
    }

    /**
     * Gets a Class of <code>FCComponentAction</code>.
     *
     * @return Class
     */
    public Class getFCComponentActionClass() {
        return (FCComponentAction.class);
    }

    /**
     * Gets a Class of <code>FCModelAction</code>.
     *
     * @return Class
     */
    public Class getFCModelActionClass() {
        return (FCModelAction.class);
    }

    /**
     * Gets a Class of <code>FCServiceAction</code>.
     *
     * @return Class
     */
    public Class getFCServiceActionClass() {
        return (FCServiceAction.class);
    }

    /**
     * Gets a Class of <code>FCResourceAction</code>.
     *
     * @return Class
     */
    public Class getFCResourceActionClass() {
        return (FCResourceAction.class);
    }

    /**
     * Gets a Class of <code>FCSystemAction</code>.
     *
     * @return Class
     */
    public Class getFCSystemActionClass() {
        return (FCSystemAction.class);
    }

    /**
     * Gets a Class of <code>FCPrologue</code>.
     *
     * @return Class
     */
    public Class getFCPrologueClass() {
        return (FCPrologue.class);
    }

    /**
     * Gets a Class of <code>FCEpilogue</code>.
     *
     * @return Class
     */
    public Class getFCEpilogueClass() {
        return (FCEpilogue.class);
    }

    /**
     * Gets a Class of <code>FCScenarioAction</code>.
     *
     * @return Class
     */
    public Class getFCScenarioActionClass() {
        return (FCScenarioAction.class);
    }

    /**
     * Gets a Class of <code>FCMoveSceneAction</code>.
     *
     * @return Class
     */
    public Class getFCMoveSceneActionClass() {
        return (FCMoveSceneAction.class);
    }

    /**
     * Gets a Class of <code>FCScenario</code>.
     *
     * @return Class
     */
    public Class getFCScenarioClass() {
        return (FCScenario.class);
    }

    /**
     * Gets a Class of <code>FCScene</code>.
     *
     * @return Class
     */
    public Class getFCSceneClass() {
        return (FCScene.class);
    }

    /**
     * Gets a Class of <code>FCDialog</code>.
     *
     * @return Class
     */
    public Class getFCDialogClass() {
        return (FCDialog.class);
    }

    /**
     * Gets a Class of <code>FCHelp</code>.
     *
     * @return Class
     */
    public Class getFCHelpClass() {
        return (FCHelp.class);
    }

    /**
     * Gets a Class of <code>FCScriptService</code>.
     *
     * @return Class
     */
    public Class getFCScriptServiceClass() {
        return (FCScriptService.class);
    }

    /**
     * Gets a Class of <code>FCComponentService</code>.
     *
     * @return Class
     */
    public Class getFCComponentServiceClass() {
        return (FCComponentService.class);
    }

    /**
     * Gets a Class of <code>FCSystemService</code>.
     *
     * @return Class
     */
    public Class getFCSystemServiceClass() {
        return (FCSystemService.class);
    }

    /**
     * Gets a Class of <code>FCComponentOption</code>.
     *
     * @return Class
     */
    public Class getFCComponentOptionClass() {
        return (FCComponentOption.class);
    }

    /**
     * Gets a Class of <code>FCSystemOption</code>.
     *
     * @return Class
     */
    public Class getFCSystemOptionClass() {
        return (FCSystemOption.class);
    }

    /**
     * Gets a Class of <code>FCOptionRef</code>.
     *
     * @return Class
     */
    public Class getFCOptionRefClass() {
        return (FCOptionRef.class);
    }

    /**
     * Gets a Class of <code>FCOptionSet</code>.
     *
     * @return Class
     */
    public Class getFCOptionSetClass() {
        return (FCOptionSet.class);
    }

    /**
     * Gets a Class of <code>FCAttribute</code>.
     *
     * @return Class
     */
    public Class getFCAttributeClass() {
        return (FCAttribute.class);
    }

    /**
     * Gets a Class of <code>FCOperationIn</code>.
     *
     * @return Class
     */
    public Class getFCOperationInClass() {
        return (FCOperationIn.class);
    }

    /**
     * Gets a Class of <code>FCOperationOut</code>.
     *
     * @return Class
     */
    public Class getFCOperationOutClass() {
        return (FCOperationOut.class);
    }

    /**
     * Gets a Class of <code>FCOperation</code>.
     *
     * @return Class
     */
    public Class getFCOperationClass() {
        return (FCOperation.class);
    }

    /**
     * Gets a Class of <code>FCProvider</code>.
     *
     * @return Class
     */
    public Class getFCProviderClass() {
        return (FCProvider.class);
    }

    /**
     * Gets a Class of <code>FCVariable</code>.
     *
     * @return Class
     */
    public Class getFCVariableClass() {
        return (FCVariable.class);
    }

    /**
     * Gets a Class of <code>FCExtension</code>.
     *
     * @return Class
     */
    public Class getFCExtensionClass() {
        return (FCExtension.class);
    }

    /**
     * Gets a Class of <code>FCProperty</code>.
     *
     * @return Class
     */
    public Class getFCPropertyClass() {
        return (FCProperty.class);
    }

    /**
     * Gets a Class of <code>FCValue</code>.
     *
     * @return Class
     */
    public Class getFCValueClass() {
        return (FCValue.class);
    }

    /**
     * Gets a Class of <code>FCConstructor</code>.
     *
     * @return Class
     */
    public Class getFCConstructorClass() {
        return (FCConstructor.class);
    }

    /**
     * Gets a Class of <code>FCMethod</code>.
     *
     * @return Class
     */
    public Class getFCMethodClass() {
        return (FCMethod.class);
    }

    /**
     * Gets a Class of <code>FCJndiComponentRef</code>.
     *
     * @return Class
     */
    public Class getFCJndiComponentRefClass() {
        return (FCJndiComponentRef.class);
    }

    /**
     * Gets a Class of <code>FCConfigComponentRef</code>.
     *
     * @return Class
     */
    public Class getFCConfigComponentRefClass() {
        return (FCConfigComponentRef.class);
    }

    /**
     * Gets a Class of <code>FCJavaBeansComponentRef</code>.
     *
     * @return Class
     */
    public Class getFCJavaBeansComponentRefClass() {
        return (FCJavaBeansComponentRef.class);
    }

    /**
     * Gets a Class of <code>FCJndiModelRef</code>.
     *
     * @return Class
     */
    public Class getFCJndiModelRefClass() {
        return (FCJndiModelRef.class);
    }

    /**
     * Gets a Class of <code>FCConfigModelRef</code>.
     *
     * @return Class
     */
    public Class getFCConfigModelRefClass() {
        return (FCConfigModelRef.class);
    }

    /**
     * Gets a Class of <code>FCJavaBeansModelRef</code>.
     *
     * @return Class
     */
    public Class getFCJavaBeansModelRefClass() {
        return (FCJavaBeansModelRef.class);
    }

    /**
     * Gets a Class of <code>FCJndiResourceRef</code>.
     *
     * @return Class
     */
    public Class getFCJndiResourceRefClass() {
        return (FCJndiResourceRef.class);
    }

    /**
     * Gets a Class of <code>FCConfigResourceRef</code>.
     *
     * @return Class
     */
    public Class getFCConfigResourceRefClass() {
        return (FCConfigResourceRef.class);
    }

    /**
     * Gets a Class of <code>FCRealization</code>.
     *
     * @return Class
     */
    public Class getFCRealizationClass() {
        return (FCRealization.class);
    }

    /**
     * Gets a Class of <code>FCComponent</code>.
     *
     * @return Class
     */
    public Class getFCComponentClass() {
        return (FCComponent.class);
    }

    /**
     * Gets a Class of <code>FCModelMapper</code>.
     *
     * @return Class
     */
    public Class getFCModelMapperClass() {
        return (FCModelMapper.class);
    }

    /**
     * Gets a Class of <code>FCModelRepository</code>.
     *
     * @return Class
     */
    public Class getFCModelRepositoryClass() {
        return (FCModelRepository.class);
    }

    /**
     * Gets a Class of <code>FCModel</code>.
     *
     * @return Class
     */
    public Class getFCModelClass() {
        return (FCModel.class);
    }

    /**
     * Gets a Class of <code>FCJdbcResource</code>.
     *
     * @return Class
     */
    public Class getFCJdbcResourceClass() {
        return (FCJdbcResource.class);
    }

    /**
     * Gets a Class of <code>FCDatasourceResource</code>.
     *
     * @return Class
     */
    public Class getFCDatasourceResourceClass() {
        return (FCDatasourceResource.class);
    }

    /**
     * Gets a Class of <code>FCJndiResource</code>.
     *
     * @return Class
     */
    public Class getFCJndiResourceClass() {
        return (FCJndiResource.class);
    }

    /**
     * Gets a Class of <code>FCFileResource</code>.
     *
     * @return Class
     */
    public Class getFCFileResourceClass() {
        return (FCFileResource.class);
    }

    /**
     * Gets a Class of <code>FCUrlResource</code>.
     *
     * @return Class
     */
    public Class getFCUrlResourceClass() {
        return (FCUrlResource.class);
    }

    /**
     * Gets a Class of <code>FCVariableResource</code>.
     *
     * @return Class
     */
    public Class getFCVariableResourceClass() {
        return (FCVariableResource.class);
    }

    /**
     * Gets a Class of <code>FCResource</code>.
     *
     * @return Class
     */
    public Class getFCResourceClass() {
        return (FCResource.class);
    }

    /**
     * Gets a Class of <code>FCLogger</code>.
     *
     * @return Class
     */
    public Class getFCLoggerClass() {
        return (FCLogger.class);
    }

    /**
     * Gets a Class of <code>FCFrameworkLog</code>.
     *
     * @return Class
     */
    public Class getFCFrameworkLogClass() {
        return (FCFrameworkLog.class);
    }

    /**
     * Gets a Class of <code>FCConfig</code>.
     *
     * @return Class
     */
    public Class getFCConfigClass() {
        return (FCConfig.class);
    }

    /**
     * Gets a Class of <code>FCPlainScript</code>.
     *
     * @return Class
     */
    public Class getFCPlainScriptClass() {
        return (FCPlainScript.class);
    }

    /**
     * Gets a Class of <code>FCPlainScriptBody</code>.
     *
     * @return Class
     */
    public Class getFCPlainScriptBodyClass() {
        return (FCPlainScriptBody.class);
    }

    /**
     * Gets a Class of <code>FCSlotValue</code>.
     *
     * @return Class
     */
    public Class getFCSlotValueClass() {
        return (FCSlotValue.class);
    }

    /**
     * Gets a Class of <code>FCActionInPeek</code>.
     *
     * @return Class
     */
    public Class getFCActionInPeekClass() {
        return (FCActionInPeek.class);
    }

    /**
     * Gets a Class of <code>FCActionInPop</code>.
     *
     * @return Class
     */
    public Class getFCActionInPopClass() {
        return (FCActionInPop.class);
    }

    /**
     * Gets a Class of <code>FCActionInValue</code>.
     *
     * @return Class
     */
    public Class getFCActionInValueClass() {
        return (FCActionInValue.class);
    }

    /**
     * Gets a Class of <code>FCActionOutPoke</code>.
     *
     * @return Class
     */
    public Class getFCActionOutPokeClass() {
        return (FCActionOutPoke.class);
    }

    /**
     * Gets a Class of <code>FCActionOutPush</code>.
     *
     * @return Class
     */
    public Class getFCActionOutPushClass() {
        return (FCActionOutPush.class);
    }

    /**
     * Gets a Class of <code>FCParametersValues</code>.
     *
     * @return Class
     */
    public Class getFCParametersValuesClass() {
        return (FCParametersValues.class);
    }

    /**
     * Gets a Class of <code>FCModelType</code>.
     *
     * @return Class
     */
    public Class getFCModelTypeClass() {
        return (FCModelType.class);
    }

    /**
     * Gets a Class of <code>FCModelJavaClass</code>.
     *
     * @return Class
     */
    public Class getFCModelJavaClassClass() {
        return (FCModelJavaClass.class);
    }

    /**
     * Creates a default <code>FCCopyright</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCCopyright
     */
    public FCCopyright createFCCopyright() {
        return (new FCCopyright());
    }

    /**
     * Creates a default <code>FCVersion</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCVersion
     */
    public FCVersion createFCVersion() {
        return (new FCVersion());
    }

    /**
     * Creates a default <code>FCUsage</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCUsage
     */
    public FCUsage createFCUsage() {
        return (new FCUsage());
    }

    /**
     * Creates a default <code>FCSlot</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCSlot
     */
    public FCSlot createFCSlot() {
        return (new FCSlot());
    }

    /**
     * Creates a default <code>FCActionIn</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCActionIn
     */
    public FCActionIn createFCActionIn() {
        return (new FCActionIn());
    }

    /**
     * Creates a default <code>FCActionOut</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCActionOut
     */
    public FCActionOut createFCActionOut() {
        return (new FCActionOut());
    }

    /**
     * Creates a default <code>FCComponentAction</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCComponentAction
     */
    public FCComponentAction createFCComponentAction() {
        return (new FCComponentAction());
    }

    /**
     * Creates a default <code>FCModelAction</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCModelAction
     */
    public FCModelAction createFCModelAction() {
        return (new FCModelAction());
    }

    /**
     * Creates a default <code>FCServiceAction</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCServiceAction
     */
    public FCServiceAction createFCServiceAction() {
        return (new FCServiceAction());
    }

    /**
     * Creates a default <code>FCResourceAction</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCResourceAction
     */
    public FCResourceAction createFCResourceAction() {
        return (new FCResourceAction());
    }

    /**
     * Creates a default <code>FCSystemAction</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCSystemAction
     */
    public FCSystemAction createFCSystemAction() {
        return (new FCSystemAction());
    }

    /**
     * Creates a default <code>FCPrologue</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCPrologue
     */
    public FCPrologue createFCPrologue() {
        return (new FCPrologue());
    }

    /**
     * Creates a default <code>FCEpilogue</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCEpilogue
     */
    public FCEpilogue createFCEpilogue() {
        return (new FCEpilogue());
    }

    /**
     * Creates a default <code>FCScenarioAction</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCScenarioAction
     */
    public FCScenarioAction createFCScenarioAction() {
        return (new FCScenarioAction());
    }

    /**
     * Creates a default <code>FCMoveSceneAction</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCMoveSceneAction
     */
    public FCMoveSceneAction createFCMoveSceneAction() {
        return (new FCMoveSceneAction());
    }

    /**
     * Creates a default <code>FCScenario</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCScenario
     */
    public FCScenario createFCScenario() {
        return (new FCScenario());
    }

    /**
     * Creates a default <code>FCScene</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCScene
     */
    public FCScene createFCScene() {
        return (new FCScene());
    }

    /**
     * Creates a default <code>FCDialog</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCDialog
     */
    public FCDialog createFCDialog() {
        return (new FCDialog());
    }

    /**
     * Creates a default <code>FCHelp</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCHelp
     */
    public FCHelp createFCHelp() {
        return (new FCHelp());
    }

    /**
     * Creates a default <code>FCScriptService</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCScriptService
     */
    public FCScriptService createFCScriptService() {
        return (new FCScriptService());
    }

    /**
     * Creates a default <code>FCComponentService</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCComponentService
     */
    public FCComponentService createFCComponentService() {
        return (new FCComponentService());
    }

    /**
     * Creates a default <code>FCSystemService</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCSystemService
     */
    public FCSystemService createFCSystemService() {
        return (new FCSystemService());
    }

    /**
     * Creates a default <code>FCComponentOption</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCComponentOption
     */
    public FCComponentOption createFCComponentOption() {
        return (new FCComponentOption());
    }

    /**
     * Creates a default <code>FCSystemOption</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCSystemOption
     */
    public FCSystemOption createFCSystemOption() {
        return (new FCSystemOption());
    }

    /**
     * Creates a default <code>FCOptionRef</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCOptionRef
     */
    public FCOptionRef createFCOptionRef() {
        return (new FCOptionRef());
    }

    /**
     * Creates a default <code>FCOptionSet</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCOptionSet
     */
    public FCOptionSet createFCOptionSet() {
        return (new FCOptionSet());
    }

    /**
     * Creates a default <code>FCAttribute</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCAttribute
     */
    public FCAttribute createFCAttribute() {
        return (new FCAttribute());
    }

    /**
     * Creates a default <code>FCOperationIn</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCOperationIn
     */
    public FCOperationIn createFCOperationIn() {
        return (new FCOperationIn());
    }

    /**
     * Creates a default <code>FCOperationOut</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCOperationOut
     */
    public FCOperationOut createFCOperationOut() {
        return (new FCOperationOut());
    }

    /**
     * Creates a default <code>FCOperation</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCOperation
     */
    public FCOperation createFCOperation() {
        return (new FCOperation());
    }

    /**
     * Creates a default <code>FCProvider</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCProvider
     */
    public FCProvider createFCProvider() {
        return (new FCProvider());
    }

    /**
     * Creates a default <code>FCVariable</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCVariable
     */
    public FCVariable createFCVariable() {
        return (new FCVariable());
    }

    /**
     * Creates a default <code>FCExtension</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCExtension
     */
    public FCExtension createFCExtension() {
        return (new FCExtension());
    }

    /**
     * Creates a default <code>FCProperty</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCProperty
     */
    public FCProperty createFCProperty() {
        return (new FCProperty());
    }

    /**
     * Creates a default <code>FCValue</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCValue
     */
    public FCValue createFCValue() {
        return (new FCValue());
    }

    /**
     * Creates a default <code>FCConstructor</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCConstructor
     */
    public FCConstructor createFCConstructor() {
        return (new FCConstructor());
    }

    /**
     * Creates a default <code>FCMethod</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCMethod
     */
    public FCMethod createFCMethod() {
        return (new FCMethod());
    }

    /**
     * Creates a default <code>FCJndiComponentRef</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCJndiComponentRef
     */
    public FCJndiComponentRef createFCJndiComponentRef() {
        return (new FCJndiComponentRef());
    }

    /**
     * Creates a default <code>FCConfigComponentRef</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCConfigComponentRef
     */
    public FCConfigComponentRef createFCConfigComponentRef() {
        return (new FCConfigComponentRef());
    }

    /**
     * Creates a default <code>FCJavaBeansComponentRef</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCJavaBeansComponentRef
     */
    public FCJavaBeansComponentRef createFCJavaBeansComponentRef() {
        return (new FCJavaBeansComponentRef());
    }

    /**
     * Creates a default <code>FCJndiModelRef</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCJndiModelRef
     */
    public FCJndiModelRef createFCJndiModelRef() {
        return (new FCJndiModelRef());
    }

    /**
     * Creates a default <code>FCConfigModelRef</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCConfigModelRef
     */
    public FCConfigModelRef createFCConfigModelRef() {
        return (new FCConfigModelRef());
    }

    /**
     * Creates a default <code>FCJavaBeansModelRef</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCJavaBeansModelRef
     */
    public FCJavaBeansModelRef createFCJavaBeansModelRef() {
        return (new FCJavaBeansModelRef());
    }

    /**
     * Creates a default <code>FCJndiResourceRef</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCJndiResourceRef
     */
    public FCJndiResourceRef createFCJndiResourceRef() {
        return (new FCJndiResourceRef());
    }

    /**
     * Creates a default <code>FCConfigResourceRef</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCConfigResourceRef
     */
    public FCConfigResourceRef createFCConfigResourceRef() {
        return (new FCConfigResourceRef());
    }

    /**
     * Creates a default <code>FCRealization</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCRealization
     */
    public FCRealization createFCRealization() {
        return (new FCRealization());
    }

    /**
     * Creates a default <code>FCComponent</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCComponent
     */
    public FCComponent createFCComponent() {
        return (new FCComponent());
    }

    /**
     * Creates a default <code>FCModelMapper</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCModelMapper
     */
    public FCModelMapper createFCModelMapper() {
        return (new FCModelMapper());
    }

    /**
     * Creates a default <code>FCModelRepository</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCModelRepository
     */
    public FCModelRepository createFCModelRepository() {
        return (new FCModelRepository());
    }

    /**
     * Creates a default <code>FCModel</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCModel
     */
    public FCModel createFCModel() {
        return (new FCModel());
    }

    /**
     * Creates a default <code>FCJdbcResource</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCJdbcResource
     */
    public FCJdbcResource createFCJdbcResource() {
        return (new FCJdbcResource());
    }

    /**
     * Creates a default <code>FCDatasourceResource</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCDatasourceResource
     */
    public FCDatasourceResource createFCDatasourceResource() {
        return (new FCDatasourceResource());
    }

    /**
     * Creates a default <code>FCJndiResource</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCJndiResource
     */
    public FCJndiResource createFCJndiResource() {
        return (new FCJndiResource());
    }

    /**
     * Creates a default <code>FCFileResource</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCFileResource
     */
    public FCFileResource createFCFileResource() {
        return (new FCFileResource());
    }

    /**
     * Creates a default <code>FCUrlResource</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCUrlResource
     */
    public FCUrlResource createFCUrlResource() {
        return (new FCUrlResource());
    }

    /**
     * Creates a default <code>FCVariableResource</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCVariableResource
     */
    public FCVariableResource createFCVariableResource() {
        return (new FCVariableResource());
    }

    /**
     * Creates a default <code>FCResource</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCResource
     */
    public FCResource createFCResource() {
        return (new FCResource());
    }

    /**
     * Creates a default <code>FCLogger</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCLogger
     */
    public FCLogger createFCLogger() {
        return (new FCLogger());
    }

    /**
     * Creates a default <code>FCFrameworkLog</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCFrameworkLog
     */
    public FCFrameworkLog createFCFrameworkLog() {
        return (new FCFrameworkLog());
    }

    /**
     * Creates a default <code>FCConfig</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCConfig
     */
    public FCConfig createFCConfig() {
        return (new FCConfig());
    }

    /**
     * Creates a default <code>FCPlainScript</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCPlainScript
     */
    public FCPlainScript createFCPlainScript() {
        return (new FCPlainScript());
    }

    /**
     * Creates a default <code>FCPlainScriptBody</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCPlainScriptBody
     */
    public FCPlainScriptBody createFCPlainScriptBody() {
        return (new FCPlainScriptBody());
    }

    /**
     * Creates a default <code>FCSlotValue</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCSlotValue
     */
    public FCSlotValue createFCSlotValue() {
        return (new FCSlotValue());
    }

    /**
     * Creates a default <code>FCActionInPeek</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCActionInPeek
     */
    public FCActionInPeek createFCActionInPeek() {
        return (new FCActionInPeek());
    }

    /**
     * Creates a default <code>FCActionInPop</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCActionInPop
     */
    public FCActionInPop createFCActionInPop() {
        return (new FCActionInPop());
    }

    /**
     * Creates a default <code>FCActionInValue</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCActionInValue
     */
    public FCActionInValue createFCActionInValue() {
        return (new FCActionInValue());
    }

    /**
     * Creates a default <code>FCActionOutPoke</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCActionOutPoke
     */
    public FCActionOutPoke createFCActionOutPoke() {
        return (new FCActionOutPoke());
    }

    /**
     * Creates a default <code>FCActionOutPush</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCActionOutPush
     */
    public FCActionOutPush createFCActionOutPush() {
        return (new FCActionOutPush());
    }

    /**
     * Creates a default <code>FCParametersValues</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCParametersValues
     */
    public FCParametersValues createFCParametersValues() {
        return (new FCParametersValues());
    }

    /**
     * Creates a default <code>FCModelType</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCModelType
     */
    public FCModelType createFCModelType() {
        return (new FCModelType());
    }

    /**
     * Creates a default <code>FCModelJavaClass</code>.
     * This method is a hook method of the AbstractConfigFactory.
     *
     * @return FCModelJavaClass
     */
    public FCModelJavaClass createFCModelJavaClass() {
        return (new FCModelJavaClass());
    }
}
