/*
 * The Relaxer artifact
 * Copyright (c) 2000-2004, ASAMI Tomoharu, All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer. 
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package org.relaxer.framework.rConfig;

import java.io.*;
import java.net.URL;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * IConfigFactory is generated by Relaxer based on config.rng.
 *
 * @version config.rng 1.0 (Tue Sep 07 10:36:41 JST 2004)
 * @author  Relaxer 1.1b (http://www.relaxer.org)
 */
public interface IConfigFactory {
    /**
     * Gets a Class of <code>FCCopyright</code>.
     *
     * @return Class
     */
    Class getFCCopyrightClass();

    /**
     * Gets a Class of <code>FCVersion</code>.
     *
     * @return Class
     */
    Class getFCVersionClass();

    /**
     * Gets a Class of <code>FCUsage</code>.
     *
     * @return Class
     */
    Class getFCUsageClass();

    /**
     * Gets a Class of <code>FCSlot</code>.
     *
     * @return Class
     */
    Class getFCSlotClass();

    /**
     * Gets a Class of <code>FCActionIn</code>.
     *
     * @return Class
     */
    Class getFCActionInClass();

    /**
     * Gets a Class of <code>FCActionOut</code>.
     *
     * @return Class
     */
    Class getFCActionOutClass();

    /**
     * Gets a Class of <code>FCComponentAction</code>.
     *
     * @return Class
     */
    Class getFCComponentActionClass();

    /**
     * Gets a Class of <code>FCModelAction</code>.
     *
     * @return Class
     */
    Class getFCModelActionClass();

    /**
     * Gets a Class of <code>FCServiceAction</code>.
     *
     * @return Class
     */
    Class getFCServiceActionClass();

    /**
     * Gets a Class of <code>FCResourceAction</code>.
     *
     * @return Class
     */
    Class getFCResourceActionClass();

    /**
     * Gets a Class of <code>FCSystemAction</code>.
     *
     * @return Class
     */
    Class getFCSystemActionClass();

    /**
     * Gets a Class of <code>FCPrologue</code>.
     *
     * @return Class
     */
    Class getFCPrologueClass();

    /**
     * Gets a Class of <code>FCEpilogue</code>.
     *
     * @return Class
     */
    Class getFCEpilogueClass();

    /**
     * Gets a Class of <code>FCScenarioAction</code>.
     *
     * @return Class
     */
    Class getFCScenarioActionClass();

    /**
     * Gets a Class of <code>FCMoveSceneAction</code>.
     *
     * @return Class
     */
    Class getFCMoveSceneActionClass();

    /**
     * Gets a Class of <code>FCScenario</code>.
     *
     * @return Class
     */
    Class getFCScenarioClass();

    /**
     * Gets a Class of <code>FCScene</code>.
     *
     * @return Class
     */
    Class getFCSceneClass();

    /**
     * Gets a Class of <code>FCDialog</code>.
     *
     * @return Class
     */
    Class getFCDialogClass();

    /**
     * Gets a Class of <code>FCHelp</code>.
     *
     * @return Class
     */
    Class getFCHelpClass();

    /**
     * Gets a Class of <code>FCScriptService</code>.
     *
     * @return Class
     */
    Class getFCScriptServiceClass();

    /**
     * Gets a Class of <code>FCComponentService</code>.
     *
     * @return Class
     */
    Class getFCComponentServiceClass();

    /**
     * Gets a Class of <code>FCSystemService</code>.
     *
     * @return Class
     */
    Class getFCSystemServiceClass();

    /**
     * Gets a Class of <code>FCComponentOption</code>.
     *
     * @return Class
     */
    Class getFCComponentOptionClass();

    /**
     * Gets a Class of <code>FCSystemOption</code>.
     *
     * @return Class
     */
    Class getFCSystemOptionClass();

    /**
     * Gets a Class of <code>FCOptionRef</code>.
     *
     * @return Class
     */
    Class getFCOptionRefClass();

    /**
     * Gets a Class of <code>FCOptionSet</code>.
     *
     * @return Class
     */
    Class getFCOptionSetClass();

    /**
     * Gets a Class of <code>FCAttribute</code>.
     *
     * @return Class
     */
    Class getFCAttributeClass();

    /**
     * Gets a Class of <code>FCOperationIn</code>.
     *
     * @return Class
     */
    Class getFCOperationInClass();

    /**
     * Gets a Class of <code>FCOperationOut</code>.
     *
     * @return Class
     */
    Class getFCOperationOutClass();

    /**
     * Gets a Class of <code>FCOperation</code>.
     *
     * @return Class
     */
    Class getFCOperationClass();

    /**
     * Gets a Class of <code>FCProvider</code>.
     *
     * @return Class
     */
    Class getFCProviderClass();

    /**
     * Gets a Class of <code>FCVariable</code>.
     *
     * @return Class
     */
    Class getFCVariableClass();

    /**
     * Gets a Class of <code>FCExtension</code>.
     *
     * @return Class
     */
    Class getFCExtensionClass();

    /**
     * Gets a Class of <code>FCProperty</code>.
     *
     * @return Class
     */
    Class getFCPropertyClass();

    /**
     * Gets a Class of <code>FCValue</code>.
     *
     * @return Class
     */
    Class getFCValueClass();

    /**
     * Gets a Class of <code>FCConstructor</code>.
     *
     * @return Class
     */
    Class getFCConstructorClass();

    /**
     * Gets a Class of <code>FCMethod</code>.
     *
     * @return Class
     */
    Class getFCMethodClass();

    /**
     * Gets a Class of <code>FCJndiComponentRef</code>.
     *
     * @return Class
     */
    Class getFCJndiComponentRefClass();

    /**
     * Gets a Class of <code>FCConfigComponentRef</code>.
     *
     * @return Class
     */
    Class getFCConfigComponentRefClass();

    /**
     * Gets a Class of <code>FCJavaBeansComponentRef</code>.
     *
     * @return Class
     */
    Class getFCJavaBeansComponentRefClass();

    /**
     * Gets a Class of <code>FCJndiModelRef</code>.
     *
     * @return Class
     */
    Class getFCJndiModelRefClass();

    /**
     * Gets a Class of <code>FCConfigModelRef</code>.
     *
     * @return Class
     */
    Class getFCConfigModelRefClass();

    /**
     * Gets a Class of <code>FCJavaBeansModelRef</code>.
     *
     * @return Class
     */
    Class getFCJavaBeansModelRefClass();

    /**
     * Gets a Class of <code>FCJndiResourceRef</code>.
     *
     * @return Class
     */
    Class getFCJndiResourceRefClass();

    /**
     * Gets a Class of <code>FCConfigResourceRef</code>.
     *
     * @return Class
     */
    Class getFCConfigResourceRefClass();

    /**
     * Gets a Class of <code>FCRealization</code>.
     *
     * @return Class
     */
    Class getFCRealizationClass();

    /**
     * Gets a Class of <code>FCComponent</code>.
     *
     * @return Class
     */
    Class getFCComponentClass();

    /**
     * Gets a Class of <code>FCModelMapper</code>.
     *
     * @return Class
     */
    Class getFCModelMapperClass();

    /**
     * Gets a Class of <code>FCModelRepository</code>.
     *
     * @return Class
     */
    Class getFCModelRepositoryClass();

    /**
     * Gets a Class of <code>FCModel</code>.
     *
     * @return Class
     */
    Class getFCModelClass();

    /**
     * Gets a Class of <code>FCJdbcResource</code>.
     *
     * @return Class
     */
    Class getFCJdbcResourceClass();

    /**
     * Gets a Class of <code>FCDatasourceResource</code>.
     *
     * @return Class
     */
    Class getFCDatasourceResourceClass();

    /**
     * Gets a Class of <code>FCJndiResource</code>.
     *
     * @return Class
     */
    Class getFCJndiResourceClass();

    /**
     * Gets a Class of <code>FCFileResource</code>.
     *
     * @return Class
     */
    Class getFCFileResourceClass();

    /**
     * Gets a Class of <code>FCUrlResource</code>.
     *
     * @return Class
     */
    Class getFCUrlResourceClass();

    /**
     * Gets a Class of <code>FCVariableResource</code>.
     *
     * @return Class
     */
    Class getFCVariableResourceClass();

    /**
     * Gets a Class of <code>FCResource</code>.
     *
     * @return Class
     */
    Class getFCResourceClass();

    /**
     * Gets a Class of <code>FCLogger</code>.
     *
     * @return Class
     */
    Class getFCLoggerClass();

    /**
     * Gets a Class of <code>FCFrameworkLog</code>.
     *
     * @return Class
     */
    Class getFCFrameworkLogClass();

    /**
     * Gets a Class of <code>FCConfig</code>.
     *
     * @return Class
     */
    Class getFCConfigClass();

    /**
     * Gets a Class of <code>FCPlainScript</code>.
     *
     * @return Class
     */
    Class getFCPlainScriptClass();

    /**
     * Gets a Class of <code>FCPlainScriptBody</code>.
     *
     * @return Class
     */
    Class getFCPlainScriptBodyClass();

    /**
     * Gets a Class of <code>FCSlotValue</code>.
     *
     * @return Class
     */
    Class getFCSlotValueClass();

    /**
     * Gets a Class of <code>FCActionInPeek</code>.
     *
     * @return Class
     */
    Class getFCActionInPeekClass();

    /**
     * Gets a Class of <code>FCActionInPop</code>.
     *
     * @return Class
     */
    Class getFCActionInPopClass();

    /**
     * Gets a Class of <code>FCActionInValue</code>.
     *
     * @return Class
     */
    Class getFCActionInValueClass();

    /**
     * Gets a Class of <code>FCActionOutPoke</code>.
     *
     * @return Class
     */
    Class getFCActionOutPokeClass();

    /**
     * Gets a Class of <code>FCActionOutPush</code>.
     *
     * @return Class
     */
    Class getFCActionOutPushClass();

    /**
     * Gets a Class of <code>FCParametersValues</code>.
     *
     * @return Class
     */
    Class getFCParametersValuesClass();

    /**
     * Gets a Class of <code>FCModelType</code>.
     *
     * @return Class
     */
    Class getFCModelTypeClass();

    /**
     * Gets a Class of <code>FCModelJavaClass</code>.
     *
     * @return Class
     */
    Class getFCModelJavaClassClass();

    /**
     * Sets a <b>errorHandler</b>.
     *
     * @param errorHandler
     */
    void setErrorHandler(org.xml.sax.ErrorHandler errorHandler);

    /**
     * Gets a <b>errorHandler</b>.
     *
     * @return org.xml.sax.ErrorHandler
     */
    org.xml.sax.ErrorHandler getErrorHandler();

    /**
     * Sets a <b>entityResolver</b>.
     *
     * @param entityResolver
     */
    void setEntityResolver(org.xml.sax.EntityResolver entityResolver);

    /**
     * Gets a <b>entityResolver</b>.
     *
     * @return org.xml.sax.EntityResolver
     */
    org.xml.sax.EntityResolver getEntityResolver();

    /**
     * Sets a <b>verifier</b>.
     *
     * @param verifier
     */
    void setVerifier(org.iso_relax.verifier.Verifier verifier);

    /**
     * Gets a <b>verifier</b>.
     *
     * @return org.iso_relax.verifier.Verifier
     */
    org.iso_relax.verifier.Verifier getVerifier();

    /**
     * Sets a <b>baseUri</b>.
     *
     * @param baseUri
     */
    void setBaseUri(String baseUri);

    /**
     * Gets a <b>baseUri</b>.
     *
     * @return String
     */
    String getBaseUri();

    /**
     * Creates a <code>Object</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    Object create(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>Object</code> by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    Object create(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>Object</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    Object create(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>Object</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    Object create(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>Object</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    Object create(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>Object</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    Object create(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>Object</code> by the Object <code>source</code>.
     *
     * @param source
     * @return Object
     */
    Object create(Object source);

    /**
     * Creates a <code>Object</code> by the Document <code>dom</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    Object create(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>Object</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return Object
     */
    Object create(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCCopyright</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    FCCopyright createFCCopyright(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVersion</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    FCVersion createFCVersion(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUsage</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    FCUsage createFCUsage(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSlot</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    FCSlot createFCSlot(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionIn</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    FCActionIn createFCActionIn(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionOut</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    FCActionOut createFCActionOut(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentAction</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    FCComponentAction createFCComponentAction(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelAction</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    FCModelAction createFCModelAction(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCServiceAction</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    FCServiceAction createFCServiceAction(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResourceAction</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    FCResourceAction createFCResourceAction(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemAction</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    FCSystemAction createFCSystemAction(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPrologue</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    FCPrologue createFCPrologue(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCEpilogue</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    FCEpilogue createFCEpilogue(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenarioAction</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    FCScenarioAction createFCScenarioAction(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMoveSceneAction</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    FCMoveSceneAction createFCMoveSceneAction(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenario</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    FCScenario createFCScenario(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScene</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    FCScene createFCScene(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDialog</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    FCDialog createFCDialog(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCHelp</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    FCHelp createFCHelp(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScriptService</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    FCScriptService createFCScriptService(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentService</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    FCComponentService createFCComponentService(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemService</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    FCSystemService createFCSystemService(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentOption</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    FCComponentOption createFCComponentOption(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemOption</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    FCSystemOption createFCSystemOption(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionRef</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    FCOptionRef createFCOptionRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionSet</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    FCOptionSet createFCOptionSet(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCAttribute</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    FCAttribute createFCAttribute(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationIn</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    FCOperationIn createFCOperationIn(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationOut</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    FCOperationOut createFCOperationOut(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperation</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    FCOperation createFCOperation(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProvider</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    FCProvider createFCProvider(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariable</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    FCVariable createFCVariable(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCExtension</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    FCExtension createFCExtension(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProperty</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    FCProperty createFCProperty(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCValue</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    FCValue createFCValue(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConstructor</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    FCConstructor createFCConstructor(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMethod</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    FCMethod createFCMethod(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiComponentRef</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    FCJndiComponentRef createFCJndiComponentRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigComponentRef</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    FCConfigComponentRef createFCConfigComponentRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    FCJavaBeansComponentRef createFCJavaBeansComponentRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiModelRef</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    FCJndiModelRef createFCJndiModelRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigModelRef</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    FCConfigModelRef createFCConfigModelRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    FCJavaBeansModelRef createFCJavaBeansModelRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResourceRef</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    FCJndiResourceRef createFCJndiResourceRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigResourceRef</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    FCConfigResourceRef createFCConfigResourceRef(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCRealization</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    FCRealization createFCRealization(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponent</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    FCComponent createFCComponent(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelMapper</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    FCModelMapper createFCModelMapper(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelRepository</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    FCModelRepository createFCModelRepository(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModel</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    FCModel createFCModel(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJdbcResource</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    FCJdbcResource createFCJdbcResource(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDatasourceResource</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    FCDatasourceResource createFCDatasourceResource(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResource</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    FCJndiResource createFCJndiResource(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFileResource</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    FCFileResource createFCFileResource(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUrlResource</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    FCUrlResource createFCUrlResource(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariableResource</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    FCVariableResource createFCVariableResource(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResource</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    FCResource createFCResource(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCLogger</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    FCLogger createFCLogger(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFrameworkLog</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    FCFrameworkLog createFCFrameworkLog(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfig</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    FCConfig createFCConfig(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScript</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    FCPlainScript createFCPlainScript(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScriptBody</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    FCPlainScriptBody createFCPlainScriptBody(File file) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCCopyright</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    FCCopyright createFCCopyright(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVersion</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    FCVersion createFCVersion(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUsage</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    FCUsage createFCUsage(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSlot</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    FCSlot createFCSlot(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionIn</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    FCActionIn createFCActionIn(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionOut</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    FCActionOut createFCActionOut(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentAction</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    FCComponentAction createFCComponentAction(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelAction</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    FCModelAction createFCModelAction(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCServiceAction</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    FCServiceAction createFCServiceAction(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResourceAction</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    FCResourceAction createFCResourceAction(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemAction</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    FCSystemAction createFCSystemAction(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPrologue</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    FCPrologue createFCPrologue(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCEpilogue</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    FCEpilogue createFCEpilogue(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenarioAction</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    FCScenarioAction createFCScenarioAction(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMoveSceneAction</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    FCMoveSceneAction createFCMoveSceneAction(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenario</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    FCScenario createFCScenario(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScene</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    FCScene createFCScene(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDialog</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    FCDialog createFCDialog(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCHelp</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    FCHelp createFCHelp(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScriptService</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    FCScriptService createFCScriptService(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentService</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    FCComponentService createFCComponentService(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemService</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    FCSystemService createFCSystemService(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentOption</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    FCComponentOption createFCComponentOption(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemOption</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    FCSystemOption createFCSystemOption(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionRef</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    FCOptionRef createFCOptionRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionSet</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    FCOptionSet createFCOptionSet(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCAttribute</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    FCAttribute createFCAttribute(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationIn</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    FCOperationIn createFCOperationIn(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationOut</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    FCOperationOut createFCOperationOut(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperation</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    FCOperation createFCOperation(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProvider</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    FCProvider createFCProvider(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariable</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    FCVariable createFCVariable(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCExtension</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    FCExtension createFCExtension(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProperty</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    FCProperty createFCProperty(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCValue</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    FCValue createFCValue(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConstructor</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    FCConstructor createFCConstructor(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMethod</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    FCMethod createFCMethod(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiComponentRef</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    FCJndiComponentRef createFCJndiComponentRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigComponentRef</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    FCConfigComponentRef createFCConfigComponentRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansComponentRef</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    FCJavaBeansComponentRef createFCJavaBeansComponentRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiModelRef</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    FCJndiModelRef createFCJndiModelRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigModelRef</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    FCConfigModelRef createFCConfigModelRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansModelRef</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    FCJavaBeansModelRef createFCJavaBeansModelRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResourceRef</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    FCJndiResourceRef createFCJndiResourceRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigResourceRef</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    FCConfigResourceRef createFCConfigResourceRef(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCRealization</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    FCRealization createFCRealization(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponent</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    FCComponent createFCComponent(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelMapper</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    FCModelMapper createFCModelMapper(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelRepository</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    FCModelRepository createFCModelRepository(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModel</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    FCModel createFCModel(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJdbcResource</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    FCJdbcResource createFCJdbcResource(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDatasourceResource</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    FCDatasourceResource createFCDatasourceResource(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResource</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    FCJndiResource createFCJndiResource(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFileResource</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    FCFileResource createFCFileResource(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUrlResource</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    FCUrlResource createFCUrlResource(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariableResource</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    FCVariableResource createFCVariableResource(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResource</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    FCResource createFCResource(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCLogger</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    FCLogger createFCLogger(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFrameworkLog</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    FCFrameworkLog createFCFrameworkLog(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfig</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    FCConfig createFCConfig(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScript</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    FCPlainScript createFCPlainScript(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScriptBody</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    FCPlainScriptBody createFCPlainScriptBody(String uri) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCCopyright</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    FCCopyright createFCCopyright(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVersion</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    FCVersion createFCVersion(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUsage</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    FCUsage createFCUsage(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSlot</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    FCSlot createFCSlot(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionIn</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    FCActionIn createFCActionIn(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionOut</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    FCActionOut createFCActionOut(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentAction</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    FCComponentAction createFCComponentAction(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelAction</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    FCModelAction createFCModelAction(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCServiceAction</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    FCServiceAction createFCServiceAction(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResourceAction</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    FCResourceAction createFCResourceAction(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemAction</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    FCSystemAction createFCSystemAction(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPrologue</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    FCPrologue createFCPrologue(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCEpilogue</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    FCEpilogue createFCEpilogue(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenarioAction</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    FCScenarioAction createFCScenarioAction(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMoveSceneAction</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    FCMoveSceneAction createFCMoveSceneAction(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenario</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    FCScenario createFCScenario(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScene</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    FCScene createFCScene(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDialog</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    FCDialog createFCDialog(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCHelp</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    FCHelp createFCHelp(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScriptService</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    FCScriptService createFCScriptService(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentService</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    FCComponentService createFCComponentService(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemService</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    FCSystemService createFCSystemService(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentOption</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    FCComponentOption createFCComponentOption(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemOption</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    FCSystemOption createFCSystemOption(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionRef</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    FCOptionRef createFCOptionRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionSet</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    FCOptionSet createFCOptionSet(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCAttribute</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    FCAttribute createFCAttribute(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationIn</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    FCOperationIn createFCOperationIn(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationOut</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    FCOperationOut createFCOperationOut(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperation</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    FCOperation createFCOperation(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProvider</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    FCProvider createFCProvider(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariable</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    FCVariable createFCVariable(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCExtension</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    FCExtension createFCExtension(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProperty</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    FCProperty createFCProperty(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCValue</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    FCValue createFCValue(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConstructor</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    FCConstructor createFCConstructor(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMethod</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    FCMethod createFCMethod(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiComponentRef</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    FCJndiComponentRef createFCJndiComponentRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigComponentRef</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    FCConfigComponentRef createFCConfigComponentRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    FCJavaBeansComponentRef createFCJavaBeansComponentRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiModelRef</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    FCJndiModelRef createFCJndiModelRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigModelRef</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    FCConfigModelRef createFCConfigModelRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    FCJavaBeansModelRef createFCJavaBeansModelRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResourceRef</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    FCJndiResourceRef createFCJndiResourceRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigResourceRef</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    FCConfigResourceRef createFCConfigResourceRef(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCRealization</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    FCRealization createFCRealization(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponent</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    FCComponent createFCComponent(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelMapper</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    FCModelMapper createFCModelMapper(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelRepository</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    FCModelRepository createFCModelRepository(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModel</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    FCModel createFCModel(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJdbcResource</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    FCJdbcResource createFCJdbcResource(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDatasourceResource</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    FCDatasourceResource createFCDatasourceResource(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResource</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    FCJndiResource createFCJndiResource(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFileResource</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    FCFileResource createFCFileResource(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUrlResource</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    FCUrlResource createFCUrlResource(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariableResource</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    FCVariableResource createFCVariableResource(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResource</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    FCResource createFCResource(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCLogger</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    FCLogger createFCLogger(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFrameworkLog</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    FCFrameworkLog createFCFrameworkLog(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfig</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    FCConfig createFCConfig(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScript</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    FCPlainScript createFCPlainScript(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScriptBody</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    FCPlainScriptBody createFCPlainScriptBody(URL url) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCCopyright</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    FCCopyright createFCCopyright(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVersion</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    FCVersion createFCVersion(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUsage</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    FCUsage createFCUsage(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSlot</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    FCSlot createFCSlot(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionIn</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    FCActionIn createFCActionIn(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionOut</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    FCActionOut createFCActionOut(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentAction</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    FCComponentAction createFCComponentAction(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelAction</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    FCModelAction createFCModelAction(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCServiceAction</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    FCServiceAction createFCServiceAction(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResourceAction</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    FCResourceAction createFCResourceAction(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemAction</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    FCSystemAction createFCSystemAction(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPrologue</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    FCPrologue createFCPrologue(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCEpilogue</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    FCEpilogue createFCEpilogue(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenarioAction</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    FCScenarioAction createFCScenarioAction(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMoveSceneAction</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    FCMoveSceneAction createFCMoveSceneAction(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenario</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    FCScenario createFCScenario(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScene</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    FCScene createFCScene(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDialog</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    FCDialog createFCDialog(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCHelp</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    FCHelp createFCHelp(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScriptService</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    FCScriptService createFCScriptService(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentService</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    FCComponentService createFCComponentService(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemService</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    FCSystemService createFCSystemService(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentOption</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    FCComponentOption createFCComponentOption(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemOption</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    FCSystemOption createFCSystemOption(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionRef</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    FCOptionRef createFCOptionRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionSet</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    FCOptionSet createFCOptionSet(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCAttribute</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    FCAttribute createFCAttribute(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationIn</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    FCOperationIn createFCOperationIn(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationOut</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    FCOperationOut createFCOperationOut(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperation</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    FCOperation createFCOperation(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProvider</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    FCProvider createFCProvider(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariable</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    FCVariable createFCVariable(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCExtension</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    FCExtension createFCExtension(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProperty</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    FCProperty createFCProperty(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCValue</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    FCValue createFCValue(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConstructor</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    FCConstructor createFCConstructor(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMethod</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    FCMethod createFCMethod(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiComponentRef</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    FCJndiComponentRef createFCJndiComponentRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigComponentRef</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    FCConfigComponentRef createFCConfigComponentRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    FCJavaBeansComponentRef createFCJavaBeansComponentRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiModelRef</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    FCJndiModelRef createFCJndiModelRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigModelRef</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    FCConfigModelRef createFCConfigModelRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    FCJavaBeansModelRef createFCJavaBeansModelRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResourceRef</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    FCJndiResourceRef createFCJndiResourceRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigResourceRef</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    FCConfigResourceRef createFCConfigResourceRef(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCRealization</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    FCRealization createFCRealization(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponent</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    FCComponent createFCComponent(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelMapper</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    FCModelMapper createFCModelMapper(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelRepository</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    FCModelRepository createFCModelRepository(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModel</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    FCModel createFCModel(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJdbcResource</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    FCJdbcResource createFCJdbcResource(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDatasourceResource</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    FCDatasourceResource createFCDatasourceResource(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResource</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    FCJndiResource createFCJndiResource(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFileResource</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    FCFileResource createFCFileResource(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUrlResource</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    FCUrlResource createFCUrlResource(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariableResource</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    FCVariableResource createFCVariableResource(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResource</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    FCResource createFCResource(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCLogger</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    FCLogger createFCLogger(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFrameworkLog</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    FCFrameworkLog createFCFrameworkLog(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfig</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    FCConfig createFCConfig(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScript</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    FCPlainScript createFCPlainScript(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScriptBody</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    FCPlainScriptBody createFCPlainScriptBody(InputStream in) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCCopyright</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    FCCopyright createFCCopyright(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVersion</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    FCVersion createFCVersion(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUsage</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    FCUsage createFCUsage(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSlot</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    FCSlot createFCSlot(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionIn</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    FCActionIn createFCActionIn(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionOut</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    FCActionOut createFCActionOut(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentAction</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    FCComponentAction createFCComponentAction(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelAction</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    FCModelAction createFCModelAction(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCServiceAction</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    FCServiceAction createFCServiceAction(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResourceAction</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    FCResourceAction createFCResourceAction(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemAction</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    FCSystemAction createFCSystemAction(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPrologue</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    FCPrologue createFCPrologue(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCEpilogue</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    FCEpilogue createFCEpilogue(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenarioAction</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    FCScenarioAction createFCScenarioAction(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMoveSceneAction</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    FCMoveSceneAction createFCMoveSceneAction(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenario</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    FCScenario createFCScenario(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScene</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    FCScene createFCScene(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDialog</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    FCDialog createFCDialog(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCHelp</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    FCHelp createFCHelp(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScriptService</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    FCScriptService createFCScriptService(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentService</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    FCComponentService createFCComponentService(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemService</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    FCSystemService createFCSystemService(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentOption</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    FCComponentOption createFCComponentOption(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemOption</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    FCSystemOption createFCSystemOption(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionRef</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    FCOptionRef createFCOptionRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionSet</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    FCOptionSet createFCOptionSet(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCAttribute</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    FCAttribute createFCAttribute(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationIn</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    FCOperationIn createFCOperationIn(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationOut</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    FCOperationOut createFCOperationOut(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperation</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    FCOperation createFCOperation(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProvider</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    FCProvider createFCProvider(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariable</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    FCVariable createFCVariable(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCExtension</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    FCExtension createFCExtension(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProperty</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    FCProperty createFCProperty(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCValue</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    FCValue createFCValue(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConstructor</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    FCConstructor createFCConstructor(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMethod</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    FCMethod createFCMethod(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiComponentRef</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    FCJndiComponentRef createFCJndiComponentRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigComponentRef</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    FCConfigComponentRef createFCConfigComponentRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    FCJavaBeansComponentRef createFCJavaBeansComponentRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiModelRef</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    FCJndiModelRef createFCJndiModelRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigModelRef</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    FCConfigModelRef createFCConfigModelRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    FCJavaBeansModelRef createFCJavaBeansModelRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResourceRef</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    FCJndiResourceRef createFCJndiResourceRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigResourceRef</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    FCConfigResourceRef createFCConfigResourceRef(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCRealization</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    FCRealization createFCRealization(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponent</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    FCComponent createFCComponent(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelMapper</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    FCModelMapper createFCModelMapper(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelRepository</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    FCModelRepository createFCModelRepository(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModel</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    FCModel createFCModel(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJdbcResource</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    FCJdbcResource createFCJdbcResource(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDatasourceResource</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    FCDatasourceResource createFCDatasourceResource(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResource</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    FCJndiResource createFCJndiResource(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFileResource</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    FCFileResource createFCFileResource(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUrlResource</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    FCUrlResource createFCUrlResource(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariableResource</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    FCVariableResource createFCVariableResource(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResource</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    FCResource createFCResource(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCLogger</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    FCLogger createFCLogger(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFrameworkLog</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    FCFrameworkLog createFCFrameworkLog(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfig</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    FCConfig createFCConfig(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScript</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    FCPlainScript createFCPlainScript(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScriptBody</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    FCPlainScriptBody createFCPlainScriptBody(InputSource is) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCCopyright</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    FCCopyright createFCCopyright(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVersion</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    FCVersion createFCVersion(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUsage</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    FCUsage createFCUsage(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSlot</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    FCSlot createFCSlot(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionIn</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    FCActionIn createFCActionIn(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionOut</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    FCActionOut createFCActionOut(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentAction</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    FCComponentAction createFCComponentAction(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelAction</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    FCModelAction createFCModelAction(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCServiceAction</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    FCServiceAction createFCServiceAction(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResourceAction</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    FCResourceAction createFCResourceAction(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemAction</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    FCSystemAction createFCSystemAction(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPrologue</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    FCPrologue createFCPrologue(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCEpilogue</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    FCEpilogue createFCEpilogue(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenarioAction</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    FCScenarioAction createFCScenarioAction(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMoveSceneAction</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    FCMoveSceneAction createFCMoveSceneAction(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenario</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    FCScenario createFCScenario(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScene</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    FCScene createFCScene(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDialog</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    FCDialog createFCDialog(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCHelp</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    FCHelp createFCHelp(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScriptService</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    FCScriptService createFCScriptService(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentService</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    FCComponentService createFCComponentService(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemService</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    FCSystemService createFCSystemService(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentOption</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    FCComponentOption createFCComponentOption(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemOption</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    FCSystemOption createFCSystemOption(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionRef</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    FCOptionRef createFCOptionRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionSet</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    FCOptionSet createFCOptionSet(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCAttribute</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    FCAttribute createFCAttribute(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationIn</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    FCOperationIn createFCOperationIn(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationOut</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    FCOperationOut createFCOperationOut(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperation</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    FCOperation createFCOperation(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProvider</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    FCProvider createFCProvider(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariable</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    FCVariable createFCVariable(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCExtension</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    FCExtension createFCExtension(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProperty</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    FCProperty createFCProperty(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCValue</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    FCValue createFCValue(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConstructor</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    FCConstructor createFCConstructor(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMethod</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    FCMethod createFCMethod(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiComponentRef</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    FCJndiComponentRef createFCJndiComponentRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigComponentRef</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    FCConfigComponentRef createFCConfigComponentRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    FCJavaBeansComponentRef createFCJavaBeansComponentRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiModelRef</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    FCJndiModelRef createFCJndiModelRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigModelRef</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    FCConfigModelRef createFCConfigModelRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    FCJavaBeansModelRef createFCJavaBeansModelRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResourceRef</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    FCJndiResourceRef createFCJndiResourceRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigResourceRef</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    FCConfigResourceRef createFCConfigResourceRef(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCRealization</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    FCRealization createFCRealization(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponent</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    FCComponent createFCComponent(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelMapper</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    FCModelMapper createFCModelMapper(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelRepository</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    FCModelRepository createFCModelRepository(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModel</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    FCModel createFCModel(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJdbcResource</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    FCJdbcResource createFCJdbcResource(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDatasourceResource</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    FCDatasourceResource createFCDatasourceResource(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResource</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    FCJndiResource createFCJndiResource(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFileResource</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    FCFileResource createFCFileResource(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUrlResource</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    FCUrlResource createFCUrlResource(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariableResource</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    FCVariableResource createFCVariableResource(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResource</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    FCResource createFCResource(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCLogger</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    FCLogger createFCLogger(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFrameworkLog</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    FCFrameworkLog createFCFrameworkLog(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfig</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    FCConfig createFCConfig(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScript</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    FCPlainScript createFCPlainScript(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScriptBody</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    FCPlainScriptBody createFCPlainScriptBody(Reader reader) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCCopyright</code>.
     *
     * @return FCCopyright
     */
    FCCopyright createFCCopyright();

    /**
     * Creates a <code>FCVersion</code>.
     *
     * @return FCVersion
     */
    FCVersion createFCVersion();

    /**
     * Creates a <code>FCUsage</code>.
     *
     * @return FCUsage
     */
    FCUsage createFCUsage();

    /**
     * Creates a <code>FCSlot</code>.
     *
     * @return FCSlot
     */
    FCSlot createFCSlot();

    /**
     * Creates a <code>FCActionIn</code>.
     *
     * @return FCActionIn
     */
    FCActionIn createFCActionIn();

    /**
     * Creates a <code>FCActionOut</code>.
     *
     * @return FCActionOut
     */
    FCActionOut createFCActionOut();

    /**
     * Creates a <code>FCComponentAction</code>.
     *
     * @return FCComponentAction
     */
    FCComponentAction createFCComponentAction();

    /**
     * Creates a <code>FCModelAction</code>.
     *
     * @return FCModelAction
     */
    FCModelAction createFCModelAction();

    /**
     * Creates a <code>FCServiceAction</code>.
     *
     * @return FCServiceAction
     */
    FCServiceAction createFCServiceAction();

    /**
     * Creates a <code>FCResourceAction</code>.
     *
     * @return FCResourceAction
     */
    FCResourceAction createFCResourceAction();

    /**
     * Creates a <code>FCSystemAction</code>.
     *
     * @return FCSystemAction
     */
    FCSystemAction createFCSystemAction();

    /**
     * Creates a <code>FCPrologue</code>.
     *
     * @return FCPrologue
     */
    FCPrologue createFCPrologue();

    /**
     * Creates a <code>FCEpilogue</code>.
     *
     * @return FCEpilogue
     */
    FCEpilogue createFCEpilogue();

    /**
     * Creates a <code>FCScenarioAction</code>.
     *
     * @return FCScenarioAction
     */
    FCScenarioAction createFCScenarioAction();

    /**
     * Creates a <code>FCMoveSceneAction</code>.
     *
     * @return FCMoveSceneAction
     */
    FCMoveSceneAction createFCMoveSceneAction();

    /**
     * Creates a <code>FCScenario</code>.
     *
     * @return FCScenario
     */
    FCScenario createFCScenario();

    /**
     * Creates a <code>FCScene</code>.
     *
     * @return FCScene
     */
    FCScene createFCScene();

    /**
     * Creates a <code>FCDialog</code>.
     *
     * @return FCDialog
     */
    FCDialog createFCDialog();

    /**
     * Creates a <code>FCHelp</code>.
     *
     * @return FCHelp
     */
    FCHelp createFCHelp();

    /**
     * Creates a <code>FCScriptService</code>.
     *
     * @return FCScriptService
     */
    FCScriptService createFCScriptService();

    /**
     * Creates a <code>FCComponentService</code>.
     *
     * @return FCComponentService
     */
    FCComponentService createFCComponentService();

    /**
     * Creates a <code>FCSystemService</code>.
     *
     * @return FCSystemService
     */
    FCSystemService createFCSystemService();

    /**
     * Creates a <code>FCComponentOption</code>.
     *
     * @return FCComponentOption
     */
    FCComponentOption createFCComponentOption();

    /**
     * Creates a <code>FCSystemOption</code>.
     *
     * @return FCSystemOption
     */
    FCSystemOption createFCSystemOption();

    /**
     * Creates a <code>FCOptionRef</code>.
     *
     * @return FCOptionRef
     */
    FCOptionRef createFCOptionRef();

    /**
     * Creates a <code>FCOptionSet</code>.
     *
     * @return FCOptionSet
     */
    FCOptionSet createFCOptionSet();

    /**
     * Creates a <code>FCAttribute</code>.
     *
     * @return FCAttribute
     */
    FCAttribute createFCAttribute();

    /**
     * Creates a <code>FCOperationIn</code>.
     *
     * @return FCOperationIn
     */
    FCOperationIn createFCOperationIn();

    /**
     * Creates a <code>FCOperationOut</code>.
     *
     * @return FCOperationOut
     */
    FCOperationOut createFCOperationOut();

    /**
     * Creates a <code>FCOperation</code>.
     *
     * @return FCOperation
     */
    FCOperation createFCOperation();

    /**
     * Creates a <code>FCProvider</code>.
     *
     * @return FCProvider
     */
    FCProvider createFCProvider();

    /**
     * Creates a <code>FCVariable</code>.
     *
     * @return FCVariable
     */
    FCVariable createFCVariable();

    /**
     * Creates a <code>FCExtension</code>.
     *
     * @return FCExtension
     */
    FCExtension createFCExtension();

    /**
     * Creates a <code>FCProperty</code>.
     *
     * @return FCProperty
     */
    FCProperty createFCProperty();

    /**
     * Creates a <code>FCValue</code>.
     *
     * @return FCValue
     */
    FCValue createFCValue();

    /**
     * Creates a <code>FCConstructor</code>.
     *
     * @return FCConstructor
     */
    FCConstructor createFCConstructor();

    /**
     * Creates a <code>FCMethod</code>.
     *
     * @return FCMethod
     */
    FCMethod createFCMethod();

    /**
     * Creates a <code>FCJndiComponentRef</code>.
     *
     * @return FCJndiComponentRef
     */
    FCJndiComponentRef createFCJndiComponentRef();

    /**
     * Creates a <code>FCConfigComponentRef</code>.
     *
     * @return FCConfigComponentRef
     */
    FCConfigComponentRef createFCConfigComponentRef();

    /**
     * Creates a <code>FCJavaBeansComponentRef</code>.
     *
     * @return FCJavaBeansComponentRef
     */
    FCJavaBeansComponentRef createFCJavaBeansComponentRef();

    /**
     * Creates a <code>FCJndiModelRef</code>.
     *
     * @return FCJndiModelRef
     */
    FCJndiModelRef createFCJndiModelRef();

    /**
     * Creates a <code>FCConfigModelRef</code>.
     *
     * @return FCConfigModelRef
     */
    FCConfigModelRef createFCConfigModelRef();

    /**
     * Creates a <code>FCJavaBeansModelRef</code>.
     *
     * @return FCJavaBeansModelRef
     */
    FCJavaBeansModelRef createFCJavaBeansModelRef();

    /**
     * Creates a <code>FCJndiResourceRef</code>.
     *
     * @return FCJndiResourceRef
     */
    FCJndiResourceRef createFCJndiResourceRef();

    /**
     * Creates a <code>FCConfigResourceRef</code>.
     *
     * @return FCConfigResourceRef
     */
    FCConfigResourceRef createFCConfigResourceRef();

    /**
     * Creates a <code>FCRealization</code>.
     *
     * @return FCRealization
     */
    FCRealization createFCRealization();

    /**
     * Creates a <code>FCComponent</code>.
     *
     * @return FCComponent
     */
    FCComponent createFCComponent();

    /**
     * Creates a <code>FCModelMapper</code>.
     *
     * @return FCModelMapper
     */
    FCModelMapper createFCModelMapper();

    /**
     * Creates a <code>FCModelRepository</code>.
     *
     * @return FCModelRepository
     */
    FCModelRepository createFCModelRepository();

    /**
     * Creates a <code>FCModel</code>.
     *
     * @return FCModel
     */
    FCModel createFCModel();

    /**
     * Creates a <code>FCJdbcResource</code>.
     *
     * @return FCJdbcResource
     */
    FCJdbcResource createFCJdbcResource();

    /**
     * Creates a <code>FCDatasourceResource</code>.
     *
     * @return FCDatasourceResource
     */
    FCDatasourceResource createFCDatasourceResource();

    /**
     * Creates a <code>FCJndiResource</code>.
     *
     * @return FCJndiResource
     */
    FCJndiResource createFCJndiResource();

    /**
     * Creates a <code>FCFileResource</code>.
     *
     * @return FCFileResource
     */
    FCFileResource createFCFileResource();

    /**
     * Creates a <code>FCUrlResource</code>.
     *
     * @return FCUrlResource
     */
    FCUrlResource createFCUrlResource();

    /**
     * Creates a <code>FCVariableResource</code>.
     *
     * @return FCVariableResource
     */
    FCVariableResource createFCVariableResource();

    /**
     * Creates a <code>FCResource</code>.
     *
     * @return FCResource
     */
    FCResource createFCResource();

    /**
     * Creates a <code>FCLogger</code>.
     *
     * @return FCLogger
     */
    FCLogger createFCLogger();

    /**
     * Creates a <code>FCFrameworkLog</code>.
     *
     * @return FCFrameworkLog
     */
    FCFrameworkLog createFCFrameworkLog();

    /**
     * Creates a <code>FCConfig</code>.
     *
     * @return FCConfig
     */
    FCConfig createFCConfig();

    /**
     * Creates a <code>FCPlainScript</code>.
     *
     * @return FCPlainScript
     */
    FCPlainScript createFCPlainScript();

    /**
     * Creates a <code>FCPlainScriptBody</code>.
     *
     * @return FCPlainScriptBody
     */
    FCPlainScriptBody createFCPlainScriptBody();

    /**
     * Creates a <code>FCCopyright</code> by the FCCopyright <code>source</code>.
     *
     * @param source
     * @return FCCopyright
     */
    FCCopyright createFCCopyright(FCCopyright source);

    /**
     * Creates a <code>FCVersion</code> by the FCVersion <code>source</code>.
     *
     * @param source
     * @return FCVersion
     */
    FCVersion createFCVersion(FCVersion source);

    /**
     * Creates a <code>FCUsage</code> by the FCUsage <code>source</code>.
     *
     * @param source
     * @return FCUsage
     */
    FCUsage createFCUsage(FCUsage source);

    /**
     * Creates a <code>FCSlot</code> by the FCSlot <code>source</code>.
     *
     * @param source
     * @return FCSlot
     */
    FCSlot createFCSlot(FCSlot source);

    /**
     * Creates a <code>FCActionIn</code> by the FCActionIn <code>source</code>.
     *
     * @param source
     * @return FCActionIn
     */
    FCActionIn createFCActionIn(FCActionIn source);

    /**
     * Creates a <code>FCActionOut</code> by the FCActionOut <code>source</code>.
     *
     * @param source
     * @return FCActionOut
     */
    FCActionOut createFCActionOut(FCActionOut source);

    /**
     * Creates a <code>FCComponentAction</code> by the FCComponentAction <code>source</code>.
     *
     * @param source
     * @return FCComponentAction
     */
    FCComponentAction createFCComponentAction(FCComponentAction source);

    /**
     * Creates a <code>FCModelAction</code> by the FCModelAction <code>source</code>.
     *
     * @param source
     * @return FCModelAction
     */
    FCModelAction createFCModelAction(FCModelAction source);

    /**
     * Creates a <code>FCServiceAction</code> by the FCServiceAction <code>source</code>.
     *
     * @param source
     * @return FCServiceAction
     */
    FCServiceAction createFCServiceAction(FCServiceAction source);

    /**
     * Creates a <code>FCResourceAction</code> by the FCResourceAction <code>source</code>.
     *
     * @param source
     * @return FCResourceAction
     */
    FCResourceAction createFCResourceAction(FCResourceAction source);

    /**
     * Creates a <code>FCSystemAction</code> by the FCSystemAction <code>source</code>.
     *
     * @param source
     * @return FCSystemAction
     */
    FCSystemAction createFCSystemAction(FCSystemAction source);

    /**
     * Creates a <code>FCPrologue</code> by the FCPrologue <code>source</code>.
     *
     * @param source
     * @return FCPrologue
     */
    FCPrologue createFCPrologue(FCPrologue source);

    /**
     * Creates a <code>FCEpilogue</code> by the FCEpilogue <code>source</code>.
     *
     * @param source
     * @return FCEpilogue
     */
    FCEpilogue createFCEpilogue(FCEpilogue source);

    /**
     * Creates a <code>FCScenarioAction</code> by the FCScenarioAction <code>source</code>.
     *
     * @param source
     * @return FCScenarioAction
     */
    FCScenarioAction createFCScenarioAction(FCScenarioAction source);

    /**
     * Creates a <code>FCMoveSceneAction</code> by the FCMoveSceneAction <code>source</code>.
     *
     * @param source
     * @return FCMoveSceneAction
     */
    FCMoveSceneAction createFCMoveSceneAction(FCMoveSceneAction source);

    /**
     * Creates a <code>FCScenario</code> by the FCScenario <code>source</code>.
     *
     * @param source
     * @return FCScenario
     */
    FCScenario createFCScenario(FCScenario source);

    /**
     * Creates a <code>FCScene</code> by the FCScene <code>source</code>.
     *
     * @param source
     * @return FCScene
     */
    FCScene createFCScene(FCScene source);

    /**
     * Creates a <code>FCDialog</code> by the FCDialog <code>source</code>.
     *
     * @param source
     * @return FCDialog
     */
    FCDialog createFCDialog(FCDialog source);

    /**
     * Creates a <code>FCHelp</code> by the FCHelp <code>source</code>.
     *
     * @param source
     * @return FCHelp
     */
    FCHelp createFCHelp(FCHelp source);

    /**
     * Creates a <code>FCScriptService</code> by the FCScriptService <code>source</code>.
     *
     * @param source
     * @return FCScriptService
     */
    FCScriptService createFCScriptService(FCScriptService source);

    /**
     * Creates a <code>FCComponentService</code> by the FCComponentService <code>source</code>.
     *
     * @param source
     * @return FCComponentService
     */
    FCComponentService createFCComponentService(FCComponentService source);

    /**
     * Creates a <code>FCSystemService</code> by the FCSystemService <code>source</code>.
     *
     * @param source
     * @return FCSystemService
     */
    FCSystemService createFCSystemService(FCSystemService source);

    /**
     * Creates a <code>FCComponentOption</code> by the FCComponentOption <code>source</code>.
     *
     * @param source
     * @return FCComponentOption
     */
    FCComponentOption createFCComponentOption(FCComponentOption source);

    /**
     * Creates a <code>FCSystemOption</code> by the FCSystemOption <code>source</code>.
     *
     * @param source
     * @return FCSystemOption
     */
    FCSystemOption createFCSystemOption(FCSystemOption source);

    /**
     * Creates a <code>FCOptionRef</code> by the FCOptionRef <code>source</code>.
     *
     * @param source
     * @return FCOptionRef
     */
    FCOptionRef createFCOptionRef(FCOptionRef source);

    /**
     * Creates a <code>FCOptionSet</code> by the FCOptionSet <code>source</code>.
     *
     * @param source
     * @return FCOptionSet
     */
    FCOptionSet createFCOptionSet(FCOptionSet source);

    /**
     * Creates a <code>FCAttribute</code> by the FCAttribute <code>source</code>.
     *
     * @param source
     * @return FCAttribute
     */
    FCAttribute createFCAttribute(FCAttribute source);

    /**
     * Creates a <code>FCOperationIn</code> by the FCOperationIn <code>source</code>.
     *
     * @param source
     * @return FCOperationIn
     */
    FCOperationIn createFCOperationIn(FCOperationIn source);

    /**
     * Creates a <code>FCOperationOut</code> by the FCOperationOut <code>source</code>.
     *
     * @param source
     * @return FCOperationOut
     */
    FCOperationOut createFCOperationOut(FCOperationOut source);

    /**
     * Creates a <code>FCOperation</code> by the FCOperation <code>source</code>.
     *
     * @param source
     * @return FCOperation
     */
    FCOperation createFCOperation(FCOperation source);

    /**
     * Creates a <code>FCProvider</code> by the FCProvider <code>source</code>.
     *
     * @param source
     * @return FCProvider
     */
    FCProvider createFCProvider(FCProvider source);

    /**
     * Creates a <code>FCVariable</code> by the FCVariable <code>source</code>.
     *
     * @param source
     * @return FCVariable
     */
    FCVariable createFCVariable(FCVariable source);

    /**
     * Creates a <code>FCExtension</code> by the FCExtension <code>source</code>.
     *
     * @param source
     * @return FCExtension
     */
    FCExtension createFCExtension(FCExtension source);

    /**
     * Creates a <code>FCProperty</code> by the FCProperty <code>source</code>.
     *
     * @param source
     * @return FCProperty
     */
    FCProperty createFCProperty(FCProperty source);

    /**
     * Creates a <code>FCValue</code> by the FCValue <code>source</code>.
     *
     * @param source
     * @return FCValue
     */
    FCValue createFCValue(FCValue source);

    /**
     * Creates a <code>FCConstructor</code> by the FCConstructor <code>source</code>.
     *
     * @param source
     * @return FCConstructor
     */
    FCConstructor createFCConstructor(FCConstructor source);

    /**
     * Creates a <code>FCMethod</code> by the FCMethod <code>source</code>.
     *
     * @param source
     * @return FCMethod
     */
    FCMethod createFCMethod(FCMethod source);

    /**
     * Creates a <code>FCJndiComponentRef</code> by the FCJndiComponentRef <code>source</code>.
     *
     * @param source
     * @return FCJndiComponentRef
     */
    FCJndiComponentRef createFCJndiComponentRef(FCJndiComponentRef source);

    /**
     * Creates a <code>FCConfigComponentRef</code> by the FCConfigComponentRef <code>source</code>.
     *
     * @param source
     * @return FCConfigComponentRef
     */
    FCConfigComponentRef createFCConfigComponentRef(FCConfigComponentRef source);

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the FCJavaBeansComponentRef <code>source</code>.
     *
     * @param source
     * @return FCJavaBeansComponentRef
     */
    FCJavaBeansComponentRef createFCJavaBeansComponentRef(FCJavaBeansComponentRef source);

    /**
     * Creates a <code>FCJndiModelRef</code> by the FCJndiModelRef <code>source</code>.
     *
     * @param source
     * @return FCJndiModelRef
     */
    FCJndiModelRef createFCJndiModelRef(FCJndiModelRef source);

    /**
     * Creates a <code>FCConfigModelRef</code> by the FCConfigModelRef <code>source</code>.
     *
     * @param source
     * @return FCConfigModelRef
     */
    FCConfigModelRef createFCConfigModelRef(FCConfigModelRef source);

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the FCJavaBeansModelRef <code>source</code>.
     *
     * @param source
     * @return FCJavaBeansModelRef
     */
    FCJavaBeansModelRef createFCJavaBeansModelRef(FCJavaBeansModelRef source);

    /**
     * Creates a <code>FCJndiResourceRef</code> by the FCJndiResourceRef <code>source</code>.
     *
     * @param source
     * @return FCJndiResourceRef
     */
    FCJndiResourceRef createFCJndiResourceRef(FCJndiResourceRef source);

    /**
     * Creates a <code>FCConfigResourceRef</code> by the FCConfigResourceRef <code>source</code>.
     *
     * @param source
     * @return FCConfigResourceRef
     */
    FCConfigResourceRef createFCConfigResourceRef(FCConfigResourceRef source);

    /**
     * Creates a <code>FCRealization</code> by the FCRealization <code>source</code>.
     *
     * @param source
     * @return FCRealization
     */
    FCRealization createFCRealization(FCRealization source);

    /**
     * Creates a <code>FCComponent</code> by the FCComponent <code>source</code>.
     *
     * @param source
     * @return FCComponent
     */
    FCComponent createFCComponent(FCComponent source);

    /**
     * Creates a <code>FCModelMapper</code> by the FCModelMapper <code>source</code>.
     *
     * @param source
     * @return FCModelMapper
     */
    FCModelMapper createFCModelMapper(FCModelMapper source);

    /**
     * Creates a <code>FCModelRepository</code> by the FCModelRepository <code>source</code>.
     *
     * @param source
     * @return FCModelRepository
     */
    FCModelRepository createFCModelRepository(FCModelRepository source);

    /**
     * Creates a <code>FCModel</code> by the FCModel <code>source</code>.
     *
     * @param source
     * @return FCModel
     */
    FCModel createFCModel(FCModel source);

    /**
     * Creates a <code>FCJdbcResource</code> by the FCJdbcResource <code>source</code>.
     *
     * @param source
     * @return FCJdbcResource
     */
    FCJdbcResource createFCJdbcResource(FCJdbcResource source);

    /**
     * Creates a <code>FCDatasourceResource</code> by the FCDatasourceResource <code>source</code>.
     *
     * @param source
     * @return FCDatasourceResource
     */
    FCDatasourceResource createFCDatasourceResource(FCDatasourceResource source);

    /**
     * Creates a <code>FCJndiResource</code> by the FCJndiResource <code>source</code>.
     *
     * @param source
     * @return FCJndiResource
     */
    FCJndiResource createFCJndiResource(FCJndiResource source);

    /**
     * Creates a <code>FCFileResource</code> by the FCFileResource <code>source</code>.
     *
     * @param source
     * @return FCFileResource
     */
    FCFileResource createFCFileResource(FCFileResource source);

    /**
     * Creates a <code>FCUrlResource</code> by the FCUrlResource <code>source</code>.
     *
     * @param source
     * @return FCUrlResource
     */
    FCUrlResource createFCUrlResource(FCUrlResource source);

    /**
     * Creates a <code>FCVariableResource</code> by the FCVariableResource <code>source</code>.
     *
     * @param source
     * @return FCVariableResource
     */
    FCVariableResource createFCVariableResource(FCVariableResource source);

    /**
     * Creates a <code>FCResource</code> by the FCResource <code>source</code>.
     *
     * @param source
     * @return FCResource
     */
    FCResource createFCResource(FCResource source);

    /**
     * Creates a <code>FCLogger</code> by the FCLogger <code>source</code>.
     *
     * @param source
     * @return FCLogger
     */
    FCLogger createFCLogger(FCLogger source);

    /**
     * Creates a <code>FCFrameworkLog</code> by the FCFrameworkLog <code>source</code>.
     *
     * @param source
     * @return FCFrameworkLog
     */
    FCFrameworkLog createFCFrameworkLog(FCFrameworkLog source);

    /**
     * Creates a <code>FCConfig</code> by the FCConfig <code>source</code>.
     *
     * @param source
     * @return FCConfig
     */
    FCConfig createFCConfig(FCConfig source);

    /**
     * Creates a <code>FCPlainScript</code> by the FCPlainScript <code>source</code>.
     *
     * @param source
     * @return FCPlainScript
     */
    FCPlainScript createFCPlainScript(FCPlainScript source);

    /**
     * Creates a <code>FCPlainScriptBody</code> by the FCPlainScriptBody <code>source</code>.
     *
     * @param source
     * @return FCPlainScriptBody
     */
    FCPlainScriptBody createFCPlainScriptBody(FCPlainScriptBody source);

    /**
     * Creates a <code>FCCopyright</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    FCCopyright createFCCopyright(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVersion</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    FCVersion createFCVersion(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUsage</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    FCUsage createFCUsage(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSlot</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    FCSlot createFCSlot(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionIn</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    FCActionIn createFCActionIn(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionOut</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    FCActionOut createFCActionOut(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentAction</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    FCComponentAction createFCComponentAction(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelAction</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    FCModelAction createFCModelAction(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCServiceAction</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    FCServiceAction createFCServiceAction(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResourceAction</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    FCResourceAction createFCResourceAction(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemAction</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    FCSystemAction createFCSystemAction(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPrologue</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    FCPrologue createFCPrologue(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCEpilogue</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    FCEpilogue createFCEpilogue(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenarioAction</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    FCScenarioAction createFCScenarioAction(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMoveSceneAction</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    FCMoveSceneAction createFCMoveSceneAction(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenario</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    FCScenario createFCScenario(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScene</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    FCScene createFCScene(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDialog</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    FCDialog createFCDialog(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCHelp</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    FCHelp createFCHelp(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScriptService</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    FCScriptService createFCScriptService(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentService</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    FCComponentService createFCComponentService(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemService</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    FCSystemService createFCSystemService(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentOption</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    FCComponentOption createFCComponentOption(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemOption</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    FCSystemOption createFCSystemOption(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionRef</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    FCOptionRef createFCOptionRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionSet</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    FCOptionSet createFCOptionSet(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCAttribute</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    FCAttribute createFCAttribute(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationIn</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    FCOperationIn createFCOperationIn(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationOut</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    FCOperationOut createFCOperationOut(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperation</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    FCOperation createFCOperation(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProvider</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    FCProvider createFCProvider(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariable</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    FCVariable createFCVariable(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCExtension</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    FCExtension createFCExtension(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProperty</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    FCProperty createFCProperty(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCValue</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    FCValue createFCValue(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConstructor</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    FCConstructor createFCConstructor(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMethod</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    FCMethod createFCMethod(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiComponentRef</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    FCJndiComponentRef createFCJndiComponentRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigComponentRef</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    FCConfigComponentRef createFCConfigComponentRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    FCJavaBeansComponentRef createFCJavaBeansComponentRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiModelRef</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    FCJndiModelRef createFCJndiModelRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigModelRef</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    FCConfigModelRef createFCConfigModelRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    FCJavaBeansModelRef createFCJavaBeansModelRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResourceRef</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    FCJndiResourceRef createFCJndiResourceRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigResourceRef</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    FCConfigResourceRef createFCConfigResourceRef(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCRealization</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    FCRealization createFCRealization(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponent</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    FCComponent createFCComponent(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelMapper</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    FCModelMapper createFCModelMapper(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelRepository</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    FCModelRepository createFCModelRepository(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModel</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    FCModel createFCModel(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJdbcResource</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    FCJdbcResource createFCJdbcResource(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDatasourceResource</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    FCDatasourceResource createFCDatasourceResource(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResource</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    FCJndiResource createFCJndiResource(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFileResource</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    FCFileResource createFCFileResource(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUrlResource</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    FCUrlResource createFCUrlResource(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariableResource</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    FCVariableResource createFCVariableResource(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResource</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    FCResource createFCResource(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCLogger</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    FCLogger createFCLogger(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFrameworkLog</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    FCFrameworkLog createFCFrameworkLog(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfig</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    FCConfig createFCConfig(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScript</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    FCPlainScript createFCPlainScript(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScriptBody</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    FCPlainScriptBody createFCPlainScriptBody(Document doc) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCCopyright</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCCopyright
     */
    FCCopyright createFCCopyright(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVersion</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVersion
     */
    FCVersion createFCVersion(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUsage</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUsage
     */
    FCUsage createFCUsage(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSlot</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSlot
     */
    FCSlot createFCSlot(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionIn</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionIn
     */
    FCActionIn createFCActionIn(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCActionOut</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCActionOut
     */
    FCActionOut createFCActionOut(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentAction</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentAction
     */
    FCComponentAction createFCComponentAction(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelAction</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelAction
     */
    FCModelAction createFCModelAction(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCServiceAction</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCServiceAction
     */
    FCServiceAction createFCServiceAction(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResourceAction</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResourceAction
     */
    FCResourceAction createFCResourceAction(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemAction</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemAction
     */
    FCSystemAction createFCSystemAction(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPrologue</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPrologue
     */
    FCPrologue createFCPrologue(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCEpilogue</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCEpilogue
     */
    FCEpilogue createFCEpilogue(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenarioAction</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenarioAction
     */
    FCScenarioAction createFCScenarioAction(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMoveSceneAction</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMoveSceneAction
     */
    FCMoveSceneAction createFCMoveSceneAction(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScenario</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScenario
     */
    FCScenario createFCScenario(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScene</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScene
     */
    FCScene createFCScene(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDialog</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDialog
     */
    FCDialog createFCDialog(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCHelp</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCHelp
     */
    FCHelp createFCHelp(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCScriptService</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCScriptService
     */
    FCScriptService createFCScriptService(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentService</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentService
     */
    FCComponentService createFCComponentService(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemService</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemService
     */
    FCSystemService createFCSystemService(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponentOption</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponentOption
     */
    FCComponentOption createFCComponentOption(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCSystemOption</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCSystemOption
     */
    FCSystemOption createFCSystemOption(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionRef</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionRef
     */
    FCOptionRef createFCOptionRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOptionSet</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOptionSet
     */
    FCOptionSet createFCOptionSet(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCAttribute</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCAttribute
     */
    FCAttribute createFCAttribute(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationIn</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationIn
     */
    FCOperationIn createFCOperationIn(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperationOut</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperationOut
     */
    FCOperationOut createFCOperationOut(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCOperation</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCOperation
     */
    FCOperation createFCOperation(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProvider</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProvider
     */
    FCProvider createFCProvider(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariable</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariable
     */
    FCVariable createFCVariable(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCExtension</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCExtension
     */
    FCExtension createFCExtension(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCProperty</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCProperty
     */
    FCProperty createFCProperty(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCValue</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCValue
     */
    FCValue createFCValue(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConstructor</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConstructor
     */
    FCConstructor createFCConstructor(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCMethod</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCMethod
     */
    FCMethod createFCMethod(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiComponentRef</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiComponentRef
     */
    FCJndiComponentRef createFCJndiComponentRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigComponentRef</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigComponentRef
     */
    FCConfigComponentRef createFCConfigComponentRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansComponentRef
     */
    FCJavaBeansComponentRef createFCJavaBeansComponentRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiModelRef</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiModelRef
     */
    FCJndiModelRef createFCJndiModelRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigModelRef</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigModelRef
     */
    FCConfigModelRef createFCConfigModelRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJavaBeansModelRef
     */
    FCJavaBeansModelRef createFCJavaBeansModelRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResourceRef</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResourceRef
     */
    FCJndiResourceRef createFCJndiResourceRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfigResourceRef</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfigResourceRef
     */
    FCConfigResourceRef createFCConfigResourceRef(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCRealization</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCRealization
     */
    FCRealization createFCRealization(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCComponent</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCComponent
     */
    FCComponent createFCComponent(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelMapper</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelMapper
     */
    FCModelMapper createFCModelMapper(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModelRepository</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModelRepository
     */
    FCModelRepository createFCModelRepository(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCModel</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCModel
     */
    FCModel createFCModel(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJdbcResource</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJdbcResource
     */
    FCJdbcResource createFCJdbcResource(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCDatasourceResource</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCDatasourceResource
     */
    FCDatasourceResource createFCDatasourceResource(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCJndiResource</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCJndiResource
     */
    FCJndiResource createFCJndiResource(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFileResource</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFileResource
     */
    FCFileResource createFCFileResource(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCUrlResource</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCUrlResource
     */
    FCUrlResource createFCUrlResource(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCVariableResource</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCVariableResource
     */
    FCVariableResource createFCVariableResource(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCResource</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCResource
     */
    FCResource createFCResource(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCLogger</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCLogger
     */
    FCLogger createFCLogger(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCFrameworkLog</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCFrameworkLog
     */
    FCFrameworkLog createFCFrameworkLog(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCConfig</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCConfig
     */
    FCConfig createFCConfig(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScript</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScript
     */
    FCPlainScript createFCPlainScript(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCPlainScriptBody</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @exception org.iso_relax.verifier.VerifierConfigurationException
     * @return FCPlainScriptBody
     */
    FCPlainScriptBody createFCPlainScriptBody(Element element) throws IOException, SAXException, ParserConfigurationException, org.iso_relax.verifier.VerifierConfigurationException;

    /**
     * Creates a <code>FCCopyright</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCCopyright
     */
    FCCopyright createFCCopyright(RStack stack);

    /**
     * Creates a <code>FCVersion</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCVersion
     */
    FCVersion createFCVersion(RStack stack);

    /**
     * Creates a <code>FCUsage</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCUsage
     */
    FCUsage createFCUsage(RStack stack);

    /**
     * Creates a <code>FCSlot</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCSlot
     */
    FCSlot createFCSlot(RStack stack);

    /**
     * Creates a <code>FCActionIn</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCActionIn
     */
    FCActionIn createFCActionIn(RStack stack);

    /**
     * Creates a <code>FCActionOut</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCActionOut
     */
    FCActionOut createFCActionOut(RStack stack);

    /**
     * Creates a <code>FCComponentAction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCComponentAction
     */
    FCComponentAction createFCComponentAction(RStack stack);

    /**
     * Creates a <code>FCModelAction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCModelAction
     */
    FCModelAction createFCModelAction(RStack stack);

    /**
     * Creates a <code>FCServiceAction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCServiceAction
     */
    FCServiceAction createFCServiceAction(RStack stack);

    /**
     * Creates a <code>FCResourceAction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCResourceAction
     */
    FCResourceAction createFCResourceAction(RStack stack);

    /**
     * Creates a <code>FCSystemAction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCSystemAction
     */
    FCSystemAction createFCSystemAction(RStack stack);

    /**
     * Creates a <code>FCPrologue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCPrologue
     */
    FCPrologue createFCPrologue(RStack stack);

    /**
     * Creates a <code>FCEpilogue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCEpilogue
     */
    FCEpilogue createFCEpilogue(RStack stack);

    /**
     * Creates a <code>FCScenarioAction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCScenarioAction
     */
    FCScenarioAction createFCScenarioAction(RStack stack);

    /**
     * Creates a <code>FCMoveSceneAction</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCMoveSceneAction
     */
    FCMoveSceneAction createFCMoveSceneAction(RStack stack);

    /**
     * Creates a <code>FCScenario</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCScenario
     */
    FCScenario createFCScenario(RStack stack);

    /**
     * Creates a <code>FCScene</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCScene
     */
    FCScene createFCScene(RStack stack);

    /**
     * Creates a <code>FCDialog</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCDialog
     */
    FCDialog createFCDialog(RStack stack);

    /**
     * Creates a <code>FCHelp</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCHelp
     */
    FCHelp createFCHelp(RStack stack);

    /**
     * Creates a <code>FCScriptService</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCScriptService
     */
    FCScriptService createFCScriptService(RStack stack);

    /**
     * Creates a <code>FCComponentService</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCComponentService
     */
    FCComponentService createFCComponentService(RStack stack);

    /**
     * Creates a <code>FCSystemService</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCSystemService
     */
    FCSystemService createFCSystemService(RStack stack);

    /**
     * Creates a <code>FCComponentOption</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCComponentOption
     */
    FCComponentOption createFCComponentOption(RStack stack);

    /**
     * Creates a <code>FCSystemOption</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCSystemOption
     */
    FCSystemOption createFCSystemOption(RStack stack);

    /**
     * Creates a <code>FCOptionRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCOptionRef
     */
    FCOptionRef createFCOptionRef(RStack stack);

    /**
     * Creates a <code>FCOptionSet</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCOptionSet
     */
    FCOptionSet createFCOptionSet(RStack stack);

    /**
     * Creates a <code>FCAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCAttribute
     */
    FCAttribute createFCAttribute(RStack stack);

    /**
     * Creates a <code>FCOperationIn</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCOperationIn
     */
    FCOperationIn createFCOperationIn(RStack stack);

    /**
     * Creates a <code>FCOperationOut</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCOperationOut
     */
    FCOperationOut createFCOperationOut(RStack stack);

    /**
     * Creates a <code>FCOperation</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCOperation
     */
    FCOperation createFCOperation(RStack stack);

    /**
     * Creates a <code>FCProvider</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCProvider
     */
    FCProvider createFCProvider(RStack stack);

    /**
     * Creates a <code>FCVariable</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCVariable
     */
    FCVariable createFCVariable(RStack stack);

    /**
     * Creates a <code>FCExtension</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCExtension
     */
    FCExtension createFCExtension(RStack stack);

    /**
     * Creates a <code>FCProperty</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCProperty
     */
    FCProperty createFCProperty(RStack stack);

    /**
     * Creates a <code>FCValue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCValue
     */
    FCValue createFCValue(RStack stack);

    /**
     * Creates a <code>FCConstructor</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCConstructor
     */
    FCConstructor createFCConstructor(RStack stack);

    /**
     * Creates a <code>FCMethod</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCMethod
     */
    FCMethod createFCMethod(RStack stack);

    /**
     * Creates a <code>FCJndiComponentRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCJndiComponentRef
     */
    FCJndiComponentRef createFCJndiComponentRef(RStack stack);

    /**
     * Creates a <code>FCConfigComponentRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCConfigComponentRef
     */
    FCConfigComponentRef createFCConfigComponentRef(RStack stack);

    /**
     * Creates a <code>FCJavaBeansComponentRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCJavaBeansComponentRef
     */
    FCJavaBeansComponentRef createFCJavaBeansComponentRef(RStack stack);

    /**
     * Creates a <code>FCJndiModelRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCJndiModelRef
     */
    FCJndiModelRef createFCJndiModelRef(RStack stack);

    /**
     * Creates a <code>FCConfigModelRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCConfigModelRef
     */
    FCConfigModelRef createFCConfigModelRef(RStack stack);

    /**
     * Creates a <code>FCJavaBeansModelRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCJavaBeansModelRef
     */
    FCJavaBeansModelRef createFCJavaBeansModelRef(RStack stack);

    /**
     * Creates a <code>FCJndiResourceRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCJndiResourceRef
     */
    FCJndiResourceRef createFCJndiResourceRef(RStack stack);

    /**
     * Creates a <code>FCConfigResourceRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCConfigResourceRef
     */
    FCConfigResourceRef createFCConfigResourceRef(RStack stack);

    /**
     * Creates a <code>FCRealization</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCRealization
     */
    FCRealization createFCRealization(RStack stack);

    /**
     * Creates a <code>FCComponent</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCComponent
     */
    FCComponent createFCComponent(RStack stack);

    /**
     * Creates a <code>FCModelMapper</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCModelMapper
     */
    FCModelMapper createFCModelMapper(RStack stack);

    /**
     * Creates a <code>FCModelRepository</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCModelRepository
     */
    FCModelRepository createFCModelRepository(RStack stack);

    /**
     * Creates a <code>FCModel</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCModel
     */
    FCModel createFCModel(RStack stack);

    /**
     * Creates a <code>FCJdbcResource</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCJdbcResource
     */
    FCJdbcResource createFCJdbcResource(RStack stack);

    /**
     * Creates a <code>FCDatasourceResource</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCDatasourceResource
     */
    FCDatasourceResource createFCDatasourceResource(RStack stack);

    /**
     * Creates a <code>FCJndiResource</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCJndiResource
     */
    FCJndiResource createFCJndiResource(RStack stack);

    /**
     * Creates a <code>FCFileResource</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCFileResource
     */
    FCFileResource createFCFileResource(RStack stack);

    /**
     * Creates a <code>FCUrlResource</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCUrlResource
     */
    FCUrlResource createFCUrlResource(RStack stack);

    /**
     * Creates a <code>FCVariableResource</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCVariableResource
     */
    FCVariableResource createFCVariableResource(RStack stack);

    /**
     * Creates a <code>FCResource</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCResource
     */
    FCResource createFCResource(RStack stack);

    /**
     * Creates a <code>FCLogger</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCLogger
     */
    FCLogger createFCLogger(RStack stack);

    /**
     * Creates a <code>FCFrameworkLog</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCFrameworkLog
     */
    FCFrameworkLog createFCFrameworkLog(RStack stack);

    /**
     * Creates a <code>FCConfig</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCConfig
     */
    FCConfig createFCConfig(RStack stack);

    /**
     * Creates a <code>FCPlainScript</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCPlainScript
     */
    FCPlainScript createFCPlainScript(RStack stack);

    /**
     * Creates a <code>FCPlainScriptBody</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCPlainScriptBody
     */
    FCPlainScriptBody createFCPlainScriptBody(RStack stack);

    /**
     * Creates a <code>FCSlotValue</code> by the Element <code>element</code>.
     *
     * @return FCSlotValue
     */
    FCSlotValue createFCSlotValue();

    /**
     * Creates a <code>FCActionInPeek</code> by the Element <code>element</code>.
     *
     * @return FCActionInPeek
     */
    FCActionInPeek createFCActionInPeek();

    /**
     * Creates a <code>FCActionInPop</code> by the Element <code>element</code>.
     *
     * @return FCActionInPop
     */
    FCActionInPop createFCActionInPop();

    /**
     * Creates a <code>FCActionInValue</code> by the Element <code>element</code>.
     *
     * @return FCActionInValue
     */
    FCActionInValue createFCActionInValue();

    /**
     * Creates a <code>FCActionOutPoke</code> by the Element <code>element</code>.
     *
     * @return FCActionOutPoke
     */
    FCActionOutPoke createFCActionOutPoke();

    /**
     * Creates a <code>FCActionOutPush</code> by the Element <code>element</code>.
     *
     * @return FCActionOutPush
     */
    FCActionOutPush createFCActionOutPush();

    /**
     * Creates a <code>FCParametersValues</code> by the Element <code>element</code>.
     *
     * @return FCParametersValues
     */
    FCParametersValues createFCParametersValues();

    /**
     * Creates a <code>FCModelType</code> by the Element <code>element</code>.
     *
     * @return FCModelType
     */
    FCModelType createFCModelType();

    /**
     * Creates a <code>FCModelJavaClass</code> by the Element <code>element</code>.
     *
     * @return FCModelJavaClass
     */
    FCModelJavaClass createFCModelJavaClass();

    /**
     * Creates a <code>FCSlotValue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCSlotValue
     */
    FCSlotValue createFCSlotValue(RStack stack);

    /**
     * Creates a <code>FCActionInPeek</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCActionInPeek
     */
    FCActionInPeek createFCActionInPeek(RStack stack);

    /**
     * Creates a <code>FCActionInPop</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCActionInPop
     */
    FCActionInPop createFCActionInPop(RStack stack);

    /**
     * Creates a <code>FCActionInValue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCActionInValue
     */
    FCActionInValue createFCActionInValue(RStack stack);

    /**
     * Creates a <code>FCActionOutPoke</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCActionOutPoke
     */
    FCActionOutPoke createFCActionOutPoke(RStack stack);

    /**
     * Creates a <code>FCActionOutPush</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCActionOutPush
     */
    FCActionOutPush createFCActionOutPush(RStack stack);

    /**
     * Creates a <code>FCParametersValues</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCParametersValues
     */
    FCParametersValues createFCParametersValues(RStack stack);

    /**
     * Creates a <code>FCModelType</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCModelType
     */
    FCModelType createFCModelType(RStack stack);

    /**
     * Creates a <code>FCModelJavaClass</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return FCModelJavaClass
     */
    FCModelJavaClass createFCModelJavaClass(RStack stack);

    /**
     * Creates a <code>FCSlotValue</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCSlotValue
     */
    FCSlotValue createFCSlotValue(FCSlotValue source);

    /**
     * Creates a <code>FCActionInPeek</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCActionInPeek
     */
    FCActionInPeek createFCActionInPeek(FCActionInPeek source);

    /**
     * Creates a <code>FCActionInPop</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCActionInPop
     */
    FCActionInPop createFCActionInPop(FCActionInPop source);

    /**
     * Creates a <code>FCActionInValue</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCActionInValue
     */
    FCActionInValue createFCActionInValue(FCActionInValue source);

    /**
     * Creates a <code>FCActionOutPoke</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCActionOutPoke
     */
    FCActionOutPoke createFCActionOutPoke(FCActionOutPoke source);

    /**
     * Creates a <code>FCActionOutPush</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCActionOutPush
     */
    FCActionOutPush createFCActionOutPush(FCActionOutPush source);

    /**
     * Creates a <code>FCParametersValues</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCParametersValues
     */
    FCParametersValues createFCParametersValues(FCParametersValues source);

    /**
     * Creates a <code>FCModelType</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCModelType
     */
    FCModelType createFCModelType(FCModelType source);

    /**
     * Creates a <code>FCModelJavaClass</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return FCModelJavaClass
     */
    FCModelJavaClass createFCModelJavaClass(FCModelJavaClass source);

    /**
     * Creates a <code>RString</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return RString
     */
    RString createRString(RStack stack);
}
