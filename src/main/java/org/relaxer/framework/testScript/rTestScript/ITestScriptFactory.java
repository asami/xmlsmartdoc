package org.relaxer.framework.testScript.rTestScript;

import java.io.*;
import java.net.URL;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * ITestScriptFactory is generated by Relaxer based on testScript.rng.
 *
 * @version testScript.rng 1.0 (Mon Sep 29 12:19:25 JST 2003)
 * @author  Relaxer 1.0b (http://www.relaxer.org)
 */
public interface ITestScriptFactory {
    /**
     * Sets a <b>errorHandler</b>.
     *
     * @param errorHandler
     */
    void setErrorHandler(org.xml.sax.ErrorHandler errorHandler);

    /**
     * Gets a <b>errorHandler</b>.
     *
     * @return org.xml.sax.ErrorHandler
     */
    org.xml.sax.ErrorHandler getErrorHandler();

    /**
     * Sets a <b>entityResolver</b>.
     *
     * @param entityResolver
     */
    void setEntityResolver(org.xml.sax.EntityResolver entityResolver);

    /**
     * Gets a <b>entityResolver</b>.
     *
     * @return org.xml.sax.EntityResolver
     */
    org.xml.sax.EntityResolver getEntityResolver();

    /**
     * Sets a <b>baseUri</b>.
     *
     * @param baseUri
     */
    void setBaseUri(String baseUri);

    /**
     * Gets a <b>baseUri</b>.
     *
     * @return String
     */
    String getBaseUri();

    /**
     * Creates a <code>Object</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the Object <code>source</code>.
     *
     * @param source
     * @return Object
     */
    Object create(Object source);

    /**
     * Creates a <code>Object</code> by the Document <code>dom</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(Document doc) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(Element element) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSTestcase</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTestcase
     */
    TSTestcase createTSTestcase(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSTest</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTest
     */
    TSTest createTSTest(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSBody</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSBody
     */
    TSBody createTSBody(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSInvokeObject</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeObject
     */
    TSInvokeObject createTSInvokeObject(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSIn</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSIn
     */
    TSIn createTSIn(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSValueElement</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSValueElement
     */
    TSValueElement createTSValueElement(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAny</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAny
     */
    TSAny createTSAny(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSInvokeService</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeService
     */
    TSInvokeService createTSInvokeService(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssert</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssert
     */
    TSAssert createTSAssert(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssertReturn</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertReturn
     */
    TSAssertReturn createTSAssertReturn(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssertException</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertException
     */
    TSAssertException createTSAssertException(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSTestcase</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTestcase
     */
    TSTestcase createTSTestcase(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSTest</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTest
     */
    TSTest createTSTest(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSBody</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSBody
     */
    TSBody createTSBody(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSInvokeObject</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeObject
     */
    TSInvokeObject createTSInvokeObject(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSIn</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSIn
     */
    TSIn createTSIn(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSValueElement</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSValueElement
     */
    TSValueElement createTSValueElement(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAny</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAny
     */
    TSAny createTSAny(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSInvokeService</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeService
     */
    TSInvokeService createTSInvokeService(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssert</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssert
     */
    TSAssert createTSAssert(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssertReturn</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertReturn
     */
    TSAssertReturn createTSAssertReturn(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssertException</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertException
     */
    TSAssertException createTSAssertException(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSTestcase</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTestcase
     */
    TSTestcase createTSTestcase(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSTest</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTest
     */
    TSTest createTSTest(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSBody</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSBody
     */
    TSBody createTSBody(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSInvokeObject</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeObject
     */
    TSInvokeObject createTSInvokeObject(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSIn</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSIn
     */
    TSIn createTSIn(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSValueElement</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSValueElement
     */
    TSValueElement createTSValueElement(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAny</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAny
     */
    TSAny createTSAny(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSInvokeService</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeService
     */
    TSInvokeService createTSInvokeService(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssert</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssert
     */
    TSAssert createTSAssert(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssertReturn</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertReturn
     */
    TSAssertReturn createTSAssertReturn(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssertException</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertException
     */
    TSAssertException createTSAssertException(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSTestcase</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTestcase
     */
    TSTestcase createTSTestcase(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSTest</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTest
     */
    TSTest createTSTest(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSBody</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSBody
     */
    TSBody createTSBody(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSInvokeObject</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeObject
     */
    TSInvokeObject createTSInvokeObject(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSIn</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSIn
     */
    TSIn createTSIn(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSValueElement</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSValueElement
     */
    TSValueElement createTSValueElement(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAny</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAny
     */
    TSAny createTSAny(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSInvokeService</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeService
     */
    TSInvokeService createTSInvokeService(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssert</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssert
     */
    TSAssert createTSAssert(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssertReturn</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertReturn
     */
    TSAssertReturn createTSAssertReturn(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssertException</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertException
     */
    TSAssertException createTSAssertException(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSTestcase</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTestcase
     */
    TSTestcase createTSTestcase(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSTest</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTest
     */
    TSTest createTSTest(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSBody</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSBody
     */
    TSBody createTSBody(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSInvokeObject</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeObject
     */
    TSInvokeObject createTSInvokeObject(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSIn</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSIn
     */
    TSIn createTSIn(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSValueElement</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSValueElement
     */
    TSValueElement createTSValueElement(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAny</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAny
     */
    TSAny createTSAny(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSInvokeService</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeService
     */
    TSInvokeService createTSInvokeService(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssert</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssert
     */
    TSAssert createTSAssert(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssertReturn</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertReturn
     */
    TSAssertReturn createTSAssertReturn(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssertException</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertException
     */
    TSAssertException createTSAssertException(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSTestcase</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTestcase
     */
    TSTestcase createTSTestcase(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSTest</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTest
     */
    TSTest createTSTest(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSBody</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSBody
     */
    TSBody createTSBody(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSInvokeObject</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeObject
     */
    TSInvokeObject createTSInvokeObject(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSIn</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSIn
     */
    TSIn createTSIn(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSValueElement</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSValueElement
     */
    TSValueElement createTSValueElement(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAny</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAny
     */
    TSAny createTSAny(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSInvokeService</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeService
     */
    TSInvokeService createTSInvokeService(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssert</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssert
     */
    TSAssert createTSAssert(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssertReturn</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertReturn
     */
    TSAssertReturn createTSAssertReturn(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSAssertException</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertException
     */
    TSAssertException createTSAssertException(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>TSTestcase</code>.
     *
     * @return TSTestcase
     */
    TSTestcase createTSTestcase();

    /**
     * Creates a <code>TSTest</code>.
     *
     * @return TSTest
     */
    TSTest createTSTest();

    /**
     * Creates a <code>TSBody</code>.
     *
     * @return TSBody
     */
    TSBody createTSBody();

    /**
     * Creates a <code>TSInvokeObject</code>.
     *
     * @return TSInvokeObject
     */
    TSInvokeObject createTSInvokeObject();

    /**
     * Creates a <code>TSIn</code>.
     *
     * @return TSIn
     */
    TSIn createTSIn();

    /**
     * Creates a <code>TSValueElement</code>.
     *
     * @return TSValueElement
     */
    TSValueElement createTSValueElement();

    /**
     * Creates a <code>TSAny</code>.
     *
     * @return TSAny
     */
    TSAny createTSAny();

    /**
     * Creates a <code>TSInvokeService</code>.
     *
     * @return TSInvokeService
     */
    TSInvokeService createTSInvokeService();

    /**
     * Creates a <code>TSAssert</code>.
     *
     * @return TSAssert
     */
    TSAssert createTSAssert();

    /**
     * Creates a <code>TSAssertReturn</code>.
     *
     * @return TSAssertReturn
     */
    TSAssertReturn createTSAssertReturn();

    /**
     * Creates a <code>TSAssertException</code>.
     *
     * @return TSAssertException
     */
    TSAssertException createTSAssertException();

    /**
     * Creates a <code>TSTestcase</code> by the TSTestcase <code>source</code>.
     *
     * @param source
     * @return TSTestcase
     */
    TSTestcase createTSTestcase(TSTestcase source);

    /**
     * Creates a <code>TSTest</code> by the TSTest <code>source</code>.
     *
     * @param source
     * @return TSTest
     */
    TSTest createTSTest(TSTest source);

    /**
     * Creates a <code>TSBody</code> by the TSBody <code>source</code>.
     *
     * @param source
     * @return TSBody
     */
    TSBody createTSBody(TSBody source);

    /**
     * Creates a <code>TSInvokeObject</code> by the TSInvokeObject <code>source</code>.
     *
     * @param source
     * @return TSInvokeObject
     */
    TSInvokeObject createTSInvokeObject(TSInvokeObject source);

    /**
     * Creates a <code>TSIn</code> by the TSIn <code>source</code>.
     *
     * @param source
     * @return TSIn
     */
    TSIn createTSIn(TSIn source);

    /**
     * Creates a <code>TSValueElement</code> by the TSValueElement <code>source</code>.
     *
     * @param source
     * @return TSValueElement
     */
    TSValueElement createTSValueElement(TSValueElement source);

    /**
     * Creates a <code>TSAny</code> by the TSAny <code>source</code>.
     *
     * @param source
     * @return TSAny
     */
    TSAny createTSAny(TSAny source);

    /**
     * Creates a <code>TSInvokeService</code> by the TSInvokeService <code>source</code>.
     *
     * @param source
     * @return TSInvokeService
     */
    TSInvokeService createTSInvokeService(TSInvokeService source);

    /**
     * Creates a <code>TSAssert</code> by the TSAssert <code>source</code>.
     *
     * @param source
     * @return TSAssert
     */
    TSAssert createTSAssert(TSAssert source);

    /**
     * Creates a <code>TSAssertReturn</code> by the TSAssertReturn <code>source</code>.
     *
     * @param source
     * @return TSAssertReturn
     */
    TSAssertReturn createTSAssertReturn(TSAssertReturn source);

    /**
     * Creates a <code>TSAssertException</code> by the TSAssertException <code>source</code>.
     *
     * @param source
     * @return TSAssertException
     */
    TSAssertException createTSAssertException(TSAssertException source);

    /**
     * Creates a <code>TSTestcase</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return TSTestcase
     */
    TSTestcase createTSTestcase(Document doc);

    /**
     * Creates a <code>TSTest</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return TSTest
     */
    TSTest createTSTest(Document doc);

    /**
     * Creates a <code>TSBody</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return TSBody
     */
    TSBody createTSBody(Document doc);

    /**
     * Creates a <code>TSInvokeObject</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return TSInvokeObject
     */
    TSInvokeObject createTSInvokeObject(Document doc);

    /**
     * Creates a <code>TSIn</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return TSIn
     */
    TSIn createTSIn(Document doc);

    /**
     * Creates a <code>TSValueElement</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return TSValueElement
     */
    TSValueElement createTSValueElement(Document doc);

    /**
     * Creates a <code>TSAny</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return TSAny
     */
    TSAny createTSAny(Document doc);

    /**
     * Creates a <code>TSInvokeService</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return TSInvokeService
     */
    TSInvokeService createTSInvokeService(Document doc);

    /**
     * Creates a <code>TSAssert</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return TSAssert
     */
    TSAssert createTSAssert(Document doc);

    /**
     * Creates a <code>TSAssertReturn</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return TSAssertReturn
     */
    TSAssertReturn createTSAssertReturn(Document doc);

    /**
     * Creates a <code>TSAssertException</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return TSAssertException
     */
    TSAssertException createTSAssertException(Document doc);

    /**
     * Creates a <code>TSTestcase</code> by the Element <code>element</code>.
     *
     * @param element
     * @return TSTestcase
     */
    TSTestcase createTSTestcase(Element element);

    /**
     * Creates a <code>TSTest</code> by the Element <code>element</code>.
     *
     * @param element
     * @return TSTest
     */
    TSTest createTSTest(Element element);

    /**
     * Creates a <code>TSBody</code> by the Element <code>element</code>.
     *
     * @param element
     * @return TSBody
     */
    TSBody createTSBody(Element element);

    /**
     * Creates a <code>TSInvokeObject</code> by the Element <code>element</code>.
     *
     * @param element
     * @return TSInvokeObject
     */
    TSInvokeObject createTSInvokeObject(Element element);

    /**
     * Creates a <code>TSIn</code> by the Element <code>element</code>.
     *
     * @param element
     * @return TSIn
     */
    TSIn createTSIn(Element element);

    /**
     * Creates a <code>TSValueElement</code> by the Element <code>element</code>.
     *
     * @param element
     * @return TSValueElement
     */
    TSValueElement createTSValueElement(Element element);

    /**
     * Creates a <code>TSAny</code> by the Element <code>element</code>.
     *
     * @param element
     * @return TSAny
     */
    TSAny createTSAny(Element element);

    /**
     * Creates a <code>TSInvokeService</code> by the Element <code>element</code>.
     *
     * @param element
     * @return TSInvokeService
     */
    TSInvokeService createTSInvokeService(Element element);

    /**
     * Creates a <code>TSAssert</code> by the Element <code>element</code>.
     *
     * @param element
     * @return TSAssert
     */
    TSAssert createTSAssert(Element element);

    /**
     * Creates a <code>TSAssertReturn</code> by the Element <code>element</code>.
     *
     * @param element
     * @return TSAssertReturn
     */
    TSAssertReturn createTSAssertReturn(Element element);

    /**
     * Creates a <code>TSAssertException</code> by the Element <code>element</code>.
     *
     * @param element
     * @return TSAssertException
     */
    TSAssertException createTSAssertException(Element element);

    /**
     * Creates a <code>TSTestcase</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return TSTestcase
     */
    TSTestcase createTSTestcase(RStack stack);

    /**
     * Creates a <code>TSTest</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return TSTest
     */
    TSTest createTSTest(RStack stack);

    /**
     * Creates a <code>TSBody</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return TSBody
     */
    TSBody createTSBody(RStack stack);

    /**
     * Creates a <code>TSInvokeObject</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return TSInvokeObject
     */
    TSInvokeObject createTSInvokeObject(RStack stack);

    /**
     * Creates a <code>TSIn</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return TSIn
     */
    TSIn createTSIn(RStack stack);

    /**
     * Creates a <code>TSValueElement</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return TSValueElement
     */
    TSValueElement createTSValueElement(RStack stack);

    /**
     * Creates a <code>TSAny</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return TSAny
     */
    TSAny createTSAny(RStack stack);

    /**
     * Creates a <code>TSInvokeService</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return TSInvokeService
     */
    TSInvokeService createTSInvokeService(RStack stack);

    /**
     * Creates a <code>TSAssert</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return TSAssert
     */
    TSAssert createTSAssert(RStack stack);

    /**
     * Creates a <code>TSAssertReturn</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return TSAssertReturn
     */
    TSAssertReturn createTSAssertReturn(RStack stack);

    /**
     * Creates a <code>TSAssertException</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return TSAssertException
     */
    TSAssertException createTSAssertException(RStack stack);

    /**
     * Creates a <code>TSExpression</code> by the Element <code>element</code>.
     *
     * @return TSExpression
     */
    TSExpression createTSExpression();

    /**
     * Creates a <code>TSExpression</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return TSExpression
     */
    TSExpression createTSExpression(RStack stack);

    /**
     * Creates a <code>TSExpression</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSExpression
     */
    TSExpression createTSExpression(TSExpression source);

    /**
     * Creates a <code>TSValueExpressionValue</code> by the Element <code>element</code>.
     *
     * @return TSValueExpressionValue
     */
    TSValueExpressionValue createTSValueExpressionValue();

    /**
     * Creates a <code>TSValueElementAnyAttr</code> by the Element <code>element</code>.
     *
     * @return TSValueElementAnyAttr
     */
    TSValueElementAnyAttr createTSValueElementAnyAttr();

    /**
     * Creates a <code>TSAnyAnyAttr</code> by the Element <code>element</code>.
     *
     * @return TSAnyAnyAttr
     */
    TSAnyAnyAttr createTSAnyAnyAttr();

    /**
     * Creates a <code>TSValueExpressionValue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return TSValueExpressionValue
     */
    TSValueExpressionValue createTSValueExpressionValue(RStack stack);

    /**
     * Creates a <code>TSValueElementAnyAttr</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return TSValueElementAnyAttr
     */
    TSValueElementAnyAttr createTSValueElementAnyAttr(RStack stack);

    /**
     * Creates a <code>TSAnyAnyAttr</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return TSAnyAnyAttr
     */
    TSAnyAnyAttr createTSAnyAnyAttr(RStack stack);

    /**
     * Creates a <code>TSValueExpressionValue</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSValueExpressionValue
     */
    TSValueExpressionValue createTSValueExpressionValue(TSValueExpressionValue source);

    /**
     * Creates a <code>TSValueElementAnyAttr</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSValueElementAnyAttr
     */
    TSValueElementAnyAttr createTSValueElementAnyAttr(TSValueElementAnyAttr source);

    /**
     * Creates a <code>TSAnyAnyAttr</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSAnyAnyAttr
     */
    TSAnyAnyAttr createTSAnyAnyAttr(TSAnyAnyAttr source);

    /**
     * Creates a <code>RString</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return RString
     */
    RString createRString(RStack stack);
}
