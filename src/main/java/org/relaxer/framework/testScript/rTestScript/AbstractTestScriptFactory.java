package org.relaxer.framework.testScript.rTestScript;

import java.io.*;
import java.net.URL;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * AbstractTestScriptFactory is generated by Relaxer based on testScript.rng.
 *
 * @version testScript.rng 1.0 (Mon Sep 29 12:19:25 JST 2003)
 * @author  Relaxer 1.0b (http://www.relaxer.org)
 */
public abstract class AbstractTestScriptFactory implements ITestScriptFactory {
    protected org.xml.sax.ErrorHandler errorHandler;
    protected org.xml.sax.EntityResolver entityResolver;
    protected String baseUri;

    /**
     * Sets a <b>errorHandler</b>.
     *
     * @param errorHandler
     */
    public void setErrorHandler(org.xml.sax.ErrorHandler errorHandler) {
        this.errorHandler = errorHandler;
    }

    /**
     * Gets a <b>errorHandler</b>.
     *
     * @return org.xml.sax.ErrorHandler
     */
    public org.xml.sax.ErrorHandler getErrorHandler() {
        return (errorHandler);
    }

    /**
     * Sets a <b>entityResolver</b>.
     *
     * @param entityResolver
     */
    public void setEntityResolver(org.xml.sax.EntityResolver entityResolver) {
        this.entityResolver = entityResolver;
    }

    /**
     * Gets a <b>entityResolver</b>.
     *
     * @return org.xml.sax.EntityResolver
     */
    public org.xml.sax.EntityResolver getEntityResolver() {
        return (entityResolver);
    }

    /**
     * Sets a <b>baseUri</b>.
     *
     * @param baseUri
     */
    public void setBaseUri(String baseUri) {
        this.baseUri = baseUri;
    }

    /**
     * Gets a <b>baseUri</b>.
     *
     * @return String
     */
    public String getBaseUri() {
        return (baseUri);
    }

    /**
     * Creates a <code>Object</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(File file) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(String uri) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(URL url) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the copy <code>Object</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return Object
     */
    public Object create(Object source) {
        if (source instanceof TSTestcase) {
            TSTestcase node = createTSTestcase();
            node.setup((TSTestcase)source);
            return(node);
        } else if (source instanceof TSTest) {
            TSTest node = createTSTest();
            node.setup((TSTest)source);
            return(node);
        } else if (source instanceof TSBody) {
            TSBody node = createTSBody();
            node.setup((TSBody)source);
            return(node);
        } else if (source instanceof TSInvokeObject) {
            TSInvokeObject node = createTSInvokeObject();
            node.setup((TSInvokeObject)source);
            return(node);
        } else if (source instanceof TSIn) {
            TSIn node = createTSIn();
            node.setup((TSIn)source);
            return(node);
        } else if (source instanceof TSValueElement) {
            TSValueElement node = createTSValueElement();
            node.setup((TSValueElement)source);
            return(node);
        } else if (source instanceof TSAny) {
            TSAny node = createTSAny();
            node.setup((TSAny)source);
            return(node);
        } else if (source instanceof TSInvokeService) {
            TSInvokeService node = createTSInvokeService();
            node.setup((TSInvokeService)source);
            return(node);
        } else if (source instanceof TSAssert) {
            TSAssert node = createTSAssert();
            node.setup((TSAssert)source);
            return(node);
        } else if (source instanceof TSAssertReturn) {
            TSAssertReturn node = createTSAssertReturn();
            node.setup((TSAssertReturn)source);
            return(node);
        } else if (source instanceof TSAssertException) {
            TSAssertException node = createTSAssertException();
            node.setup((TSAssertException)source);
            return(node);
        } else {
            return (null);
        }
    }

    /**
     * Creates a <code>Object</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(Document doc) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(doc.getDocumentElement());
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(Element element) throws IOException, SAXException, ParserConfigurationException {
        if (TSTestcase.isMatch(element)) {
            TSTestcase node = createTSTestcase();
            node.setup(element);
            return(node);
        } else if (TSTest.isMatch(element)) {
            TSTest node = createTSTest();
            node.setup(element);
            return(node);
        } else if (TSBody.isMatch(element)) {
            TSBody node = createTSBody();
            node.setup(element);
            return(node);
        } else if (TSInvokeObject.isMatch(element)) {
            TSInvokeObject node = createTSInvokeObject();
            node.setup(element);
            return(node);
        } else if (TSIn.isMatch(element)) {
            TSIn node = createTSIn();
            node.setup(element);
            return(node);
        } else if (TSValueElement.isMatch(element)) {
            TSValueElement node = createTSValueElement();
            node.setup(element);
            return(node);
        } else if (TSAny.isMatch(element)) {
            TSAny node = createTSAny();
            node.setup(element);
            return(node);
        } else if (TSInvokeService.isMatch(element)) {
            TSInvokeService node = createTSInvokeService();
            node.setup(element);
            return(node);
        } else if (TSAssert.isMatch(element)) {
            TSAssert node = createTSAssert();
            node.setup(element);
            return(node);
        } else if (TSAssertReturn.isMatch(element)) {
            TSAssertReturn node = createTSAssertReturn();
            node.setup(element);
            return(node);
        } else if (TSAssertException.isMatch(element)) {
            TSAssertException node = createTSAssertException();
            node.setup(element);
            return(node);
        } else {
            return (null);
        }
    }

    /**
     * Creates a <code>TSTestcase</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTestcase
     */
    public TSTestcase createTSTestcase(File file) throws IOException, SAXException, ParserConfigurationException {
        TSTestcase tSTestcase_ = createTSTestcase();
        tSTestcase_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSTestcase_);
    }

    /**
     * Creates a <code>TSTest</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTest
     */
    public TSTest createTSTest(File file) throws IOException, SAXException, ParserConfigurationException {
        TSTest tSTest_ = createTSTest();
        tSTest_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSTest_);
    }

    /**
     * Creates a <code>TSBody</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSBody
     */
    public TSBody createTSBody(File file) throws IOException, SAXException, ParserConfigurationException {
        TSBody tSBody_ = createTSBody();
        tSBody_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSBody_);
    }

    /**
     * Creates a <code>TSInvokeObject</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeObject
     */
    public TSInvokeObject createTSInvokeObject(File file) throws IOException, SAXException, ParserConfigurationException {
        TSInvokeObject tSInvokeObject_ = createTSInvokeObject();
        tSInvokeObject_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSInvokeObject_);
    }

    /**
     * Creates a <code>TSIn</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSIn
     */
    public TSIn createTSIn(File file) throws IOException, SAXException, ParserConfigurationException {
        TSIn tSIn_ = createTSIn();
        tSIn_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSIn_);
    }

    /**
     * Creates a <code>TSValueElement</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSValueElement
     */
    public TSValueElement createTSValueElement(File file) throws IOException, SAXException, ParserConfigurationException {
        TSValueElement tSValueElement_ = createTSValueElement();
        tSValueElement_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSValueElement_);
    }

    /**
     * Creates a <code>TSAny</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAny
     */
    public TSAny createTSAny(File file) throws IOException, SAXException, ParserConfigurationException {
        TSAny tSAny_ = createTSAny();
        tSAny_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAny_);
    }

    /**
     * Creates a <code>TSInvokeService</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeService
     */
    public TSInvokeService createTSInvokeService(File file) throws IOException, SAXException, ParserConfigurationException {
        TSInvokeService tSInvokeService_ = createTSInvokeService();
        tSInvokeService_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSInvokeService_);
    }

    /**
     * Creates a <code>TSAssert</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssert
     */
    public TSAssert createTSAssert(File file) throws IOException, SAXException, ParserConfigurationException {
        TSAssert tSAssert_ = createTSAssert();
        tSAssert_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssert_);
    }

    /**
     * Creates a <code>TSAssertReturn</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertReturn
     */
    public TSAssertReturn createTSAssertReturn(File file) throws IOException, SAXException, ParserConfigurationException {
        TSAssertReturn tSAssertReturn_ = createTSAssertReturn();
        tSAssertReturn_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssertReturn_);
    }

    /**
     * Creates a <code>TSAssertException</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertException
     */
    public TSAssertException createTSAssertException(File file) throws IOException, SAXException, ParserConfigurationException {
        TSAssertException tSAssertException_ = createTSAssertException();
        tSAssertException_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssertException_);
    }

    /**
     * Creates a <code>TSTestcase</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTestcase
     */
    public TSTestcase createTSTestcase(String uri) throws IOException, SAXException, ParserConfigurationException {
        TSTestcase tSTestcase_ = createTSTestcase();
        tSTestcase_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSTestcase_);
    }

    /**
     * Creates a <code>TSTest</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTest
     */
    public TSTest createTSTest(String uri) throws IOException, SAXException, ParserConfigurationException {
        TSTest tSTest_ = createTSTest();
        tSTest_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSTest_);
    }

    /**
     * Creates a <code>TSBody</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSBody
     */
    public TSBody createTSBody(String uri) throws IOException, SAXException, ParserConfigurationException {
        TSBody tSBody_ = createTSBody();
        tSBody_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSBody_);
    }

    /**
     * Creates a <code>TSInvokeObject</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeObject
     */
    public TSInvokeObject createTSInvokeObject(String uri) throws IOException, SAXException, ParserConfigurationException {
        TSInvokeObject tSInvokeObject_ = createTSInvokeObject();
        tSInvokeObject_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSInvokeObject_);
    }

    /**
     * Creates a <code>TSIn</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSIn
     */
    public TSIn createTSIn(String uri) throws IOException, SAXException, ParserConfigurationException {
        TSIn tSIn_ = createTSIn();
        tSIn_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSIn_);
    }

    /**
     * Creates a <code>TSValueElement</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSValueElement
     */
    public TSValueElement createTSValueElement(String uri) throws IOException, SAXException, ParserConfigurationException {
        TSValueElement tSValueElement_ = createTSValueElement();
        tSValueElement_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSValueElement_);
    }

    /**
     * Creates a <code>TSAny</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAny
     */
    public TSAny createTSAny(String uri) throws IOException, SAXException, ParserConfigurationException {
        TSAny tSAny_ = createTSAny();
        tSAny_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAny_);
    }

    /**
     * Creates a <code>TSInvokeService</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeService
     */
    public TSInvokeService createTSInvokeService(String uri) throws IOException, SAXException, ParserConfigurationException {
        TSInvokeService tSInvokeService_ = createTSInvokeService();
        tSInvokeService_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSInvokeService_);
    }

    /**
     * Creates a <code>TSAssert</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssert
     */
    public TSAssert createTSAssert(String uri) throws IOException, SAXException, ParserConfigurationException {
        TSAssert tSAssert_ = createTSAssert();
        tSAssert_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssert_);
    }

    /**
     * Creates a <code>TSAssertReturn</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertReturn
     */
    public TSAssertReturn createTSAssertReturn(String uri) throws IOException, SAXException, ParserConfigurationException {
        TSAssertReturn tSAssertReturn_ = createTSAssertReturn();
        tSAssertReturn_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssertReturn_);
    }

    /**
     * Creates a <code>TSAssertException</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertException
     */
    public TSAssertException createTSAssertException(String uri) throws IOException, SAXException, ParserConfigurationException {
        TSAssertException tSAssertException_ = createTSAssertException();
        tSAssertException_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssertException_);
    }

    /**
     * Creates a <code>TSTestcase</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTestcase
     */
    public TSTestcase createTSTestcase(URL url) throws IOException, SAXException, ParserConfigurationException {
        TSTestcase tSTestcase_ = createTSTestcase();
        tSTestcase_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSTestcase_);
    }

    /**
     * Creates a <code>TSTest</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTest
     */
    public TSTest createTSTest(URL url) throws IOException, SAXException, ParserConfigurationException {
        TSTest tSTest_ = createTSTest();
        tSTest_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSTest_);
    }

    /**
     * Creates a <code>TSBody</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSBody
     */
    public TSBody createTSBody(URL url) throws IOException, SAXException, ParserConfigurationException {
        TSBody tSBody_ = createTSBody();
        tSBody_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSBody_);
    }

    /**
     * Creates a <code>TSInvokeObject</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeObject
     */
    public TSInvokeObject createTSInvokeObject(URL url) throws IOException, SAXException, ParserConfigurationException {
        TSInvokeObject tSInvokeObject_ = createTSInvokeObject();
        tSInvokeObject_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSInvokeObject_);
    }

    /**
     * Creates a <code>TSIn</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSIn
     */
    public TSIn createTSIn(URL url) throws IOException, SAXException, ParserConfigurationException {
        TSIn tSIn_ = createTSIn();
        tSIn_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSIn_);
    }

    /**
     * Creates a <code>TSValueElement</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSValueElement
     */
    public TSValueElement createTSValueElement(URL url) throws IOException, SAXException, ParserConfigurationException {
        TSValueElement tSValueElement_ = createTSValueElement();
        tSValueElement_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSValueElement_);
    }

    /**
     * Creates a <code>TSAny</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAny
     */
    public TSAny createTSAny(URL url) throws IOException, SAXException, ParserConfigurationException {
        TSAny tSAny_ = createTSAny();
        tSAny_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAny_);
    }

    /**
     * Creates a <code>TSInvokeService</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeService
     */
    public TSInvokeService createTSInvokeService(URL url) throws IOException, SAXException, ParserConfigurationException {
        TSInvokeService tSInvokeService_ = createTSInvokeService();
        tSInvokeService_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSInvokeService_);
    }

    /**
     * Creates a <code>TSAssert</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssert
     */
    public TSAssert createTSAssert(URL url) throws IOException, SAXException, ParserConfigurationException {
        TSAssert tSAssert_ = createTSAssert();
        tSAssert_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssert_);
    }

    /**
     * Creates a <code>TSAssertReturn</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertReturn
     */
    public TSAssertReturn createTSAssertReturn(URL url) throws IOException, SAXException, ParserConfigurationException {
        TSAssertReturn tSAssertReturn_ = createTSAssertReturn();
        tSAssertReturn_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssertReturn_);
    }

    /**
     * Creates a <code>TSAssertException</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertException
     */
    public TSAssertException createTSAssertException(URL url) throws IOException, SAXException, ParserConfigurationException {
        TSAssertException tSAssertException_ = createTSAssertException();
        tSAssertException_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssertException_);
    }

    /**
     * Creates a <code>TSTestcase</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTestcase
     */
    public TSTestcase createTSTestcase(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        TSTestcase tSTestcase_ = createTSTestcase();
        tSTestcase_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSTestcase_);
    }

    /**
     * Creates a <code>TSTest</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTest
     */
    public TSTest createTSTest(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        TSTest tSTest_ = createTSTest();
        tSTest_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSTest_);
    }

    /**
     * Creates a <code>TSBody</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSBody
     */
    public TSBody createTSBody(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        TSBody tSBody_ = createTSBody();
        tSBody_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSBody_);
    }

    /**
     * Creates a <code>TSInvokeObject</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeObject
     */
    public TSInvokeObject createTSInvokeObject(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        TSInvokeObject tSInvokeObject_ = createTSInvokeObject();
        tSInvokeObject_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSInvokeObject_);
    }

    /**
     * Creates a <code>TSIn</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSIn
     */
    public TSIn createTSIn(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        TSIn tSIn_ = createTSIn();
        tSIn_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSIn_);
    }

    /**
     * Creates a <code>TSValueElement</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSValueElement
     */
    public TSValueElement createTSValueElement(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        TSValueElement tSValueElement_ = createTSValueElement();
        tSValueElement_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSValueElement_);
    }

    /**
     * Creates a <code>TSAny</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAny
     */
    public TSAny createTSAny(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        TSAny tSAny_ = createTSAny();
        tSAny_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAny_);
    }

    /**
     * Creates a <code>TSInvokeService</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeService
     */
    public TSInvokeService createTSInvokeService(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        TSInvokeService tSInvokeService_ = createTSInvokeService();
        tSInvokeService_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSInvokeService_);
    }

    /**
     * Creates a <code>TSAssert</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssert
     */
    public TSAssert createTSAssert(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        TSAssert tSAssert_ = createTSAssert();
        tSAssert_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssert_);
    }

    /**
     * Creates a <code>TSAssertReturn</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertReturn
     */
    public TSAssertReturn createTSAssertReturn(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        TSAssertReturn tSAssertReturn_ = createTSAssertReturn();
        tSAssertReturn_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssertReturn_);
    }

    /**
     * Creates a <code>TSAssertException</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertException
     */
    public TSAssertException createTSAssertException(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        TSAssertException tSAssertException_ = createTSAssertException();
        tSAssertException_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssertException_);
    }

    /**
     * Creates a <code>TSTestcase</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTestcase
     */
    public TSTestcase createTSTestcase(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        TSTestcase tSTestcase_ = createTSTestcase();
        tSTestcase_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSTestcase_);
    }

    /**
     * Creates a <code>TSTest</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTest
     */
    public TSTest createTSTest(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        TSTest tSTest_ = createTSTest();
        tSTest_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSTest_);
    }

    /**
     * Creates a <code>TSBody</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSBody
     */
    public TSBody createTSBody(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        TSBody tSBody_ = createTSBody();
        tSBody_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSBody_);
    }

    /**
     * Creates a <code>TSInvokeObject</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeObject
     */
    public TSInvokeObject createTSInvokeObject(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        TSInvokeObject tSInvokeObject_ = createTSInvokeObject();
        tSInvokeObject_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSInvokeObject_);
    }

    /**
     * Creates a <code>TSIn</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSIn
     */
    public TSIn createTSIn(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        TSIn tSIn_ = createTSIn();
        tSIn_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSIn_);
    }

    /**
     * Creates a <code>TSValueElement</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSValueElement
     */
    public TSValueElement createTSValueElement(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        TSValueElement tSValueElement_ = createTSValueElement();
        tSValueElement_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSValueElement_);
    }

    /**
     * Creates a <code>TSAny</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAny
     */
    public TSAny createTSAny(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        TSAny tSAny_ = createTSAny();
        tSAny_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAny_);
    }

    /**
     * Creates a <code>TSInvokeService</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeService
     */
    public TSInvokeService createTSInvokeService(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        TSInvokeService tSInvokeService_ = createTSInvokeService();
        tSInvokeService_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSInvokeService_);
    }

    /**
     * Creates a <code>TSAssert</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssert
     */
    public TSAssert createTSAssert(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        TSAssert tSAssert_ = createTSAssert();
        tSAssert_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssert_);
    }

    /**
     * Creates a <code>TSAssertReturn</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertReturn
     */
    public TSAssertReturn createTSAssertReturn(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        TSAssertReturn tSAssertReturn_ = createTSAssertReturn();
        tSAssertReturn_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssertReturn_);
    }

    /**
     * Creates a <code>TSAssertException</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertException
     */
    public TSAssertException createTSAssertException(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        TSAssertException tSAssertException_ = createTSAssertException();
        tSAssertException_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssertException_);
    }

    /**
     * Creates a <code>TSTestcase</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTestcase
     */
    public TSTestcase createTSTestcase(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        TSTestcase tSTestcase_ = createTSTestcase();
        tSTestcase_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSTestcase_);
    }

    /**
     * Creates a <code>TSTest</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSTest
     */
    public TSTest createTSTest(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        TSTest tSTest_ = createTSTest();
        tSTest_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSTest_);
    }

    /**
     * Creates a <code>TSBody</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSBody
     */
    public TSBody createTSBody(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        TSBody tSBody_ = createTSBody();
        tSBody_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSBody_);
    }

    /**
     * Creates a <code>TSInvokeObject</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeObject
     */
    public TSInvokeObject createTSInvokeObject(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        TSInvokeObject tSInvokeObject_ = createTSInvokeObject();
        tSInvokeObject_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSInvokeObject_);
    }

    /**
     * Creates a <code>TSIn</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSIn
     */
    public TSIn createTSIn(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        TSIn tSIn_ = createTSIn();
        tSIn_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSIn_);
    }

    /**
     * Creates a <code>TSValueElement</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSValueElement
     */
    public TSValueElement createTSValueElement(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        TSValueElement tSValueElement_ = createTSValueElement();
        tSValueElement_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSValueElement_);
    }

    /**
     * Creates a <code>TSAny</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAny
     */
    public TSAny createTSAny(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        TSAny tSAny_ = createTSAny();
        tSAny_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAny_);
    }

    /**
     * Creates a <code>TSInvokeService</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSInvokeService
     */
    public TSInvokeService createTSInvokeService(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        TSInvokeService tSInvokeService_ = createTSInvokeService();
        tSInvokeService_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSInvokeService_);
    }

    /**
     * Creates a <code>TSAssert</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssert
     */
    public TSAssert createTSAssert(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        TSAssert tSAssert_ = createTSAssert();
        tSAssert_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssert_);
    }

    /**
     * Creates a <code>TSAssertReturn</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertReturn
     */
    public TSAssertReturn createTSAssertReturn(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        TSAssertReturn tSAssertReturn_ = createTSAssertReturn();
        tSAssertReturn_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssertReturn_);
    }

    /**
     * Creates a <code>TSAssertException</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TSAssertException
     */
    public TSAssertException createTSAssertException(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        TSAssertException tSAssertException_ = createTSAssertException();
        tSAssertException_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (tSAssertException_);
    }

    /**
     * Creates a <code>TSTestcase</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSTestcase
     */
    public TSTestcase createTSTestcase(TSTestcase source) {
        TSTestcase tSTestcase_ = createTSTestcase();
        tSTestcase_.setup(source);
        return (tSTestcase_);
    }

    /**
     * Creates a <code>TSTest</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSTest
     */
    public TSTest createTSTest(TSTest source) {
        TSTest tSTest_ = createTSTest();
        tSTest_.setup(source);
        return (tSTest_);
    }

    /**
     * Creates a <code>TSBody</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSBody
     */
    public TSBody createTSBody(TSBody source) {
        TSBody tSBody_ = createTSBody();
        tSBody_.setup(source);
        return (tSBody_);
    }

    /**
     * Creates a <code>TSInvokeObject</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSInvokeObject
     */
    public TSInvokeObject createTSInvokeObject(TSInvokeObject source) {
        TSInvokeObject tSInvokeObject_ = createTSInvokeObject();
        tSInvokeObject_.setup(source);
        return (tSInvokeObject_);
    }

    /**
     * Creates a <code>TSIn</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSIn
     */
    public TSIn createTSIn(TSIn source) {
        TSIn tSIn_ = createTSIn();
        tSIn_.setup(source);
        return (tSIn_);
    }

    /**
     * Creates a <code>TSValueElement</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSValueElement
     */
    public TSValueElement createTSValueElement(TSValueElement source) {
        TSValueElement tSValueElement_ = createTSValueElement();
        tSValueElement_.setup(source);
        return (tSValueElement_);
    }

    /**
     * Creates a <code>TSAny</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSAny
     */
    public TSAny createTSAny(TSAny source) {
        TSAny tSAny_ = createTSAny();
        tSAny_.setup(source);
        return (tSAny_);
    }

    /**
     * Creates a <code>TSInvokeService</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSInvokeService
     */
    public TSInvokeService createTSInvokeService(TSInvokeService source) {
        TSInvokeService tSInvokeService_ = createTSInvokeService();
        tSInvokeService_.setup(source);
        return (tSInvokeService_);
    }

    /**
     * Creates a <code>TSAssert</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSAssert
     */
    public TSAssert createTSAssert(TSAssert source) {
        TSAssert tSAssert_ = createTSAssert();
        tSAssert_.setup(source);
        return (tSAssert_);
    }

    /**
     * Creates a <code>TSAssertReturn</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSAssertReturn
     */
    public TSAssertReturn createTSAssertReturn(TSAssertReturn source) {
        TSAssertReturn tSAssertReturn_ = createTSAssertReturn();
        tSAssertReturn_.setup(source);
        return (tSAssertReturn_);
    }

    /**
     * Creates a <code>TSAssertException</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSAssertException
     */
    public TSAssertException createTSAssertException(TSAssertException source) {
        TSAssertException tSAssertException_ = createTSAssertException();
        tSAssertException_.setup(source);
        return (tSAssertException_);
    }

    /**
     * Creates a <code>TSTestcase</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return TSTestcase
     */
    public TSTestcase createTSTestcase(Document doc) {
        TSTestcase tSTestcase_ = createTSTestcase();
        tSTestcase_.setup(doc);
        return (tSTestcase_);
    }

    /**
     * Creates a <code>TSTest</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return TSTest
     */
    public TSTest createTSTest(Document doc) {
        TSTest tSTest_ = createTSTest();
        tSTest_.setup(doc);
        return (tSTest_);
    }

    /**
     * Creates a <code>TSBody</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return TSBody
     */
    public TSBody createTSBody(Document doc) {
        TSBody tSBody_ = createTSBody();
        tSBody_.setup(doc);
        return (tSBody_);
    }

    /**
     * Creates a <code>TSInvokeObject</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return TSInvokeObject
     */
    public TSInvokeObject createTSInvokeObject(Document doc) {
        TSInvokeObject tSInvokeObject_ = createTSInvokeObject();
        tSInvokeObject_.setup(doc);
        return (tSInvokeObject_);
    }

    /**
     * Creates a <code>TSIn</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return TSIn
     */
    public TSIn createTSIn(Document doc) {
        TSIn tSIn_ = createTSIn();
        tSIn_.setup(doc);
        return (tSIn_);
    }

    /**
     * Creates a <code>TSValueElement</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return TSValueElement
     */
    public TSValueElement createTSValueElement(Document doc) {
        TSValueElement tSValueElement_ = createTSValueElement();
        tSValueElement_.setup(doc);
        return (tSValueElement_);
    }

    /**
     * Creates a <code>TSAny</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return TSAny
     */
    public TSAny createTSAny(Document doc) {
        TSAny tSAny_ = createTSAny();
        tSAny_.setup(doc);
        return (tSAny_);
    }

    /**
     * Creates a <code>TSInvokeService</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return TSInvokeService
     */
    public TSInvokeService createTSInvokeService(Document doc) {
        TSInvokeService tSInvokeService_ = createTSInvokeService();
        tSInvokeService_.setup(doc);
        return (tSInvokeService_);
    }

    /**
     * Creates a <code>TSAssert</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return TSAssert
     */
    public TSAssert createTSAssert(Document doc) {
        TSAssert tSAssert_ = createTSAssert();
        tSAssert_.setup(doc);
        return (tSAssert_);
    }

    /**
     * Creates a <code>TSAssertReturn</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return TSAssertReturn
     */
    public TSAssertReturn createTSAssertReturn(Document doc) {
        TSAssertReturn tSAssertReturn_ = createTSAssertReturn();
        tSAssertReturn_.setup(doc);
        return (tSAssertReturn_);
    }

    /**
     * Creates a <code>TSAssertException</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return TSAssertException
     */
    public TSAssertException createTSAssertException(Document doc) {
        TSAssertException tSAssertException_ = createTSAssertException();
        tSAssertException_.setup(doc);
        return (tSAssertException_);
    }

    /**
     * Creates a <code>TSTestcase</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return TSTestcase
     */
    public TSTestcase createTSTestcase(Element element) {
        TSTestcase tSTestcase_ = createTSTestcase();
        tSTestcase_.setup(element);
        return (tSTestcase_);
    }

    /**
     * Creates a <code>TSTest</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return TSTest
     */
    public TSTest createTSTest(Element element) {
        TSTest tSTest_ = createTSTest();
        tSTest_.setup(element);
        return (tSTest_);
    }

    /**
     * Creates a <code>TSBody</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return TSBody
     */
    public TSBody createTSBody(Element element) {
        TSBody tSBody_ = createTSBody();
        tSBody_.setup(element);
        return (tSBody_);
    }

    /**
     * Creates a <code>TSInvokeObject</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return TSInvokeObject
     */
    public TSInvokeObject createTSInvokeObject(Element element) {
        TSInvokeObject tSInvokeObject_ = createTSInvokeObject();
        tSInvokeObject_.setup(element);
        return (tSInvokeObject_);
    }

    /**
     * Creates a <code>TSIn</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return TSIn
     */
    public TSIn createTSIn(Element element) {
        TSIn tSIn_ = createTSIn();
        tSIn_.setup(element);
        return (tSIn_);
    }

    /**
     * Creates a <code>TSValueElement</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return TSValueElement
     */
    public TSValueElement createTSValueElement(Element element) {
        TSValueElement tSValueElement_ = createTSValueElement();
        tSValueElement_.setup(element);
        return (tSValueElement_);
    }

    /**
     * Creates a <code>TSAny</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return TSAny
     */
    public TSAny createTSAny(Element element) {
        TSAny tSAny_ = createTSAny();
        tSAny_.setup(element);
        return (tSAny_);
    }

    /**
     * Creates a <code>TSInvokeService</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return TSInvokeService
     */
    public TSInvokeService createTSInvokeService(Element element) {
        TSInvokeService tSInvokeService_ = createTSInvokeService();
        tSInvokeService_.setup(element);
        return (tSInvokeService_);
    }

    /**
     * Creates a <code>TSAssert</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return TSAssert
     */
    public TSAssert createTSAssert(Element element) {
        TSAssert tSAssert_ = createTSAssert();
        tSAssert_.setup(element);
        return (tSAssert_);
    }

    /**
     * Creates a <code>TSAssertReturn</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return TSAssertReturn
     */
    public TSAssertReturn createTSAssertReturn(Element element) {
        TSAssertReturn tSAssertReturn_ = createTSAssertReturn();
        tSAssertReturn_.setup(element);
        return (tSAssertReturn_);
    }

    /**
     * Creates a <code>TSAssertException</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return TSAssertException
     */
    public TSAssertException createTSAssertException(Element element) {
        TSAssertException tSAssertException_ = createTSAssertException();
        tSAssertException_.setup(element);
        return (tSAssertException_);
    }

    /**
     * Creates a <code>TSTestcase</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TSTestcase
     */
    public TSTestcase createTSTestcase(RStack stack) {
        TSTestcase tSTestcase_ = createTSTestcase();
        tSTestcase_.setup(stack);
        return (tSTestcase_);
    }

    /**
     * Creates a <code>TSTest</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TSTest
     */
    public TSTest createTSTest(RStack stack) {
        TSTest tSTest_ = createTSTest();
        tSTest_.setup(stack);
        return (tSTest_);
    }

    /**
     * Creates a <code>TSBody</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TSBody
     */
    public TSBody createTSBody(RStack stack) {
        TSBody tSBody_ = createTSBody();
        tSBody_.setup(stack);
        return (tSBody_);
    }

    /**
     * Creates a <code>TSInvokeObject</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TSInvokeObject
     */
    public TSInvokeObject createTSInvokeObject(RStack stack) {
        TSInvokeObject tSInvokeObject_ = createTSInvokeObject();
        tSInvokeObject_.setup(stack);
        return (tSInvokeObject_);
    }

    /**
     * Creates a <code>TSIn</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TSIn
     */
    public TSIn createTSIn(RStack stack) {
        TSIn tSIn_ = createTSIn();
        tSIn_.setup(stack);
        return (tSIn_);
    }

    /**
     * Creates a <code>TSValueElement</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TSValueElement
     */
    public TSValueElement createTSValueElement(RStack stack) {
        TSValueElement tSValueElement_ = createTSValueElement();
        tSValueElement_.setup(stack);
        return (tSValueElement_);
    }

    /**
     * Creates a <code>TSAny</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TSAny
     */
    public TSAny createTSAny(RStack stack) {
        TSAny tSAny_ = createTSAny();
        tSAny_.setup(stack);
        return (tSAny_);
    }

    /**
     * Creates a <code>TSInvokeService</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TSInvokeService
     */
    public TSInvokeService createTSInvokeService(RStack stack) {
        TSInvokeService tSInvokeService_ = createTSInvokeService();
        tSInvokeService_.setup(stack);
        return (tSInvokeService_);
    }

    /**
     * Creates a <code>TSAssert</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TSAssert
     */
    public TSAssert createTSAssert(RStack stack) {
        TSAssert tSAssert_ = createTSAssert();
        tSAssert_.setup(stack);
        return (tSAssert_);
    }

    /**
     * Creates a <code>TSAssertReturn</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TSAssertReturn
     */
    public TSAssertReturn createTSAssertReturn(RStack stack) {
        TSAssertReturn tSAssertReturn_ = createTSAssertReturn();
        tSAssertReturn_.setup(stack);
        return (tSAssertReturn_);
    }

    /**
     * Creates a <code>TSAssertException</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TSAssertException
     */
    public TSAssertException createTSAssertException(RStack stack) {
        TSAssertException tSAssertException_ = createTSAssertException();
        tSAssertException_.setup(stack);
        return (tSAssertException_);
    }

    /**
     * Creates a <code>TSExpression</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TSExpression
     */
    public TSExpression createTSExpression(RStack stack) {
        TSExpression tSExpression_ = createTSExpression();
        tSExpression_.setup(stack);
        return (tSExpression_);
    }

    /**
     * Creates a <code>TSExpression</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSExpression
     */
    public TSExpression createTSExpression(TSExpression source) {
        TSExpression tSExpression_ = createTSExpression();
        tSExpression_.setup(source);
        return (tSExpression_);
    }

    /**
     * Creates a <code>TSValueExpressionValue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TSValueExpressionValue
     */
    public TSValueExpressionValue createTSValueExpressionValue(RStack stack) {
        TSValueExpressionValue tSValueExpressionValue_ = createTSValueExpressionValue();
        tSValueExpressionValue_.setup(stack);
        return (tSValueExpressionValue_);
    }

    /**
     * Creates a <code>TSValueElementAnyAttr</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TSValueElementAnyAttr
     */
    public TSValueElementAnyAttr createTSValueElementAnyAttr(RStack stack) {
        TSValueElementAnyAttr tSValueElementAnyAttr_ = createTSValueElementAnyAttr();
        tSValueElementAnyAttr_.setup(stack);
        return (tSValueElementAnyAttr_);
    }

    /**
     * Creates a <code>TSAnyAnyAttr</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TSAnyAnyAttr
     */
    public TSAnyAnyAttr createTSAnyAnyAttr(RStack stack) {
        TSAnyAnyAttr tSAnyAnyAttr_ = createTSAnyAnyAttr();
        tSAnyAnyAttr_.setup(stack);
        return (tSAnyAnyAttr_);
    }

    /**
     * Creates a <code>TSValueExpressionValue</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSValueExpressionValue
     */
    public TSValueExpressionValue createTSValueExpressionValue(TSValueExpressionValue source) {
        TSValueExpressionValue tSValueExpressionValue_ = createTSValueExpressionValue();
        tSValueExpressionValue_.setup(source);
        return (tSValueExpressionValue_);
    }

    /**
     * Creates a <code>TSValueElementAnyAttr</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSValueElementAnyAttr
     */
    public TSValueElementAnyAttr createTSValueElementAnyAttr(TSValueElementAnyAttr source) {
        TSValueElementAnyAttr tSValueElementAnyAttr_ = createTSValueElementAnyAttr();
        tSValueElementAnyAttr_.setup(source);
        return (tSValueElementAnyAttr_);
    }

    /**
     * Creates a <code>TSAnyAnyAttr</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return TSAnyAnyAttr
     */
    public TSAnyAnyAttr createTSAnyAnyAttr(TSAnyAnyAttr source) {
        TSAnyAnyAttr tSAnyAnyAttr_ = createTSAnyAnyAttr();
        tSAnyAnyAttr_.setup(source);
        return (tSAnyAnyAttr_);
    }

    /**
     * Creates a default <code>RString</code>.
     * This method is a hook method of the AbstractTestScriptFactory.
     *
     * @return RString
     */
    public RString createRString() {
        return (new RString());
    }

    /**
     * Creates a <code>RString</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return RString
     */
    public RString createRString(RStack stack) {
        return (new RString(stack));
    }
}
